import sys, os
import argparse
import signal
import importlib.util
import globs

"""
Check that all packages we are using are present. If not, let users know.
"""
def checkRequirements():
    stop = False

    # check system packages
    modules = [ 'PyQt5', 'vtk', 'numpy', 'bisect']
    not_found_modules = []
    for m in modules:
        if importlib.util.find_spec(m) == None:
            not_found_modules.append(m)

    if len(not_found_modules) > 0:
        print("The following modules were not found: {}. "
            "This may be fixed by installing them either via 'pip' or 'conda'.".format(", ".join(not_found_modules)))
        stop = True

    # check MOOSE packages
    moose_modules = ['mooseutils', 'chigger']
    not_found_modules = []
    for m in moose_modules:
        if importlib.util.find_spec(m) == None:
            not_found_modules.append(m)

    if len(not_found_modules) > 0:
        print("The following modules were not found: {}. "
            "This may be fixed by setting MOOSE_DIR environment variable.".format(", ".join(not_found_modules)))
        stop = True

    if stop:
        exit(1)

"""
Set paths required for running
"""
def set_paths():
    global otter_dir

    otter_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
    moose_dir = os.environ.get("MOOSE_DIR", None)
    if moose_dir == None:
        app_dir = os.path.dirname(otter_dir)
        moose_dir = os.path.join(app_dir, "moose")
    chigger_dir = os.path.join(moose_dir, "python", "chigger")

    sys.path.append(os.path.join(moose_dir, "python"))
    sys.path.append(chigger_dir)
    sys.path.append(otter_dir)


"""
Run the application
"""
def run():
    global otter_dir

    parser = argparse.ArgumentParser(
        description = 'GUI for MOOSE\'s chigger.'
    )
    parser.add_argument(
        'file',
        nargs = '?',
        default = None,
        help = 'Load python script generated by Otter'
    )
    parser.add_argument(
        '--version',
        action = 'version',
        version = 'otter {}'.format(globs.VERSION))
    args = parser.parse_args()

    # ----

    checkRequirements()

    from PyQt5 import QtWidgets, QtGui
    from MainWindow import MainWindow

    qapp = QtWidgets.QApplication(sys.argv)
    icon_path = os.path.join(otter_dir, "otter.png")
    qapp.setWindowIcon(QtGui.QIcon(icon_path))

    window = MainWindow()
    window.show()

    sys.exit(qapp.exec_())

if __name__ == '__main__':
    set_paths()
    run()
