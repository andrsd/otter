/* Generated by Cython 0.29.21 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
#error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
#error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ((size_t) & ((type *)0)->member)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
#ifndef __stdcall
#define __stdcall
#endif
#ifndef __cdecl
#define __cdecl
#endif
#ifndef __fastcall
#define __fastcall
#endif
#endif
#ifndef DL_IMPORT
#define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
#define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
#if PY_VERSION_HEX >= 0x02070000
#define HAVE_LONG_LONG
#endif
#endif
#ifndef PY_LONG_LONG
#define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
#define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_PYSTON 0
#define CYTHON_COMPILING_IN_CPYTHON 0
#undef CYTHON_USE_TYPE_SLOTS
#define CYTHON_USE_TYPE_SLOTS 0
#undef CYTHON_USE_PYTYPE_LOOKUP
#define CYTHON_USE_PYTYPE_LOOKUP 0
#if PY_VERSION_HEX < 0x03050000
#undef CYTHON_USE_ASYNC_SLOTS
#define CYTHON_USE_ASYNC_SLOTS 0
#elif !defined(CYTHON_USE_ASYNC_SLOTS)
#define CYTHON_USE_ASYNC_SLOTS 1
#endif
#undef CYTHON_USE_PYLIST_INTERNALS
#define CYTHON_USE_PYLIST_INTERNALS 0
#undef CYTHON_USE_UNICODE_INTERNALS
#define CYTHON_USE_UNICODE_INTERNALS 0
#undef CYTHON_USE_UNICODE_WRITER
#define CYTHON_USE_UNICODE_WRITER 0
#undef CYTHON_USE_PYLONG_INTERNALS
#define CYTHON_USE_PYLONG_INTERNALS 0
#undef CYTHON_AVOID_BORROWED_REFS
#define CYTHON_AVOID_BORROWED_REFS 1
#undef CYTHON_ASSUME_SAFE_MACROS
#define CYTHON_ASSUME_SAFE_MACROS 0
#undef CYTHON_UNPACK_METHODS
#define CYTHON_UNPACK_METHODS 0
#undef CYTHON_FAST_THREAD_STATE
#define CYTHON_FAST_THREAD_STATE 0
#undef CYTHON_FAST_PYCALL
#define CYTHON_FAST_PYCALL 0
#undef CYTHON_PEP489_MULTI_PHASE_INIT
#define CYTHON_PEP489_MULTI_PHASE_INIT 0
#undef CYTHON_USE_TP_FINALIZE
#define CYTHON_USE_TP_FINALIZE 0
#undef CYTHON_USE_DICT_VERSIONS
#define CYTHON_USE_DICT_VERSIONS 0
#undef CYTHON_USE_EXC_INFO_STACK
#define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_PYSTON 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#ifndef CYTHON_USE_TYPE_SLOTS
#define CYTHON_USE_TYPE_SLOTS 1
#endif
#undef CYTHON_USE_PYTYPE_LOOKUP
#define CYTHON_USE_PYTYPE_LOOKUP 0
#undef CYTHON_USE_ASYNC_SLOTS
#define CYTHON_USE_ASYNC_SLOTS 0
#undef CYTHON_USE_PYLIST_INTERNALS
#define CYTHON_USE_PYLIST_INTERNALS 0
#ifndef CYTHON_USE_UNICODE_INTERNALS
#define CYTHON_USE_UNICODE_INTERNALS 1
#endif
#undef CYTHON_USE_UNICODE_WRITER
#define CYTHON_USE_UNICODE_WRITER 0
#undef CYTHON_USE_PYLONG_INTERNALS
#define CYTHON_USE_PYLONG_INTERNALS 0
#ifndef CYTHON_AVOID_BORROWED_REFS
#define CYTHON_AVOID_BORROWED_REFS 0
#endif
#ifndef CYTHON_ASSUME_SAFE_MACROS
#define CYTHON_ASSUME_SAFE_MACROS 1
#endif
#ifndef CYTHON_UNPACK_METHODS
#define CYTHON_UNPACK_METHODS 1
#endif
#undef CYTHON_FAST_THREAD_STATE
#define CYTHON_FAST_THREAD_STATE 0
#undef CYTHON_FAST_PYCALL
#define CYTHON_FAST_PYCALL 0
#undef CYTHON_PEP489_MULTI_PHASE_INIT
#define CYTHON_PEP489_MULTI_PHASE_INIT 0
#undef CYTHON_USE_TP_FINALIZE
#define CYTHON_USE_TP_FINALIZE 0
#undef CYTHON_USE_DICT_VERSIONS
#define CYTHON_USE_DICT_VERSIONS 0
#undef CYTHON_USE_EXC_INFO_STACK
#define CYTHON_USE_EXC_INFO_STACK 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_PYSTON 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#ifndef CYTHON_USE_TYPE_SLOTS
#define CYTHON_USE_TYPE_SLOTS 1
#endif
#if PY_VERSION_HEX < 0x02070000
#undef CYTHON_USE_PYTYPE_LOOKUP
#define CYTHON_USE_PYTYPE_LOOKUP 0
#elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
#define CYTHON_USE_PYTYPE_LOOKUP 1
#endif
#if PY_MAJOR_VERSION < 3
#undef CYTHON_USE_ASYNC_SLOTS
#define CYTHON_USE_ASYNC_SLOTS 0
#elif !defined(CYTHON_USE_ASYNC_SLOTS)
#define CYTHON_USE_ASYNC_SLOTS 1
#endif
#if PY_VERSION_HEX < 0x02070000
#undef CYTHON_USE_PYLONG_INTERNALS
#define CYTHON_USE_PYLONG_INTERNALS 0
#elif !defined(CYTHON_USE_PYLONG_INTERNALS)
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#ifndef CYTHON_USE_PYLIST_INTERNALS
#define CYTHON_USE_PYLIST_INTERNALS 1
#endif
#ifndef CYTHON_USE_UNICODE_INTERNALS
#define CYTHON_USE_UNICODE_INTERNALS 1
#endif
#if PY_VERSION_HEX < 0x030300F0
#undef CYTHON_USE_UNICODE_WRITER
#define CYTHON_USE_UNICODE_WRITER 0
#elif !defined(CYTHON_USE_UNICODE_WRITER)
#define CYTHON_USE_UNICODE_WRITER 1
#endif
#ifndef CYTHON_AVOID_BORROWED_REFS
#define CYTHON_AVOID_BORROWED_REFS 0
#endif
#ifndef CYTHON_ASSUME_SAFE_MACROS
#define CYTHON_ASSUME_SAFE_MACROS 1
#endif
#ifndef CYTHON_UNPACK_METHODS
#define CYTHON_UNPACK_METHODS 1
#endif
#ifndef CYTHON_FAST_THREAD_STATE
#define CYTHON_FAST_THREAD_STATE 1
#endif
#ifndef CYTHON_FAST_PYCALL
#define CYTHON_FAST_PYCALL 1
#endif
#ifndef CYTHON_PEP489_MULTI_PHASE_INIT
#define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
#endif
#ifndef CYTHON_USE_TP_FINALIZE
#define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
#endif
#ifndef CYTHON_USE_DICT_VERSIONS
#define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
#endif
#ifndef CYTHON_USE_EXC_INFO_STACK
#define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
#endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
#include "longintrepr.h"
#undef SHIFT
#undef BASE
#undef MASK
#ifdef SIZEOF_VOID_P
enum
{
  __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void *))
};
#endif
#endif
#ifndef __has_attribute
#define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
#define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
#if defined(__GNUC__)
#define CYTHON_RESTRICT __restrict__
#elif defined(_MSC_VER) && _MSC_VER >= 1400
#define CYTHON_RESTRICT __restrict
#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#define CYTHON_RESTRICT restrict
#else
#define CYTHON_RESTRICT
#endif
#endif
#ifndef CYTHON_UNUSED
#if defined(__GNUC__)
#if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#define CYTHON_UNUSED __attribute__((__unused__))
#else
#define CYTHON_UNUSED
#endif
#elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#define CYTHON_UNUSED __attribute__((__unused__))
#else
#define CYTHON_UNUSED
#endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#if defined(__cplusplus)
template <class T>
void
CYTHON_MAYBE_UNUSED_VAR(const T &)
{
}
#else
#define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#endif
#endif
#ifndef CYTHON_NCP_UNUSED
#if CYTHON_COMPILING_IN_CPYTHON
#define CYTHON_NCP_UNUSED
#else
#define CYTHON_NCP_UNUSED CYTHON_UNUSED
#endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
#ifndef _MSC_STDINT_H_
#if _MSC_VER < 1300
typedef unsigned char uint8_t;
typedef unsigned int uint32_t;
#else
typedef unsigned __int8 uint8_t;
typedef unsigned __int32 uint32_t;
#endif
#endif
#else
#include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
#if defined(__cplusplus) && __cplusplus >= 201103L
#if __has_cpp_attribute(fallthrough)
#define CYTHON_FALLTHROUGH [[fallthrough]]
#elif __has_cpp_attribute(clang::fallthrough)
#define CYTHON_FALLTHROUGH [[clang::fallthrough]]
#elif __has_cpp_attribute(gnu::fallthrough)
#define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
#endif
#endif
#ifndef CYTHON_FALLTHROUGH
#if __has_attribute(fallthrough)
#define CYTHON_FALLTHROUGH __attribute__((fallthrough))
#else
#define CYTHON_FALLTHROUGH
#endif
#endif
#if defined(__clang__) && defined(__apple_build_version__)
#if __apple_build_version__ < 7000000
#undef CYTHON_FALLTHROUGH
#define CYTHON_FALLTHROUGH
#endif
#endif
#endif

#ifndef __cplusplus
#error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
#if defined(__clang__)
#define CYTHON_INLINE __inline__ __attribute__((__unused__))
#else
#define CYTHON_INLINE inline
#endif
#endif
template <typename T>
void
__Pyx_call_destructor(T & x)
{
  x.~T();
}
template <typename T>
class __Pyx_FakeReference
{
public:
  __Pyx_FakeReference() : ptr(NULL) {}
  __Pyx_FakeReference(const T & ref) : ptr(const_cast<T *>(&ref)) {}
  T * operator->() { return ptr; }
  T * operator&() { return ptr; }
  operator T &() { return *ptr; }
  template <typename U>
  bool operator==(U other)
  {
    return *ptr == other;
  }
  template <typename U>
  bool operator!=(U other)
  {
    return *ptr != other;
  }

private:
  T * ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
#define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)            \
  PyCode_New(a + k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#define __Pyx_DefaultClassType PyClass_Type
#else
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
#define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)            \
  PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
#define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)            \
  PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
#define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
#define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
#define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
#define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
#define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
#ifndef METH_FASTCALL
#define METH_FASTCALL 0x80
#endif
typedef PyObject * (*__Pyx_PyCFunctionFast)(PyObject * self,
                                            PyObject * const * args,
                                            Py_ssize_t nargs);
typedef PyObject * (*__Pyx_PyCFunctionFastWithKeywords)(PyObject * self,
                                                        PyObject * const * args,
                                                        Py_ssize_t nargs,
                                                        PyObject * kwnames);
#else
#define __Pyx_PyCFunctionFast _PyCFunctionFast
#define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)                                                          \
  ((PyCFunction_Check(func) &&                                                                     \
    (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST |   \
                                                       METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
#define PyObject_Malloc(s) PyMem_Malloc(s)
#define PyObject_Free(p) PyMem_Free(p)
#define PyObject_Realloc(p) PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
#define PyMem_RawMalloc(n) PyMem_Malloc(n)
#define PyMem_RawRealloc(p, n) PyMem_Realloc(p, n)
#define PyMem_RawFree(p) PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
#define __Pyx_PyCode_HasFreeVars(co) PyCode_HasFreeVars(co)
#define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
#define __Pyx_PyCode_HasFreeVars(co) (PyCode_GetNumFree(co) > 0)
#define __Pyx_PyFrame_SetLineNumber(frame, lineno) (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
#define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
#define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
#define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
#define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int
PyThread_tss_create(Py_tss_t * key)
{
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t *
PyThread_tss_alloc(void)
{
  Py_tss_t * key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void
PyThread_tss_free(Py_tss_t * key)
{
  PyObject_Free(key);
}
static CYTHON_INLINE int
PyThread_tss_is_created(Py_tss_t * key)
{
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void
PyThread_tss_delete(Py_tss_t * key)
{
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int
PyThread_tss_set(Py_tss_t * key, void * value)
{
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void *
PyThread_tss_get(Py_tss_t * key)
{
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n) ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n) PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
#define __Pyx_PyNumber_Divide(x, y) PyNumber_TrueDivide(x, y)
#define __Pyx_PyNumber_InPlaceDivide(x, y) PyNumber_InPlaceTrueDivide(x, y)
#else
#define __Pyx_PyNumber_Divide(x, y) PyNumber_Divide(x, y)
#define __Pyx_PyNumber_InPlaceDivide(x, y) PyNumber_InPlaceDivide(x, y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)                                                        \
  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *)name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name) PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
#define CYTHON_PEP393_ENABLED 1
#define __Pyx_PyUnicode_READY(op)                                                                  \
  (likely(PyUnicode_IS_READY(op)) ? 0 : _PyUnicode_Ready((PyObject *)(op)))
#define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_LENGTH(u)
#define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
#define __Pyx_PyUnicode_MAX_CHAR_VALUE(u) PyUnicode_MAX_CHAR_VALUE(u)
#define __Pyx_PyUnicode_KIND(u) PyUnicode_KIND(u)
#define __Pyx_PyUnicode_DATA(u) PyUnicode_DATA(u)
#define __Pyx_PyUnicode_READ(k, d, i) PyUnicode_READ(k, d, i)
#define __Pyx_PyUnicode_WRITE(k, d, i, ch) PyUnicode_WRITE(k, d, i, ch)
#if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
#define __Pyx_PyUnicode_IS_TRUE(u)                                                                 \
  (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
#define __Pyx_PyUnicode_IS_TRUE(u) (0 != PyUnicode_GET_LENGTH(u))
#endif
#else
#define CYTHON_PEP393_ENABLED 0
#define PyUnicode_1BYTE_KIND 1
#define PyUnicode_2BYTE_KIND 2
#define PyUnicode_4BYTE_KIND 4
#define __Pyx_PyUnicode_READY(op) (0)
#define __Pyx_PyUnicode_GET_LENGTH(u) PyUnicode_GET_SIZE(u)
#define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
#define __Pyx_PyUnicode_MAX_CHAR_VALUE(u) ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
#define __Pyx_PyUnicode_KIND(u) (sizeof(Py_UNICODE))
#define __Pyx_PyUnicode_DATA(u) ((void *)PyUnicode_AS_UNICODE(u))
#define __Pyx_PyUnicode_READ(k, d, i) ((void)(k), (Py_UCS4)(((Py_UNICODE *)d)[i]))
#define __Pyx_PyUnicode_WRITE(k, d, i, ch) (((void)(k)), ((Py_UNICODE *)d)[i] = ch)
#define __Pyx_PyUnicode_IS_TRUE(u) (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyUnicode_Concat(a, b) PyNumber_Add(a, b)
#define __Pyx_PyUnicode_ConcatSafe(a, b) PyNumber_Add(a, b)
#else
#define __Pyx_PyUnicode_Concat(a, b) PyUnicode_Concat(a, b)
#define __Pyx_PyUnicode_ConcatSafe(a, b)                                                           \
  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? PyNumber_Add(a, b)                     \
                                                          : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
#define PyUnicode_Contains(u, s) PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
#define PyByteArray_Check(obj) PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
#define PyObject_Format(obj, fmt) PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)                                                            \
  ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b))))                    \
       ? PyNumber_Remainder(a, b)                                                                  \
       : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)                                                           \
  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b))))                  \
       ? PyNumber_Remainder(a, b)                                                                  \
       : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Format(a, b) PyUnicode_Format(a, b)
#else
#define __Pyx_PyString_Format(a, b) PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
#define PyObject_ASCII(o) PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
#define PyBaseString_Type PyUnicode_Type
#define PyStringObject PyUnicodeObject
#define PyString_Type PyUnicode_Type
#define PyString_Check PyUnicode_Check
#define PyString_CheckExact PyUnicode_CheckExact
#ifndef PyObject_Unicode
#define PyObject_Unicode PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
#define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
#define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
#define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
#define PySet_CheckExact(obj) (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
#define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
#define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
#define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
#define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PySequence_SIZE(seq) Py_SIZE(seq)
#else
#define __Pyx_PySequence_SIZE(seq) PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
#define PyIntObject PyLongObject
#define PyInt_Type PyLong_Type
#define PyInt_Check(op) PyLong_Check(op)
#define PyInt_CheckExact(op) PyLong_CheckExact(op)
#define PyInt_FromString PyLong_FromString
#define PyInt_FromUnicode PyLong_FromUnicode
#define PyInt_FromLong PyLong_FromLong
#define PyInt_FromSize_t PyLong_FromSize_t
#define PyInt_FromSsize_t PyLong_FromSsize_t
#define PyInt_AsLong PyLong_AsLong
#define PyInt_AS_LONG PyLong_AS_LONG
#define PyInt_AsSsize_t PyLong_AsSsize_t
#define PyInt_AsUnsignedLongMask PyLong_AsUnsignedLongMask
#define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#define PyNumber_Int PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
#define PyBoolObject PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
#ifndef PyUnicode_InternFromString
#define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#endif
#if PY_VERSION_HEX < 0x030200A4
typedef long Py_hash_t;
#define __Pyx_PyInt_FromHash_t PyInt_FromLong
#define __Pyx_PyInt_AsHash_t PyInt_AsLong
#else
#define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
#define __Pyx_PyInt_AsHash_t PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyMethod_New(func, self, klass)                                                      \
  ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
#define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#else
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct *)(Py_TYPE(obj)->tp_reserved))
#endif
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
typedef struct
{
  unaryfunc am_await;
  unaryfunc am_aiter;
  unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float)NAN)
#else
static CYTHON_INLINE float
__PYX_NAN()
{
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno)                                                        \
  {                                                                                                \
    __pyx_filename = __pyx_f[f_index];                                                             \
    (void)__pyx_filename;                                                                          \
    __pyx_lineno = lineno;                                                                         \
    (void)__pyx_lineno;                                                                            \
    __pyx_clineno = __LINE__;                                                                      \
    (void)__pyx_clineno;                                                                           \
  }
#define __PYX_ERR(f_index, lineno, Ln_error)                                                       \
  {                                                                                                \
    __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error;                                             \
  }

#ifndef __PYX_EXTERN_C
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#endif

#define __PYX_HAVE__hit
#define __PYX_HAVE_API__hit
/* Early includes */
#include <string.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <string>
#include <vector>
#include "parse.h"
#include "lex.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct
{
  PyObject ** p;
  const char * s;
  const Py_ssize_t n;
  const char * encoding;
  const char is_unicode;
  const char is_str;
  const char intern;
} __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT                                                   \
  (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)                                                  \
  ((sizeof(type) < sizeof(Py_ssize_t)) ||                                                          \
   (sizeof(type) > sizeof(Py_ssize_t) &&                                                           \
    likely(v < (type)PY_SSIZE_T_MAX || v == (type)PY_SSIZE_T_MAX) &&                               \
    (!is_signed || likely(v > (type)PY_SSIZE_T_MIN || v == (type)PY_SSIZE_T_MIN))) ||              \
   (sizeof(type) == sizeof(Py_ssize_t) &&                                                          \
    (is_signed || likely(v < (type)PY_SSIZE_T_MAX || v == (type)PY_SSIZE_T_MAX))))
static CYTHON_INLINE int
__Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit)
{
  return (size_t)i < (size_t)limit;
}
#if defined(__cplusplus) && __cplusplus >= 201103L
#include <cstdlib>
#define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
#define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
#define __Pyx_sst_abs(value) labs(value)
#elif defined(_MSC_VER)
#define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#define __Pyx_sst_abs(value) llabs(value)
#elif defined(__GNUC__)
#define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
#define __Pyx_sst_abs(value) ((value < 0) ? -value : value)
#endif
static CYTHON_INLINE const char * __Pyx_PyObject_AsString(PyObject *);
static CYTHON_INLINE const char * __Pyx_PyObject_AsStringAndSize(PyObject *, Py_ssize_t * length);
#define __Pyx_PyByteArray_FromString(s)                                                            \
  PyByteArray_FromStringAndSize((const char *)s, strlen((const char *)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char *)s, l)
#define __Pyx_PyBytes_FromString PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject * __Pyx_PyUnicode_FromString(const char *);
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyStr_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
#define __Pyx_PyStr_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s) ((char *)PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s) ((signed char *)PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s) ((unsigned char *)PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s) ((const char *)PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s) ((const signed char *)PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s) ((const unsigned char *)PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s) ((char *)__Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s) ((signed char *)__Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s) ((unsigned char *)__Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s) ((const signed char *)__Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s) ((const unsigned char *)__Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s) __Pyx_PyObject_FromString((const char *)s)
#define __Pyx_PyBytes_FromCString(s) __Pyx_PyBytes_FromString((const char *)s)
#define __Pyx_PyByteArray_FromCString(s) __Pyx_PyByteArray_FromString((const char *)s)
#define __Pyx_PyStr_FromCString(s) __Pyx_PyStr_FromString((const char *)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char *)s)
static CYTHON_INLINE size_t
__Pyx_Py_UNICODE_strlen(const Py_UNICODE * u)
{
  const Py_UNICODE * u_end = u;
  while (*u_end++)
    ;
  return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u) PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject *);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject *);
static CYTHON_INLINE PyObject * __Pyx_PyNumber_IntOrLong(PyObject * x);
#define __Pyx_PySequence_Tuple(obj)                                                                \
  (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject *);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x)                                                                  \
  (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float)__pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int
__Pyx_init_sys_getdefaultencoding_params(void)
{
  PyObject * sys;
  PyObject * default_encoding = NULL;
  PyObject * ascii_chars_u = NULL;
  PyObject * ascii_chars_b = NULL;
  const char * default_encoding_c;
  sys = PyImport_ImportModule("sys");
  if (!sys)
    goto bad;
  default_encoding = PyObject_CallMethod(sys, (char *)"getdefaultencoding", NULL);
  Py_DECREF(sys);
  if (!default_encoding)
    goto bad;
  default_encoding_c = PyBytes_AsString(default_encoding);
  if (!default_encoding_c)
    goto bad;
  if (strcmp(default_encoding_c, "ascii") == 0)
  {
    __Pyx_sys_getdefaultencoding_not_ascii = 0;
  }
  else
  {
    char ascii_chars[128];
    int c;
    for (c = 0; c < 128; c++)
    {
      ascii_chars[c] = c;
    }
    __Pyx_sys_getdefaultencoding_not_ascii = 1;
    ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
    if (!ascii_chars_u)
      goto bad;
    ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
    if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) ||
        memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0)
    {
      PyErr_Format(PyExc_ValueError,
                   "This module compiled with c_string_encoding=ascii, but default encoding "
                   "'%.200s' is not a superset of ascii.",
                   default_encoding_c);
      goto bad;
    }
    Py_DECREF(ascii_chars_u);
    Py_DECREF(ascii_chars_b);
  }
  Py_DECREF(default_encoding);
  return 0;
bad:
  Py_XDECREF(default_encoding);
  Py_XDECREF(ascii_chars_u);
  Py_XDECREF(ascii_chars_b);
  return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size)                                             \
  PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char * __PYX_DEFAULT_STRING_ENCODING;
static int
__Pyx_init_sys_getdefaultencoding_params(void)
{
  PyObject * sys;
  PyObject * default_encoding = NULL;
  char * default_encoding_c;
  sys = PyImport_ImportModule("sys");
  if (!sys)
    goto bad;
  default_encoding = PyObject_CallMethod(sys, (char *)(const char *)"getdefaultencoding", NULL);
  Py_DECREF(sys);
  if (!default_encoding)
    goto bad;
  default_encoding_c = PyBytes_AsString(default_encoding);
  if (!default_encoding_c)
    goto bad;
  __PYX_DEFAULT_STRING_ENCODING = (char *)malloc(strlen(default_encoding_c) + 1);
  if (!__PYX_DEFAULT_STRING_ENCODING)
    goto bad;
  strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
  Py_DECREF(default_encoding);
  return 0;
bad:
  Py_XDECREF(default_encoding);
  return -1;
}
#endif
#endif

/* Test for GCC > 2.95 */
#if defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
#define likely(x) __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
#define likely(x) (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void
__Pyx_pretend_to_initialize(void * ptr)
{
  (void)ptr;
}

static PyObject * __pyx_m = NULL;
static PyObject * __pyx_d;
static PyObject * __pyx_b;
static PyObject * __pyx_cython_runtime = NULL;
static PyObject * __pyx_empty_tuple;
static PyObject * __pyx_empty_bytes;
static PyObject * __pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char * __pyx_filename;

static const char * __pyx_f[] = {
    "hit.pyx",
    "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_3hit_Formatter;
struct __pyx_obj_3hit_Node;
struct __pyx_opt_args_3hit_NewComment;
struct __pyx_opt_args_3hit__initpynode;

/* "hit.pyx":59
 *     return _initpynode(f)
 *
 * cpdef NewComment(text, is_inline=False):             # <<<<<<<<<<<<<<
 *     ctext = <string> text.encode('utf-8')
 *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)
 */
struct __pyx_opt_args_3hit_NewComment
{
  int __pyx_n;
  PyObject * is_inline;
};

/* "hit.pyx":261
 * # constructors are python objects.  So the Node constructor does nothing and this function
 * # actually sets the internal cnode member pointer.
 * cdef _initpynode(chit.Node* n, own=False):             # <<<<<<<<<<<<<<
 *     pyn = Node(own=own)
 *     pyn._cnode = n
 */
struct __pyx_opt_args_3hit__initpynode
{
  int __pyx_n;
  PyObject * own;
};

/* "hit.pyx":68
 *     return _initpynode(f)
 *
 * cdef class Formatter:             # <<<<<<<<<<<<<<
 *     cdef chit.Formatter _formatter
 *
 */
struct __pyx_obj_3hit_Formatter
{
  PyObject_HEAD hit::Formatter _formatter;
};

/* "hit.pyx":93
 *         self._formatter.format(root._cnode)
 *
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef chit.Node* _cnode
 *     cdef cbool _own
 */
struct __pyx_obj_3hit_Node
{
  PyObject_HEAD hit::Node * _cnode;
  bool _own;
  PyObject * fname;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
#define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
typedef struct
{
  void (*INCREF)(void *, PyObject *, int);
  void (*DECREF)(void *, PyObject *, int);
  void (*GOTREF)(void *, PyObject *, int);
  void (*GIVEREF)(void *, PyObject *, int);
  void * (*SetupContext)(const char *, int, const char *);
  void (*FinishContext)(void **);
} __Pyx_RefNannyAPIStruct;
static __Pyx_RefNannyAPIStruct * __Pyx_RefNanny = NULL;
static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char * modname);
#define __Pyx_RefNannyDeclarations void * __pyx_refnanny = NULL;
#ifdef WITH_THREAD
#define __Pyx_RefNannySetupContext(name, acquire_gil)                                              \
  if (acquire_gil)                                                                                 \
  {                                                                                                \
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();                                    \
    __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);                     \
    PyGILState_Release(__pyx_gilstate_save);                                                       \
  }                                                                                                \
  else                                                                                             \
  {                                                                                                \
    __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);                     \
  }
#else
#define __Pyx_RefNannySetupContext(name, acquire_gil)                                              \
  __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
#define __Pyx_RefNannyFinishContext() __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
#define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
#define __Pyx_XINCREF(r)                                                                           \
  do                                                                                               \
  {                                                                                                \
    if ((r) != NULL)                                                                               \
    {                                                                                              \
      __Pyx_INCREF(r);                                                                             \
    }                                                                                              \
  } while (0)
#define __Pyx_XDECREF(r)                                                                           \
  do                                                                                               \
  {                                                                                                \
    if ((r) != NULL)                                                                               \
    {                                                                                              \
      __Pyx_DECREF(r);                                                                             \
    }                                                                                              \
  } while (0)
#define __Pyx_XGOTREF(r)                                                                           \
  do                                                                                               \
  {                                                                                                \
    if ((r) != NULL)                                                                               \
    {                                                                                              \
      __Pyx_GOTREF(r);                                                                             \
    }                                                                                              \
  } while (0)
#define __Pyx_XGIVEREF(r)                                                                          \
  do                                                                                               \
  {                                                                                                \
    if ((r) != NULL)                                                                               \
    {                                                                                              \
      __Pyx_GIVEREF(r);                                                                            \
    }                                                                                              \
  } while (0)
#else
#define __Pyx_RefNannyDeclarations
#define __Pyx_RefNannySetupContext(name, acquire_gil)
#define __Pyx_RefNannyFinishContext()
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XINCREF(r) Py_XINCREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_XGOTREF(r)
#define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v)                                                                    \
  do                                                                                               \
  {                                                                                                \
    PyObject * tmp = (PyObject *)r;                                                                \
    r = v;                                                                                         \
    __Pyx_XDECREF(tmp);                                                                            \
  } while (0)
#define __Pyx_DECREF_SET(r, v)                                                                     \
  do                                                                                               \
  {                                                                                                \
    PyObject * tmp = (PyObject *)r;                                                                \
    r = v;                                                                                         \
    __Pyx_DECREF(tmp);                                                                             \
  } while (0)
#define __Pyx_CLEAR(r)                                                                             \
  do                                                                                               \
  {                                                                                                \
    PyObject * tmp = ((PyObject *)(r));                                                            \
    r = NULL;                                                                                      \
    __Pyx_DECREF(tmp);                                                                             \
  } while (0)
#define __Pyx_XCLEAR(r)                                                                            \
  do                                                                                               \
  {                                                                                                \
    if ((r) != NULL)                                                                               \
    {                                                                                              \
      PyObject * tmp = ((PyObject *)(r));                                                          \
      r = NULL;                                                                                    \
      __Pyx_DECREF(tmp);                                                                           \
    }                                                                                              \
  } while (0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject * __Pyx_PyObject_GetAttrStr(PyObject * obj, PyObject * attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o, n) PyObject_GetAttr(o, n)
#endif

/* GetBuiltinName.proto */
static PyObject * __Pyx_GetBuiltinName(PyObject * name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT ((PY_UINT64_T)-1)
#define __PYX_GET_DICT_VERSION(dict) (((PyDictObject *)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)                               \
  (version_var) = __PYX_GET_DICT_VERSION(dict);                                                    \
  (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)                                        \
  {                                                                                                \
    static PY_UINT64_T __pyx_dict_version = 0;                                                     \
    static PyObject * __pyx_dict_cached_value = NULL;                                              \
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version))                                \
    {                                                                                              \
      (VAR) = __pyx_dict_cached_value;                                                             \
    }                                                                                              \
    else                                                                                           \
    {                                                                                              \
      (VAR) = __pyx_dict_cached_value = (LOOKUP);                                                  \
      __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);                                           \
    }                                                                                              \
  }
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject * obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject * obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject * obj,
                                                           PY_UINT64_T tp_dict_version,
                                                           PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict) (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)                                                       \
  {                                                                                                \
    static PY_UINT64_T __pyx_dict_version = 0;                                                     \
    static PyObject * __pyx_dict_cached_value = NULL;                                              \
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d)))                        \
                ? (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value)         \
                                                   : __Pyx_GetBuiltinName(name))                   \
                : __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value); \
  }
#define __Pyx_GetModuleGlobalNameUncached(var, name)                                               \
  {                                                                                                \
    PY_UINT64_T __pyx_dict_version;                                                                \
    PyObject * __pyx_dict_cached_value;                                                            \
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);       \
  }
static PyObject * __Pyx__GetModuleGlobalName(PyObject * name,
                                             PY_UINT64_T * dict_version,
                                             PyObject ** dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name) (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name) (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject * __Pyx__GetModuleGlobalName(PyObject * name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *
__Pyx_PyCFunction_FastCall(PyObject * func, PyObject ** args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs) (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)                                               \
  __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject * __Pyx_PyFunction_FastCallDict(PyObject * func,
                                                PyObject ** args,
                                                Py_ssize_t nargs,
                                                PyObject * kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs)                                   \
  _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond) (sizeof(char[1 - 2 * !(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
static size_t __pyx_pyframe_localsplus_offset = 0;
#include "frameobject.h"
#define __Pxy_PyFrame_Initialize_Offsets()                                                         \
  ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) ==                                          \
                                 offsetof(PyFrameObject, f_localsplus) +                           \
                                     Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),                 \
   (void)(__pyx_pyframe_localsplus_offset =                                                        \
              ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
#define __Pyx_PyFrame_GetLocalsplus(frame)                                                         \
  (assert(__pyx_pyframe_localsplus_offset),                                                        \
   (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject * __Pyx_PyObject_Call(PyObject * func, PyObject * arg, PyObject * kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject * __Pyx_PyObject_CallMethO(PyObject * func, PyObject * arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject * __Pyx_PyObject_CallOneArg(PyObject * func, PyObject * arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare PyThreadState * __pyx_tstate;
#define __Pyx_PyThreadState_assign __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred() __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred() PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)                                                 \
  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)                                                   \
  __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb) __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb) __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void
__Pyx_ErrRestoreInState(PyThreadState * tstate, PyObject * type, PyObject * value, PyObject * tb);
static CYTHON_INLINE void
__Pyx_ErrFetchInState(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb) PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb) PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb) PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb) PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb) PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb) PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject * type, PyObject * value, PyObject * tb, PyObject * cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char * name,
                                  int clineno,
                                  int lineno,
                                  const char * filename,
                                  int full_traceback,
                                  int nogil);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject *
__Pyx_PyObject_Call2Args(PyObject * function, PyObject * arg1, PyObject * arg2);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char * func_name,
                                       int exact,
                                       Py_ssize_t num_min,
                                       Py_ssize_t num_max,
                                       Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char * func_name, PyObject * kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject * kwds,
                                       PyObject ** argnames[],
                                       PyObject * kwds2,
                                       PyObject * values[],
                                       Py_ssize_t num_pos_args,
                                       const char * function_name);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject * s1, PyObject * s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject * s1, PyObject * s2, int equals);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *
__Pyx_PyObject_LookupSpecial(PyObject * obj, PyObject * attr_name)
{
  PyObject * res;
  PyTypeObject * tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
  if (unlikely(PyInstance_Check(obj)))
    return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
  res = _PyType_Lookup(tp, attr_name);
  if (likely(res))
  {
    descrgetfunc f = Py_TYPE(res)->tp_descr_get;
    if (!f)
    {
      Py_INCREF(res);
    }
    else
    {
      res = f(res, obj, (PyObject *)tp);
    }
  }
  else
  {
    PyErr_SetObject(PyExc_AttributeError, attr_name);
  }
  return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o, n) __Pyx_PyObject_GetAttrStr(o, n)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject * __Pyx_PyObject_CallNoArg(PyObject * func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState * tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb) __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void
__Pyx__ExceptionSave(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb);
#define __Pyx_ExceptionReset(type, value, tb) __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void
__Pyx__ExceptionReset(PyThreadState * tstate, PyObject * type, PyObject * value, PyObject * tb);
#else
#define __Pyx_ExceptionSave(type, value, tb) PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb) PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb) __Pyx__GetException(__pyx_tstate, type, value, tb)
static int
__Pyx__GetException(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb);
#else
static int __Pyx_GetException(PyObject ** type, PyObject ** value, PyObject ** tb);
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char * varname);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)                                    \
  ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None))))                           \
       ? 1                                                                                         \
       : __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject * obj, PyTypeObject * type, const char * name, int exact);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *
__Pyx_PyUnicode_DecodeUTF16(const char * s, Py_ssize_t size, const char * errors)
{
  int byteorder = 0;
  return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *
__Pyx_PyUnicode_DecodeUTF16LE(const char * s, Py_ssize_t size, const char * errors)
{
  int byteorder = -1;
  return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *
__Pyx_PyUnicode_DecodeUTF16BE(const char * s, Py_ssize_t size, const char * errors)
{
  int byteorder = 1;
  return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject * __Pyx_decode_c_bytes(
    const char * cstring,
    Py_ssize_t length,
    Py_ssize_t start,
    Py_ssize_t stop,
    const char * encoding,
    const char * errors,
    PyObject * (*decode_func)(const char * s, Py_ssize_t size, const char * errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject *
__Pyx_decode_cpp_string(std::string cppstring,
                        Py_ssize_t start,
                        Py_ssize_t stop,
                        const char * encoding,
                        const char * errors,
                        PyObject * (*decode_func)(const char * s,
                                                  Py_ssize_t size,
                                                  const char * errors))
{
  return __Pyx_decode_c_bytes(
      cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject * obj, PyTypeObject * type);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int
__Pyx_PyList_Append(PyObject * list, PyObject * x)
{
  PyListObject * L = (PyListObject *)list;
  Py_ssize_t len = Py_SIZE(list);
  if (likely(L->allocated > len) & likely(len > (L->allocated >> 1)))
  {
    Py_INCREF(x);
    PyList_SET_ITEM(list, len, x);
    __Pyx_SET_SIZE(list, len + 1);
    return 0;
  }
  return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L, x) PyList_Append(L, x)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o, n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int
__Pyx_PyObject_SetAttrStr(PyObject * obj, PyObject * attr_name, PyObject * value);
#else
#define __Pyx_PyObject_DelAttrStr(o, n) PyObject_DelAttr(o, n)
#define __Pyx_PyObject_SetAttrStr(o, n, v) PyObject_SetAttr(o, n, v)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject * __Pyx_PyObject_GenericGetAttrNoDict(PyObject * obj,
                                                                    PyObject * attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject * __Pyx_PyObject_GenericGetAttr(PyObject * obj, PyObject * attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState * tstate,
                                                             PyObject * err);
#else
#define __Pyx_PyErr_ExceptionMatches(err) PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject * __Pyx_PyObject_GetAttrStrNoError(PyObject * obj,
                                                                 PyObject * attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject * type_obj);

/* Import.proto */
static PyObject * __Pyx_Import(PyObject * name, PyObject * from_list, int level);

/* CalculateMetaclass.proto */
static PyObject * __Pyx_CalculateMetaclass(PyTypeObject * metaclass, PyObject * bases);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)                                                      \
  (likely(PyDict_CheckExact(ns))                                                                   \
       ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *)name)->hash)                 \
       : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)                                                      \
  (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value)                                 \
                                 : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value) PyObject_SetItem(ns, name, value)
#endif

/* Py3ClassCreate.proto */
static PyObject * __Pyx_Py3MetaclassPrepare(PyObject * metaclass,
                                            PyObject * bases,
                                            PyObject * name,
                                            PyObject * qualname,
                                            PyObject * mkw,
                                            PyObject * modname,
                                            PyObject * doc);
static PyObject * __Pyx_Py3ClassCreate(PyObject * metaclass,
                                       PyObject * name,
                                       PyObject * bases,
                                       PyObject * dict,
                                       PyObject * mkw,
                                       int calculate_metaclass,
                                       int allow_py2_metaclass);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject * __Pyx_Method_ClassMethod(PyObject * method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name) (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject * __Pyx__GetNameInClass(PyObject * nmspace, PyObject * name);

/* FetchCommonType.proto */
static PyTypeObject * __Pyx_FetchCommonType(PyTypeObject * type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD 0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD 0x02
#define __Pyx_CYFUNCTION_CCLASS 0x04
#define __Pyx_CyFunction_GetClosure(f) (((__pyx_CyFunctionObject *)(f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) (((__pyx_CyFunctionObject *)(f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) ((type *)(((__pyx_CyFunctionObject *)(f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)                                                   \
  ((__pyx_CyFunctionObject *)(f))->defaults_getter = (g)
typedef struct
{
  PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
  PyObject * func_weakreflist;
#endif
  PyObject * func_dict;
  PyObject * func_name;
  PyObject * func_qualname;
  PyObject * func_doc;
  PyObject * func_globals;
  PyObject * func_code;
  PyObject * func_closure;
  PyObject * func_classobj;
  void * defaults;
  int defaults_pyobjects;
  size_t defaults_size; // used by FusedFunction for copying defaults
  int flags;
  PyObject * defaults_tuple;
  PyObject * defaults_kwdict;
  PyObject * (*defaults_getter)(PyObject *);
  PyObject * func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject * __pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj) (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject * __Pyx_CyFunction_Init(__pyx_CyFunctionObject * op,
                                        PyMethodDef * ml,
                                        int flags,
                                        PyObject * qualname,
                                        PyObject * self,
                                        PyObject * module,
                                        PyObject * globals,
                                        PyObject * code);
static CYTHON_INLINE void * __Pyx_CyFunction_InitDefaults(PyObject * m, size_t size, int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject * m, PyObject * tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject * m, PyObject * dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject * m, PyObject * dict);
static int __pyx_CyFunction_init(void);

/* CythonFunction.proto */
static PyObject * __Pyx_CyFunction_New(PyMethodDef * ml,
                                       int flags,
                                       PyObject * qualname,
                                       PyObject * closure,
                                       PyObject * module,
                                       PyObject * globals,
                                       PyObject * code);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line) (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState * tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct
{
  PyCodeObject * code_object;
  int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache
{
  int count;
  int max_count;
  __Pyx_CodeObjectCacheEntry * entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0, 0, NULL};
static int
__pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry * entries, int count, int code_line);
static PyCodeObject * __pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject * code_object);

/* AddTraceback.proto */
static void
__Pyx_AddTraceback(const char * funcname, int c_line, int py_line, const char * filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void
__Pyx_CppExn2PyErr()
{
  try
  {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  }
  catch (const std::bad_alloc & exn)
  {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  }
  catch (const std::bad_cast & exn)
  {
    PyErr_SetString(PyExc_TypeError, exn.what());
  }
  catch (const std::bad_typeid & exn)
  {
    PyErr_SetString(PyExc_TypeError, exn.what());
  }
  catch (const std::domain_error & exn)
  {
    PyErr_SetString(PyExc_ValueError, exn.what());
  }
  catch (const std::invalid_argument & exn)
  {
    PyErr_SetString(PyExc_ValueError, exn.what());
  }
  catch (const std::ios_base::failure & exn)
  {
    PyErr_SetString(PyExc_IOError, exn.what());
  }
  catch (const std::out_of_range & exn)
  {
    PyErr_SetString(PyExc_IndexError, exn.what());
  }
  catch (const std::overflow_error & exn)
  {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  }
  catch (const std::range_error & exn)
  {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  }
  catch (const std::underflow_error & exn)
  {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  }
  catch (const std::exception & exn)
  {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject * __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject * __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject * a, PyTypeObject * b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject * err, PyObject * type);
static CYTHON_INLINE int
__Pyx_PyErr_GivenExceptionMatches2(PyObject * err, PyObject * type1, PyObject * type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2)                                      \
  (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry * t);

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'chit' */

/* Module declarations from 'hit' */
static PyTypeObject * __pyx_ptype_3hit_Formatter = 0;
static PyTypeObject * __pyx_ptype_3hit_Node = 0;
static hit::NodeType __pyx_f_3hit__nodetype_enum(PyObject *); /*proto*/
static hit::Field::Kind __pyx_f_3hit__kind_enum(PyObject *);  /*proto*/
static PyObject *
__pyx_f_3hit_NewField(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject * __pyx_f_3hit_NewSection(PyObject *, int __pyx_skip_dispatch);     /*proto*/
static PyObject *
__pyx_f_3hit_NewComment(PyObject *,
                        int __pyx_skip_dispatch,
                        struct __pyx_opt_args_3hit_NewComment * __pyx_optional_args); /*proto*/
static PyObject * __pyx_f_3hit_NewBlank(int __pyx_skip_dispatch);                     /*proto*/
static PyObject *
__pyx_f_3hit__initpynode(hit::Node *,
                         struct __pyx_opt_args_3hit__initpynode * __pyx_optional_args); /*proto*/
static PyObject * __pyx_f_3hit_explode(struct __pyx_obj_3hit_Node *,
                                       int __pyx_skip_dispatch); /*proto*/
static PyObject * __pyx_f_3hit_merge(struct __pyx_obj_3hit_Node *,
                                     struct __pyx_obj_3hit_Node *,
                                     int __pyx_skip_dispatch);              /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *
__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *
__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *
__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *
__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *
__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "hit"
extern int __pyx_module_is_main_hit;
int __pyx_module_is_main_hit = 0;

/* Implementation of 'hit' */
static PyObject * __pyx_builtin_object;
static PyObject * __pyx_builtin_property;
static PyObject * __pyx_builtin_RuntimeError;
static PyObject * __pyx_builtin_open;
static PyObject * __pyx_builtin_TypeError;
static PyObject * __pyx_builtin_all;
static PyObject * __pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_r[] = "r";
static const char __pyx_k__5[] = "  ";
static const char __pyx_k__8[] = "{}:{}:{}:{}";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_All[] = "All";
static const char __pyx_k_EOF[] = "EOF";
static const char __pyx_k_Int[] = "Int";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dst[] = "dst";
static const char __pyx_k_hit[] = "hit";
static const char __pyx_k_own[] = "own";
static const char __pyx_k_src[] = "src";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_Bool[] = "Bool";
static const char __pyx_k_Enum[] = "Enum";
static const char __pyx_k_Node[] = "Node";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_PATH[] = "PATH";
static const char __pyx_k_enum[] = "enum";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_kind[] = "kind";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_walk[] = "walk";
static const char __pyx_k_Blank[] = "Blank";
static const char __pyx_k_ERROR[] = "ERROR";
static const char __pyx_k_Field[] = "Field";
static const char __pyx_k_Float[] = "Float";
static const char __pyx_k_IDENT[] = "IDENT";
static const char __pyx_k_Token[] = "Token";
static const char __pyx_k_child[] = "child";
static const char __pyx_k_clone[] = "clone";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_parse[] = "parse";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ttype[] = "ttype";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_EQUALS[] = "EQUALS";
static const char __pyx_k_NUMBER[] = "NUMBER";
static const char __pyx_k_STRING[] = "STRING";
static const char __pyx_k_String[] = "String";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_indent[] = "indent";
static const char __pyx_k_maxlen[] = "maxlen";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_render[] = "render";
static const char __pyx_k_tokens[] = "tokens";
static const char __pyx_k_walker[] = "walker";
static const char __pyx_k_COMMENT[] = "COMMENT";
static const char __pyx_k_Comment[] = "Comment";
static const char __pyx_k_Section[] = "Section";
static const char __pyx_k_Unknown[] = "Unknown";
static const char __pyx_k_content[] = "content";
static const char __pyx_k_ctokens[] = "ctokens";
static const char __pyx_k_hit_pyx[] = "hit.pyx";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_NewBlank[] = "NewBlank";
static const char __pyx_k_NodeType[] = "NodeType";
static const char __pyx_k_NotField[] = "NotField";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_fullpath[] = "fullpath";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_property[] = "property";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_tokenize[] = "tokenize";
static const char __pyx_k_BLANKLINE[] = "BLANKLINE";
static const char __pyx_k_FieldKind[] = "FieldKind";
static const char __pyx_k_Formatter[] = "Formatter";
static const char __pyx_k_TokenType[] = "TokenType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_is_inline[] = "is_inline";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_node_type[] = "node_type";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_NewComment[] = "NewComment";
static const char __pyx_k_NewSection[] = "NewSection";
static const char __pyx_k_Token___eq[] = "Token.__eq__";
static const char __pyx_k_Token_line[] = "Token.line";
static const char __pyx_k_Token_name[] = "Token.name";
static const char __pyx_k_Token_type[] = "Token.type";
static const char __pyx_k_style_file[] = "style_file";
static const char __pyx_k_LEFTBRACKET[] = "LEFTBRACKET";
static const char __pyx_k_Token___str[] = "Token.__str__";
static const char __pyx_k_Token__line[] = "_Token__line";
static const char __pyx_k_Token__name[] = "_Token__name";
static const char __pyx_k_Token_value[] = "Token.value";
static const char __pyx_k_indent_text[] = "indent_text";
static const char __pyx_k_RIGHTBRACKET[] = "RIGHTBRACKET";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_Token___init[] = "Token.__init__";
static const char __pyx_k_Token__value[] = "_Token__value";
static const char __pyx_k_Token_offset[] = "Token.offset";
static const char __pyx_k_INLINECOMMENT[] = "INLINECOMMENT";
static const char __pyx_k_Token__offset[] = "_Token__offset";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_unknown_NodeType[] = "unknown NodeType ";
static const char __pyx_k_Token__token_type[] = "_Token__token_type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_unknown_Field_Kind[] = "unknown Field::Kind ";
static const char __pyx_k_canonical_section_markers[] = "canonical_section_markers";
static const char __pyx_k_A_python_Enum_object_for_defini[] =
    "\n    A python Enum object for defining the various token types.\n    ";
static const char __pyx_k_A_python_version_of_the_Token_s[] =
    "\n    A python version of the Token struct in lex.h\n\n    Inputs:\n        ttype[TokenType]: "
    "The type of token being create\n        value: The token content\n        offset: byte offset "
    "where the token was found (see lex.h)\n        line: line number\n    ";
static const char __pyx_k_Comparison_is_only_valid_with_To[] =
    "Comparison is only valid with Token and TokenType, {} provided";
static const char __pyx_k_no_default___reduce___due_to_non[] =
    "no default __reduce__ due to non-trivial __cinit__";
static PyObject * __pyx_kp_u_;
static PyObject * __pyx_kp_s_A_python_Enum_object_for_defini;
static PyObject * __pyx_kp_s_A_python_version_of_the_Token_s;
static PyObject * __pyx_n_s_All;
static PyObject * __pyx_n_u_All;
static PyObject * __pyx_n_s_BLANKLINE;
static PyObject * __pyx_n_s_Blank;
static PyObject * __pyx_n_u_Blank;
static PyObject * __pyx_n_s_Bool;
static PyObject * __pyx_n_u_Bool;
static PyObject * __pyx_n_s_COMMENT;
static PyObject * __pyx_n_s_Comment;
static PyObject * __pyx_n_u_Comment;
static PyObject * __pyx_kp_u_Comparison_is_only_valid_with_To;
static PyObject * __pyx_n_s_EOF;
static PyObject * __pyx_n_s_EQUALS;
static PyObject * __pyx_n_s_ERROR;
static PyObject * __pyx_n_s_Enum;
static PyObject * __pyx_n_s_Field;
static PyObject * __pyx_n_u_Field;
static PyObject * __pyx_n_s_FieldKind;
static PyObject * __pyx_n_s_Float;
static PyObject * __pyx_n_u_Float;
static PyObject * __pyx_n_s_Formatter;
static PyObject * __pyx_n_s_IDENT;
static PyObject * __pyx_n_s_INLINECOMMENT;
static PyObject * __pyx_n_s_Int;
static PyObject * __pyx_n_u_Int;
static PyObject * __pyx_n_s_LEFTBRACKET;
static PyObject * __pyx_n_s_NUMBER;
static PyObject * __pyx_n_s_NewBlank;
static PyObject * __pyx_n_s_NewComment;
static PyObject * __pyx_n_s_NewSection;
static PyObject * __pyx_n_s_Node;
static PyObject * __pyx_n_s_NodeType;
static PyObject * __pyx_n_u_None;
static PyObject * __pyx_n_s_NotField;
static PyObject * __pyx_n_s_PATH;
static PyObject * __pyx_n_s_RIGHTBRACKET;
static PyObject * __pyx_n_s_RuntimeError;
static PyObject * __pyx_n_s_STRING;
static PyObject * __pyx_n_s_Section;
static PyObject * __pyx_n_u_Section;
static PyObject * __pyx_n_s_String;
static PyObject * __pyx_n_u_String;
static PyObject * __pyx_n_s_Token;
static PyObject * __pyx_n_s_TokenType;
static PyObject * __pyx_n_s_Token___eq;
static PyObject * __pyx_n_s_Token___init;
static PyObject * __pyx_n_s_Token___str;
static PyObject * __pyx_n_s_Token__line;
static PyObject * __pyx_n_s_Token__name;
static PyObject * __pyx_n_s_Token__offset;
static PyObject * __pyx_n_s_Token__token_type;
static PyObject * __pyx_n_s_Token__value;
static PyObject * __pyx_n_s_Token_line;
static PyObject * __pyx_n_s_Token_name;
static PyObject * __pyx_n_s_Token_offset;
static PyObject * __pyx_n_s_Token_type;
static PyObject * __pyx_n_s_Token_value;
static PyObject * __pyx_n_s_TypeError;
static PyObject * __pyx_n_u_Unknown;
static PyObject * __pyx_kp_u__5;
static PyObject * __pyx_kp_u__8;
static PyObject * __pyx_n_s_all;
static PyObject * __pyx_n_s_canonical_section_markers;
static PyObject * __pyx_n_s_child;
static PyObject * __pyx_n_s_children;
static PyObject * __pyx_n_s_cline_in_traceback;
static PyObject * __pyx_n_s_clone;
static PyObject * __pyx_n_s_content;
static PyObject * __pyx_n_s_ctokens;
static PyObject * __pyx_n_s_doc;
static PyObject * __pyx_n_s_dst;
static PyObject * __pyx_n_s_encode;
static PyObject * __pyx_n_s_enter;
static PyObject * __pyx_n_s_enum;
static PyObject * __pyx_n_s_eq;
static PyObject * __pyx_n_s_exit;
static PyObject * __pyx_n_s_fname;
static PyObject * __pyx_n_s_format;
static PyObject * __pyx_n_s_fullpath;
static PyObject * __pyx_n_s_getstate;
static PyObject * __pyx_n_s_hit;
static PyObject * __pyx_kp_s_hit_pyx;
static PyObject * __pyx_n_s_i;
static PyObject * __pyx_n_s_import;
static PyObject * __pyx_n_s_indent;
static PyObject * __pyx_n_s_indent_text;
static PyObject * __pyx_n_s_index;
static PyObject * __pyx_n_s_init;
static PyObject * __pyx_n_s_input;
static PyObject * __pyx_n_s_is_inline;
static PyObject * __pyx_n_s_kind;
static PyObject * __pyx_n_s_line;
static PyObject * __pyx_n_s_main;
static PyObject * __pyx_n_s_maxlen;
static PyObject * __pyx_n_s_metaclass;
static PyObject * __pyx_n_s_module;
static PyObject * __pyx_n_s_name;
static PyObject * __pyx_n_s_name_2;
static PyObject * __pyx_kp_s_no_default___reduce___due_to_non;
static PyObject * __pyx_n_s_node;
static PyObject * __pyx_n_s_node_type;
static PyObject * __pyx_n_s_object;
static PyObject * __pyx_n_s_offset;
static PyObject * __pyx_n_s_open;
static PyObject * __pyx_n_s_order;
static PyObject * __pyx_n_s_other;
static PyObject * __pyx_n_s_own;
static PyObject * __pyx_n_s_parse;
static PyObject * __pyx_n_s_path;
static PyObject * __pyx_n_s_prefix;
static PyObject * __pyx_n_s_prepare;
static PyObject * __pyx_n_s_property;
static PyObject * __pyx_n_s_qualname;
static PyObject * __pyx_n_u_r;
static PyObject * __pyx_n_s_range;
static PyObject * __pyx_n_s_read;
static PyObject * __pyx_n_s_reduce;
static PyObject * __pyx_n_s_reduce_cython;
static PyObject * __pyx_n_s_reduce_ex;
static PyObject * __pyx_n_s_render;
static PyObject * __pyx_n_s_self;
static PyObject * __pyx_n_s_setstate;
static PyObject * __pyx_n_s_setstate_cython;
static PyObject * __pyx_n_s_src;
static PyObject * __pyx_n_s_str;
static PyObject * __pyx_n_s_style_file;
static PyObject * __pyx_n_s_sys;
static PyObject * __pyx_n_s_test;
static PyObject * __pyx_n_s_text;
static PyObject * __pyx_n_s_tokenize;
static PyObject * __pyx_n_s_tokens;
static PyObject * __pyx_n_s_ttype;
static PyObject * __pyx_n_s_type;
static PyObject * __pyx_kp_u_unknown_Field_Kind;
static PyObject * __pyx_kp_u_unknown_NodeType;
static PyObject * __pyx_kp_u_utf_8;
static PyObject * __pyx_n_s_val;
static PyObject * __pyx_n_s_value;
static PyObject * __pyx_n_s_walk;
static PyObject * __pyx_n_s_walker;
static PyObject * __pyx_pf_3hit_NewField(CYTHON_UNUSED PyObject * __pyx_self,
                                         PyObject * __pyx_v_name,
                                         PyObject * __pyx_v_kind,
                                         PyObject * __pyx_v_val); /* proto */
static PyObject * __pyx_pf_3hit_2NewSection(CYTHON_UNUSED PyObject * __pyx_self,
                                            PyObject * __pyx_v_path); /* proto */
static PyObject * __pyx_pf_3hit_4NewComment(CYTHON_UNUSED PyObject * __pyx_self,
                                            PyObject * __pyx_v_text,
                                            PyObject * __pyx_v_is_inline);      /* proto */
static PyObject * __pyx_pf_3hit_6NewBlank(CYTHON_UNUSED PyObject * __pyx_self); /* proto */
static int __pyx_pf_3hit_9Formatter___cinit__(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                              PyObject * __pyx_v_style_file); /* proto */
static PyObject *
__pyx_pf_3hit_9Formatter_2addPattern(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                     PyObject * __pyx_v_prefix,
                                     PyObject * __pyx_v_order); /* proto */
static PyObject *
__pyx_pf_3hit_9Formatter_4config(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                 PyObject * __pyx_v_canonical_section_markers); /* proto */
static PyObject * __pyx_pf_3hit_9Formatter_6format(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                                   PyObject * __pyx_v_fname,
                                                   PyObject * __pyx_v_content); /* proto */
static PyObject *
__pyx_pf_3hit_9Formatter_8formatTree(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                     struct __pyx_obj_3hit_Node * __pyx_v_root); /* proto */
static PyObject * __pyx_pf_3hit_9Formatter_10__reduce_cython__(
    CYTHON_UNUSED struct __pyx_obj_3hit_Formatter * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_9Formatter_12__setstate_cython__(
    CYTHON_UNUSED struct __pyx_obj_3hit_Formatter * __pyx_v_self,
    CYTHON_UNUSED PyObject * __pyx_v___pyx_state); /* proto */
static PyObject * __pyx_pf_3hit_4Node_NewSection(CYTHON_UNUSED PyTypeObject * __pyx_v_cls,
                                                 CYTHON_UNUSED PyObject * __pyx_v_path); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_2NewComment(CYTHON_UNUSED PyTypeObject * __pyx_v_cls,
                                CYTHON_UNUSED PyObject * __pyx_v_text); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_4NewBlank(CYTHON_UNUSED PyTypeObject * __pyx_v_cls); /* proto */
static int __pyx_pf_3hit_4Node_6__cinit__(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                          PyObject * __pyx_v_own,
                                          PyObject * __pyx_v_fname);                     /* proto */
static void __pyx_pf_3hit_4Node_8__dealloc__(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_10__deepcopy__(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                   CYTHON_UNUSED PyObject * __pyx_v_memodict); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_12__reduce__(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_14__repr__(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_16remove(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_4Node_18render(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                               PyObject * __pyx_v_indent,
                                               PyObject * __pyx_v_indent_text,
                                               PyObject * __pyx_v_maxlen);               /* proto */
static PyObject * __pyx_pf_3hit_4Node_20line(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_22filename(struct __pyx_obj_3hit_Node * __pyx_v_self);               /* proto */
static PyObject * __pyx_pf_3hit_4Node_24path(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_26fullpath(struct __pyx_obj_3hit_Node * __pyx_v_self);               /* proto */
static PyObject * __pyx_pf_3hit_4Node_28type(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_4Node_30kind(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_4Node_32raw(struct __pyx_obj_3hit_Node * __pyx_v_self);  /* proto */
static PyObject * __pyx_pf_3hit_4Node_34find(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                             PyObject * __pyx_v_path); /* proto */
static PyObject * __pyx_pf_3hit_4Node_36param(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                              PyObject * __pyx_v_path); /* proto */
static PyObject * __pyx_pf_3hit_4Node_38setParam(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                                 PyObject * __pyx_v_path,
                                                 PyObject * __pyx_v_val); /* proto */
static PyObject * __pyx_pf_3hit_4Node_40setText(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                                PyObject * __pyx_v_text); /* proto */
static PyObject * __pyx_pf_3hit_4Node_42walk(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                             PyObject * __pyx_v_walker,
                                             PyObject * __pyx_v_node_type); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_44clone(struct __pyx_obj_3hit_Node * __pyx_v_self);                  /* proto */
static PyObject * __pyx_pf_3hit_4Node_46root(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_48parent(struct __pyx_obj_3hit_Node * __pyx_v_self); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_50addChild(struct __pyx_obj_3hit_Node * __pyx_v_self,
                               struct __pyx_obj_3hit_Node * __pyx_v_child); /* proto */
static PyObject *
__pyx_pf_3hit_4Node_52insertChild(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                  PyObject * __pyx_v_index,
                                  struct __pyx_obj_3hit_Node * __pyx_v_child); /* proto */
static PyObject * __pyx_pf_3hit_4Node_54children(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                                 PyObject * __pyx_v_node_type); /* proto */
static PyObject * __pyx_pf_3hit_8parse(CYTHON_UNUSED PyObject * __pyx_self,
                                       PyObject * __pyx_v_fname,
                                       PyObject * __pyx_v_input); /* proto */
static PyObject * __pyx_pf_3hit_10explode(CYTHON_UNUSED PyObject * __pyx_self,
                                          struct __pyx_obj_3hit_Node * __pyx_v_n); /* proto */
static PyObject * __pyx_pf_3hit_12merge(CYTHON_UNUSED PyObject * __pyx_self,
                                        struct __pyx_obj_3hit_Node * __pyx_v_src,
                                        struct __pyx_obj_3hit_Node * __pyx_v_dst); /* proto */
static PyObject * __pyx_pf_3hit_5Token___init__(CYTHON_UNUSED PyObject * __pyx_self,
                                                PyObject * __pyx_v_self,
                                                PyObject * __pyx_v_ttype,
                                                PyObject * __pyx_v_value,
                                                PyObject * __pyx_v_name,
                                                PyObject * __pyx_v_offset,
                                                PyObject * __pyx_v_line); /* proto */
static PyObject * __pyx_pf_3hit_5Token_2type(CYTHON_UNUSED PyObject * __pyx_self,
                                             PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_4value(CYTHON_UNUSED PyObject * __pyx_self,
                                              PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_6offset(CYTHON_UNUSED PyObject * __pyx_self,
                                               PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_8name(CYTHON_UNUSED PyObject * __pyx_self,
                                             PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_10line(CYTHON_UNUSED PyObject * __pyx_self,
                                              PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_12__str__(CYTHON_UNUSED PyObject * __pyx_self,
                                                 PyObject * __pyx_v_self); /* proto */
static PyObject * __pyx_pf_3hit_5Token_14__eq__(CYTHON_UNUSED PyObject * __pyx_self,
                                                PyObject * __pyx_v_self,
                                                PyObject * __pyx_v_other); /* proto */
static PyObject * __pyx_pf_3hit_14tokenize(CYTHON_UNUSED PyObject * __pyx_self,
                                           PyObject * __pyx_v_fname,
                                           PyObject * __pyx_v_text); /* proto */
static PyObject *
__pyx_tp_new_3hit_Formatter(PyTypeObject * t, PyObject * a, PyObject * k);              /*proto*/
static PyObject * __pyx_tp_new_3hit_Node(PyTypeObject * t, PyObject * a, PyObject * k); /*proto*/
static PyObject * __pyx_int_0;
static PyObject * __pyx_int_1;
static PyObject * __pyx_int_10;
static PyObject * __pyx_int_11;
static PyObject * __pyx_int_12;
static PyObject * __pyx_int_20;
static PyObject * __pyx_int_21;
static PyObject * __pyx_int_22;
static PyObject * __pyx_int_23;
static PyObject * __pyx_int_30;
static PyObject * __pyx_int_31;
static PyObject * __pyx_int_100;
static PyObject * __pyx_int_200;
static PyObject * __pyx_k__6;
static PyObject * __pyx_k__7;
static PyObject * __pyx_tuple__2;
static PyObject * __pyx_tuple__3;
static PyObject * __pyx_tuple__4;
static PyObject * __pyx_tuple__9;
static PyObject * __pyx_tuple__10;
static PyObject * __pyx_tuple__11;
static PyObject * __pyx_tuple__13;
static PyObject * __pyx_tuple__14;
static PyObject * __pyx_tuple__16;
static PyObject * __pyx_tuple__18;
static PyObject * __pyx_tuple__20;
static PyObject * __pyx_tuple__22;
static PyObject * __pyx_tuple__24;
static PyObject * __pyx_tuple__26;
static PyObject * __pyx_tuple__28;
static PyObject * __pyx_tuple__30;
static PyObject * __pyx_codeobj__12;
static PyObject * __pyx_codeobj__15;
static PyObject * __pyx_codeobj__17;
static PyObject * __pyx_codeobj__19;
static PyObject * __pyx_codeobj__21;
static PyObject * __pyx_codeobj__23;
static PyObject * __pyx_codeobj__25;
static PyObject * __pyx_codeobj__27;
static PyObject * __pyx_codeobj__29;
static PyObject * __pyx_codeobj__31;
/* Late includes */

/* "hit.pyx":17
 *     Blank = 'Blank'
 *
 * cdef chit.NodeType _nodetype_enum(node_type):             # <<<<<<<<<<<<<<
 *     if node_type == NodeType.All:
 *         return chit.NTAll
 */

static hit::NodeType
__pyx_f_3hit__nodetype_enum(PyObject * __pyx_v_node_type)
{
  hit::NodeType __pyx_r;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_nodetype_enum", 0);

  /* "hit.pyx":18
   *
   * cdef chit.NodeType _nodetype_enum(node_type):
   *     if node_type == NodeType.All:             # <<<<<<<<<<<<<<
   *         return chit.NTAll
   *     elif node_type == NodeType.Section:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_All);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":19
     * cdef chit.NodeType _nodetype_enum(node_type):
     *     if node_type == NodeType.All:
     *         return chit.NTAll             # <<<<<<<<<<<<<<
     *     elif node_type == NodeType.Section:
     *         return chit.NTSection
     */
    __pyx_r = hit::NodeType::All;
    goto __pyx_L0;

    /* "hit.pyx":18
     *
     * cdef chit.NodeType _nodetype_enum(node_type):
     *     if node_type == NodeType.All:             # <<<<<<<<<<<<<<
     *         return chit.NTAll
     *     elif node_type == NodeType.Section:
     */
  }

  /* "hit.pyx":20
   *     if node_type == NodeType.All:
   *         return chit.NTAll
   *     elif node_type == NodeType.Section:             # <<<<<<<<<<<<<<
   *         return chit.NTSection
   *     elif node_type == NodeType.Comment:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Section);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":21
     *         return chit.NTAll
     *     elif node_type == NodeType.Section:
     *         return chit.NTSection             # <<<<<<<<<<<<<<
     *     elif node_type == NodeType.Comment:
     *         return chit.NTComment
     */
    __pyx_r = hit::NodeType::Section;
    goto __pyx_L0;

    /* "hit.pyx":20
     *     if node_type == NodeType.All:
     *         return chit.NTAll
     *     elif node_type == NodeType.Section:             # <<<<<<<<<<<<<<
     *         return chit.NTSection
     *     elif node_type == NodeType.Comment:
     */
  }

  /* "hit.pyx":22
   *     elif node_type == NodeType.Section:
   *         return chit.NTSection
   *     elif node_type == NodeType.Comment:             # <<<<<<<<<<<<<<
   *         return chit.NTComment
   *     elif node_type == NodeType.Field:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Comment);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":23
     *         return chit.NTSection
     *     elif node_type == NodeType.Comment:
     *         return chit.NTComment             # <<<<<<<<<<<<<<
     *     elif node_type == NodeType.Field:
     *         return chit.NTField
     */
    __pyx_r = hit::NodeType::Comment;
    goto __pyx_L0;

    /* "hit.pyx":22
     *     elif node_type == NodeType.Section:
     *         return chit.NTSection
     *     elif node_type == NodeType.Comment:             # <<<<<<<<<<<<<<
     *         return chit.NTComment
     *     elif node_type == NodeType.Field:
     */
  }

  /* "hit.pyx":24
   *     elif node_type == NodeType.Comment:
   *         return chit.NTComment
   *     elif node_type == NodeType.Field:             # <<<<<<<<<<<<<<
   *         return chit.NTField
   *     elif node_type == NodeType.Blank:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Field);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":25
     *         return chit.NTComment
     *     elif node_type == NodeType.Field:
     *         return chit.NTField             # <<<<<<<<<<<<<<
     *     elif node_type == NodeType.Blank:
     *         return chit.NTBlank
     */
    __pyx_r = hit::NodeType::Field;
    goto __pyx_L0;

    /* "hit.pyx":24
     *     elif node_type == NodeType.Comment:
     *         return chit.NTComment
     *     elif node_type == NodeType.Field:             # <<<<<<<<<<<<<<
     *         return chit.NTField
     *     elif node_type == NodeType.Blank:
     */
  }

  /* "hit.pyx":26
   *     elif node_type == NodeType.Field:
   *         return chit.NTField
   *     elif node_type == NodeType.Blank:             # <<<<<<<<<<<<<<
   *         return chit.NTBlank
   *     raise RuntimeError('unknown NodeType ' + node_type)
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Blank);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":27
     *         return chit.NTField
     *     elif node_type == NodeType.Blank:
     *         return chit.NTBlank             # <<<<<<<<<<<<<<
     *     raise RuntimeError('unknown NodeType ' + node_type)
     *
     */
    __pyx_r = hit::NodeType::Blank;
    goto __pyx_L0;

    /* "hit.pyx":26
     *     elif node_type == NodeType.Field:
     *         return chit.NTField
     *     elif node_type == NodeType.Blank:             # <<<<<<<<<<<<<<
     *         return chit.NTBlank
     *     raise RuntimeError('unknown NodeType ' + node_type)
     */
  }

  /* "hit.pyx":28
   *     elif node_type == NodeType.Blank:
   *         return chit.NTBlank
   *     raise RuntimeError('unknown NodeType ' + node_type)             # <<<<<<<<<<<<<<
   *
   * class FieldKind(object):
   */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_unknown_NodeType, __pyx_v_node_type);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __PYX_ERR(0, 28, __pyx_L1_error)

/* "hit.pyx":17
 *     Blank = 'Blank'
 *
 * cdef chit.NodeType _nodetype_enum(node_type):             # <<<<<<<<<<<<<<
 *     if node_type == NodeType.All:
 *         return chit.NTAll
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("hit._nodetype_enum", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":37
 *     NotField = 'None'
 *
 * cdef chit.Kind _kind_enum(kind):             # <<<<<<<<<<<<<<
 *     if kind == FieldKind.Int:
 *         return chit.Int
 */

static hit::Field::Kind
__pyx_f_3hit__kind_enum(PyObject * __pyx_v_kind)
{
  hit::Field::Kind __pyx_r;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_kind_enum", 0);

  /* "hit.pyx":38
   *
   * cdef chit.Kind _kind_enum(kind):
   *     if kind == FieldKind.Int:             # <<<<<<<<<<<<<<
   *         return chit.Int
   *     elif kind == FieldKind.Float:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Int);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_kind, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":39
     * cdef chit.Kind _kind_enum(kind):
     *     if kind == FieldKind.Int:
     *         return chit.Int             # <<<<<<<<<<<<<<
     *     elif kind == FieldKind.Float:
     *         return chit.Float
     */
    __pyx_r = hit::Field::Kind::Int;
    goto __pyx_L0;

    /* "hit.pyx":38
     *
     * cdef chit.Kind _kind_enum(kind):
     *     if kind == FieldKind.Int:             # <<<<<<<<<<<<<<
     *         return chit.Int
     *     elif kind == FieldKind.Float:
     */
  }

  /* "hit.pyx":40
   *     if kind == FieldKind.Int:
   *         return chit.Int
   *     elif kind == FieldKind.Float:             # <<<<<<<<<<<<<<
   *         return chit.Float
   *     elif kind == FieldKind.Bool:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Float);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_kind, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":41
     *         return chit.Int
     *     elif kind == FieldKind.Float:
     *         return chit.Float             # <<<<<<<<<<<<<<
     *     elif kind == FieldKind.Bool:
     *         return chit.Bool
     */
    __pyx_r = hit::Field::Kind::Float;
    goto __pyx_L0;

    /* "hit.pyx":40
     *     if kind == FieldKind.Int:
     *         return chit.Int
     *     elif kind == FieldKind.Float:             # <<<<<<<<<<<<<<
     *         return chit.Float
     *     elif kind == FieldKind.Bool:
     */
  }

  /* "hit.pyx":42
   *     elif kind == FieldKind.Float:
   *         return chit.Float
   *     elif kind == FieldKind.Bool:             # <<<<<<<<<<<<<<
   *         return chit.Bool
   *     elif kind == FieldKind.String:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Bool);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_kind, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":43
     *         return chit.Float
     *     elif kind == FieldKind.Bool:
     *         return chit.Bool             # <<<<<<<<<<<<<<
     *     elif kind == FieldKind.String:
     *         return chit.String
     */
    __pyx_r = hit::Field::Kind::Bool;
    goto __pyx_L0;

    /* "hit.pyx":42
     *     elif kind == FieldKind.Float:
     *         return chit.Float
     *     elif kind == FieldKind.Bool:             # <<<<<<<<<<<<<<
     *         return chit.Bool
     *     elif kind == FieldKind.String:
     */
  }

  /* "hit.pyx":44
   *     elif kind == FieldKind.Bool:
   *         return chit.Bool
   *     elif kind == FieldKind.String:             # <<<<<<<<<<<<<<
   *         return chit.String
   *     raise RuntimeError('unknown Field::Kind ' + kind)
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_String);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_kind, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1);
  if (unlikely(__pyx_t_3 < 0))
    __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (__pyx_t_3)
  {

    /* "hit.pyx":45
     *         return chit.Bool
     *     elif kind == FieldKind.String:
     *         return chit.String             # <<<<<<<<<<<<<<
     *     raise RuntimeError('unknown Field::Kind ' + kind)
     *
     */
    __pyx_r = hit::Field::Kind::String;
    goto __pyx_L0;

    /* "hit.pyx":44
     *     elif kind == FieldKind.Bool:
     *         return chit.Bool
     *     elif kind == FieldKind.String:             # <<<<<<<<<<<<<<
     *         return chit.String
     *     raise RuntimeError('unknown Field::Kind ' + kind)
     */
  }

  /* "hit.pyx":46
   *     elif kind == FieldKind.String:
   *         return chit.String
   *     raise RuntimeError('unknown Field::Kind ' + kind)             # <<<<<<<<<<<<<<
   *
   * cpdef NewField(name, kind, val):
   */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_u_unknown_Field_Kind, __pyx_v_kind);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __PYX_ERR(0, 46, __pyx_L1_error)

/* "hit.pyx":37
 *     NotField = 'None'
 *
 * cdef chit.Kind _kind_enum(kind):             # <<<<<<<<<<<<<<
 *     if kind == FieldKind.Int:
 *         return chit.Int
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("hit._kind_enum", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":48
 *     raise RuntimeError('unknown Field::Kind ' + kind)
 *
 * cpdef NewField(name, kind, val):             # <<<<<<<<<<<<<<
 *     cppname = <string> name.encode('utf-8')
 *     cppval = <string> val.encode('utf-8')
 */

static PyObject * __pyx_pw_3hit_1NewField(PyObject * __pyx_self,
                                          PyObject * __pyx_args,
                                          PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_f_3hit_NewField(PyObject * __pyx_v_name,
                      PyObject * __pyx_v_kind,
                      PyObject * __pyx_v_val,
                      CYTHON_UNUSED int __pyx_skip_dispatch)
{
  std::string __pyx_v_cppname;
  std::string __pyx_v_cppval;
  hit::Node * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewField", 0);

  /* "hit.pyx":49
   *
   * cpdef NewField(name, kind, val):
   *     cppname = <string> name.encode('utf-8')             # <<<<<<<<<<<<<<
   *     cppval = <string> val.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Field(cppname, _kind_enum(kind), cppval)
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_name, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cppname = ((std::string)__pyx_t_4);

  /* "hit.pyx":50
   * cpdef NewField(name, kind, val):
   *     cppname = <string> name.encode('utf-8')
   *     cppval = <string> val.encode('utf-8')             # <<<<<<<<<<<<<<
   *     cdef chit.Node* f = <chit.Node*> new chit.Field(cppname, _kind_enum(kind), cppval)
   *     return _initpynode(f)
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_val, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cppval = ((std::string)__pyx_t_4);

  /* "hit.pyx":51
   *     cppname = <string> name.encode('utf-8')
   *     cppval = <string> val.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Field(cppname, _kind_enum(kind), cppval) #
   * <<<<<<<<<<<<<< return _initpynode(f)
   *
   */
  __pyx_v_f = ((hit::Node *)new hit::Field(
      __pyx_v_cppname, __pyx_f_3hit__kind_enum(__pyx_v_kind), __pyx_v_cppval));

  /* "hit.pyx":52
   *     cppval = <string> val.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Field(cppname, _kind_enum(kind), cppval)
   *     return _initpynode(f)             # <<<<<<<<<<<<<<
   *
   * cpdef NewSection(path):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_f, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":48
 *     raise RuntimeError('unknown Field::Kind ' + kind)
 *
 * cpdef NewField(name, kind, val):             # <<<<<<<<<<<<<<
 *     cppname = <string> name.encode('utf-8')
 *     cppval = <string> val.encode('utf-8')
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.NewField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_1NewField(PyObject * __pyx_self,
                                          PyObject * __pyx_args,
                                          PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_1NewField(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_name = 0;
  PyObject * __pyx_v_kind = 0;
  PyObject * __pyx_v_val = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewField (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_name, &__pyx_n_s_kind, &__pyx_n_s_val, 0};
    PyObject * values[3] = {0, 0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 3:
          values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
          CYTHON_FALLTHROUGH;
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kind)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("NewField", 1, 3, 3, 1);
            __PYX_ERR(0, 48, __pyx_L3_error)
          }
          CYTHON_FALLTHROUGH;
        case 2:
          if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("NewField", 1, 3, 3, 2);
            __PYX_ERR(0, 48, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "NewField") < 0))
          __PYX_ERR(0, 48, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 3)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = values[0];
    __pyx_v_kind = values[1];
    __pyx_v_val = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("NewField", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 48, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.NewField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_NewField(__pyx_self, __pyx_v_name, __pyx_v_kind, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_NewField(CYTHON_UNUSED PyObject * __pyx_self,
                       PyObject * __pyx_v_name,
                       PyObject * __pyx_v_kind,
                       PyObject * __pyx_v_val)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewField", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit_NewField(__pyx_v_name, __pyx_v_kind, __pyx_v_val, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.NewField", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":54
 *     return _initpynode(f)
 *
 * cpdef NewSection(path):             # <<<<<<<<<<<<<<
 *     cpath = <string> path.encode('utf-8')
 *     cdef chit.Node* f = <chit.Node*> new chit.Section(cpath)
 */

static PyObject * __pyx_pw_3hit_3NewSection(PyObject * __pyx_self,
                                            PyObject * __pyx_v_path); /*proto*/
static PyObject *
__pyx_f_3hit_NewSection(PyObject * __pyx_v_path, CYTHON_UNUSED int __pyx_skip_dispatch)
{
  std::string __pyx_v_cpath;
  hit::Node * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewSection", 0);

  /* "hit.pyx":55
   *
   * cpdef NewSection(path):
   *     cpath = <string> path.encode('utf-8')             # <<<<<<<<<<<<<<
   *     cdef chit.Node* f = <chit.Node*> new chit.Section(cpath)
   *     return _initpynode(f)
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cpath = ((std::string)__pyx_t_4);

  /* "hit.pyx":56
   * cpdef NewSection(path):
   *     cpath = <string> path.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Section(cpath)             # <<<<<<<<<<<<<<
   *     return _initpynode(f)
   *
   */
  __pyx_v_f = ((hit::Node *)new hit::Section(__pyx_v_cpath));

  /* "hit.pyx":57
   *     cpath = <string> path.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Section(cpath)
   *     return _initpynode(f)             # <<<<<<<<<<<<<<
   *
   * cpdef NewComment(text, is_inline=False):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_f, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":54
 *     return _initpynode(f)
 *
 * cpdef NewSection(path):             # <<<<<<<<<<<<<<
 *     cpath = <string> path.encode('utf-8')
 *     cdef chit.Node* f = <chit.Node*> new chit.Section(cpath)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.NewSection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_3NewSection(PyObject * __pyx_self,
                                            PyObject * __pyx_v_path); /*proto*/
static PyObject *
__pyx_pw_3hit_3NewSection(PyObject * __pyx_self, PyObject * __pyx_v_path)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewSection (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_2NewSection(__pyx_self, ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_2NewSection(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_path)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewSection", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit_NewSection(__pyx_v_path, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.NewSection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":59
 *     return _initpynode(f)
 *
 * cpdef NewComment(text, is_inline=False):             # <<<<<<<<<<<<<<
 *     ctext = <string> text.encode('utf-8')
 *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)
 */

static PyObject * __pyx_pw_3hit_5NewComment(PyObject * __pyx_self,
                                            PyObject * __pyx_args,
                                            PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_f_3hit_NewComment(PyObject * __pyx_v_text,
                        CYTHON_UNUSED int __pyx_skip_dispatch,
                        struct __pyx_opt_args_3hit_NewComment * __pyx_optional_args)
{
  PyObject * __pyx_v_is_inline = ((PyObject *)Py_False);
  std::string __pyx_v_ctext;
  hit::Node * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewComment", 0);
  if (__pyx_optional_args)
  {
    if (__pyx_optional_args->__pyx_n > 0)
    {
      __pyx_v_is_inline = __pyx_optional_args->is_inline;
    }
  }

  /* "hit.pyx":60
   *
   * cpdef NewComment(text, is_inline=False):
   *     ctext = <string> text.encode('utf-8')             # <<<<<<<<<<<<<<
   *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)
   *     return _initpynode(f)
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_ctext = ((std::string)__pyx_t_4);

  /* "hit.pyx":61
   * cpdef NewComment(text, is_inline=False):
   *     ctext = <string> text.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)             #
   * <<<<<<<<<<<<<< return _initpynode(f)
   *
   */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_is_inline);
  if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred()))
    __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_v_f = ((hit::Node *)new hit::Comment(__pyx_v_ctext, ((bool)__pyx_t_5)));

  /* "hit.pyx":62
   *     ctext = <string> text.encode('utf-8')
   *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)
   *     return _initpynode(f)             # <<<<<<<<<<<<<<
   *
   * cpdef NewBlank():
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_f, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":59
 *     return _initpynode(f)
 *
 * cpdef NewComment(text, is_inline=False):             # <<<<<<<<<<<<<<
 *     ctext = <string> text.encode('utf-8')
 *     cdef chit.Node* f = <chit.Node*> new chit.Comment(ctext, <cbool>is_inline)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.NewComment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5NewComment(PyObject * __pyx_self,
                                            PyObject * __pyx_args,
                                            PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_5NewComment(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_text = 0;
  PyObject * __pyx_v_is_inline = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewComment (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_text, &__pyx_n_s_is_inline, 0};
    PyObject * values[2] = {0, 0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_inline);
            if (value)
            {
              values[1] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "NewComment") < 0))
          __PYX_ERR(0, 59, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = values[0];
    __pyx_v_is_inline = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("NewComment", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 59, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.NewComment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4NewComment(__pyx_self, __pyx_v_text, __pyx_v_is_inline);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4NewComment(CYTHON_UNUSED PyObject * __pyx_self,
                          PyObject * __pyx_v_text,
                          PyObject * __pyx_v_is_inline)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  struct __pyx_opt_args_3hit_NewComment __pyx_t_2;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewComment", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.is_inline = __pyx_v_is_inline;
  __pyx_t_1 = __pyx_f_3hit_NewComment(__pyx_v_text, 0, &__pyx_t_2);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.NewComment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":64
 *     return _initpynode(f)
 *
 * cpdef NewBlank():             # <<<<<<<<<<<<<<
 *     cdef chit.Node* f = <chit.Node*> new chit.Blank()
 *     return _initpynode(f)
 */

static PyObject * __pyx_pw_3hit_7NewBlank(PyObject * __pyx_self,
                                          CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_f_3hit_NewBlank(CYTHON_UNUSED int __pyx_skip_dispatch)
{
  hit::Node * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewBlank", 0);

  /* "hit.pyx":65
   *
   * cpdef NewBlank():
   *     cdef chit.Node* f = <chit.Node*> new chit.Blank()             # <<<<<<<<<<<<<<
   *     return _initpynode(f)
   *
   */
  __pyx_v_f = ((hit::Node *)new hit::Blank());

  /* "hit.pyx":66
   * cpdef NewBlank():
   *     cdef chit.Node* f = <chit.Node*> new chit.Blank()
   *     return _initpynode(f)             # <<<<<<<<<<<<<<
   *
   * cdef class Formatter:
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_f, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":64
 *     return _initpynode(f)
 *
 * cpdef NewBlank():             # <<<<<<<<<<<<<<
 *     cdef chit.Node* f = <chit.Node*> new chit.Blank()
 *     return _initpynode(f)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.NewBlank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_7NewBlank(PyObject * __pyx_self,
                                          CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_7NewBlank(PyObject * __pyx_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewBlank (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_6NewBlank(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_6NewBlank(CYTHON_UNUSED PyObject * __pyx_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NewBlank", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit_NewBlank(0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.NewBlank", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":71
 *     cdef chit.Formatter _formatter
 *
 *     def __cinit__(self, style_file=''):             # <<<<<<<<<<<<<<
 *         self._formatter = chit.Formatter()
 *         if style_file != '':
 */

/* Python wrapper */
static int __pyx_pw_3hit_9Formatter_1__cinit__(PyObject * __pyx_v_self,
                                               PyObject * __pyx_args,
                                               PyObject * __pyx_kwds); /*proto*/
static int
__pyx_pw_3hit_9Formatter_1__cinit__(PyObject * __pyx_v_self,
                                    PyObject * __pyx_args,
                                    PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_style_file = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_style_file, 0};
    PyObject * values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_u_);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_style_file);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0))
          __PYX_ERR(0, 71, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_style_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 71, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Formatter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_9Formatter___cinit__(((struct __pyx_obj_3hit_Formatter *)__pyx_v_self),
                                               __pyx_v_style_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int
__pyx_pf_3hit_9Formatter___cinit__(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                   PyObject * __pyx_v_style_file)
{
  PyObject * __pyx_v_f = NULL;
  PyObject * __pyx_v_data = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations int __pyx_t_1;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  PyObject * __pyx_t_5 = NULL;
  PyObject * __pyx_t_6 = NULL;
  PyObject * __pyx_t_7 = NULL;
  PyObject * __pyx_t_8 = NULL;
  PyObject * __pyx_t_9 = NULL;
  PyObject * __pyx_t_10 = NULL;
  int __pyx_t_11;
  std::string __pyx_t_12;
  std::string __pyx_t_13;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "hit.pyx":72
   *
   *     def __cinit__(self, style_file=''):
   *         self._formatter = chit.Formatter()             # <<<<<<<<<<<<<<
   *         if style_file != '':
   *             with open(style_file, 'r') as f:
   */
  __pyx_v_self->_formatter = hit::Formatter();

  /* "hit.pyx":73
   *     def __cinit__(self, style_file=''):
   *         self._formatter = chit.Formatter()
   *         if style_file != '':             # <<<<<<<<<<<<<<
   *             with open(style_file, 'r') as f:
   *                 data = f.read()
   */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_style_file, __pyx_kp_u_, Py_NE));
  if (unlikely(__pyx_t_1 < 0))
    __PYX_ERR(0, 73, __pyx_L1_error)
  if (__pyx_t_1)
  {

    /* "hit.pyx":74
     *         self._formatter = chit.Formatter()
     *         if style_file != '':
     *             with open(style_file, 'r') as f:             # <<<<<<<<<<<<<<
     *                 data = f.read()
     *             self._formatter = chit.Formatter(style_file, data)
     */
    /*with:*/ {
      __pyx_t_2 = PyTuple_New(2);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_style_file);
      __Pyx_GIVEREF(__pyx_v_style_file);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_style_file);
      __Pyx_INCREF(__pyx_n_u_r);
      __Pyx_GIVEREF(__pyx_n_u_r);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_n_u_r);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_2, NULL);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_exit);
      if (unlikely(!__pyx_t_4))
        __PYX_ERR(0, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_3, __pyx_n_s_enter);
      if (unlikely(!__pyx_t_5))
        __PYX_ERR(0, 74, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5)))
      {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6))
        {
          PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6)
                              : __Pyx_PyObject_CallNoArg(__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_6);
      __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 74, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = 0;
      /*try:*/ {{__Pyx_PyThreadState_declare __Pyx_PyThreadState_assign __Pyx_ExceptionSave(
          &__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {
        __pyx_v_f = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "hit.pyx":75
         *         if style_file != '':
         *             with open(style_file, 'r') as f:
         *                 data = f.read()             # <<<<<<<<<<<<<<
         *             self._formatter = chit.Formatter(style_file, data)
         *
         */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_f, __pyx_n_s_read);
        if (unlikely(!__pyx_t_3))
          __PYX_ERR(0, 75, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3)))
        {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_2))
          {
            PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
          }
        }
        __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2)
                                : __Pyx_PyObject_CallNoArg(__pyx_t_3);
        __Pyx_XDECREF(__pyx_t_2);
        __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5))
          __PYX_ERR(0, 75, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_v_data = __pyx_t_5;
        __pyx_t_5 = 0;

        /* "hit.pyx":74
         *         self._formatter = chit.Formatter()
         *         if style_file != '':
         *             with open(style_file, 'r') as f:             # <<<<<<<<<<<<<<
         *                 data = f.read()
         *             self._formatter = chit.Formatter(style_file, data)
         */
      }
      __Pyx_XDECREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9);
      __pyx_t_9 = 0;
      goto __pyx_L13_try_end;
    __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6);
      __pyx_t_6 = 0;
      /*except:*/ {
        __Pyx_AddTraceback("hit.Formatter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_3, &__pyx_t_2) < 0)
          __PYX_ERR(0, 74, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = PyTuple_Pack(3, __pyx_t_5, __pyx_t_3, __pyx_t_2);
        if (unlikely(!__pyx_t_6))
          __PYX_ERR(0, 74, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL);
        __Pyx_DECREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_10))
          __PYX_ERR(0, 74, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_10);
        __pyx_t_10 = 0;
        if (__pyx_t_1 < 0)
          __PYX_ERR(0, 74, __pyx_L10_except_error)
        __pyx_t_11 = ((!(__pyx_t_1 != 0)) != 0);
        if (__pyx_t_11)
        {
          __Pyx_GIVEREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_3);
          __Pyx_XGIVEREF(__pyx_t_2);
          __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_3, __pyx_t_2);
          __pyx_t_5 = 0;
          __pyx_t_3 = 0;
          __pyx_t_2 = 0;
          __PYX_ERR(0, 74, __pyx_L10_except_error)
        }
        __Pyx_XDECREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2);
        __pyx_t_2 = 0;
        goto __pyx_L9_exception_handled;
      }
    __pyx_L10_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
    __pyx_L9_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    __pyx_L13_try_end:;
    }
  }
  /*finally:*/ {
    /*normal exit:*/ {
      if (__pyx_t_4)
      {
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__2, NULL);
        __Pyx_DECREF(__pyx_t_4);
        __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_9))
          __PYX_ERR(0, 74, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9);
        __pyx_t_9 = 0;
      }
      goto __pyx_L7;
    }
  __pyx_L7:;
  }
  goto __pyx_L17;
__pyx_L4_error:;
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L1_error;
__pyx_L17:;
}

/* "hit.pyx":76
 *             with open(style_file, 'r') as f:
 *                 data = f.read()
 *             self._formatter = chit.Formatter(style_file, data)             # <<<<<<<<<<<<<<
 *
 *     def addPattern(self, prefix, order):
 */
__pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_v_style_file);
if (unlikely(PyErr_Occurred()))
  __PYX_ERR(0, 76, __pyx_L1_error)
if (unlikely(!__pyx_v_data))
{
  __Pyx_RaiseUnboundLocalError("data");
  __PYX_ERR(0, 76, __pyx_L1_error)
}
__pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_v_data);
if (unlikely(PyErr_Occurred()))
  __PYX_ERR(0, 76, __pyx_L1_error)
__pyx_v_self->_formatter = hit::Formatter(__pyx_t_12, __pyx_t_13);

/* "hit.pyx":73
 *     def __cinit__(self, style_file=''):
 *         self._formatter = chit.Formatter()
 *         if style_file != '':             # <<<<<<<<<<<<<<
 *             with open(style_file, 'r') as f:
 *                 data = f.read()
 */
}

/* "hit.pyx":71
 *     cdef chit.Formatter _formatter
 *
 *     def __cinit__(self, style_file=''):             # <<<<<<<<<<<<<<
 *         self._formatter = chit.Formatter()
 *         if style_file != '':
 */

/* function exit code */
__pyx_r = 0;
goto __pyx_L0;
__pyx_L1_error:;
__Pyx_XDECREF(__pyx_t_2);
__Pyx_XDECREF(__pyx_t_3);
__Pyx_XDECREF(__pyx_t_5);
__Pyx_XDECREF(__pyx_t_6);
__Pyx_AddTraceback("hit.Formatter.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
__pyx_r = -1;
__pyx_L0:;
__Pyx_XDECREF(__pyx_v_f);
__Pyx_XDECREF(__pyx_v_data);
__Pyx_RefNannyFinishContext();
return __pyx_r;
}

/* "hit.pyx":78
 *             self._formatter = chit.Formatter(style_file, data)
 *
 *     def addPattern(self, prefix, order):             # <<<<<<<<<<<<<<
 *         cdef vector[string] order_vec
 *         for o in order:
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_9Formatter_3addPattern(PyObject * __pyx_v_self,
                                                       PyObject * __pyx_args,
                                                       PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_3addPattern(PyObject * __pyx_v_self,
                                     PyObject * __pyx_args,
                                     PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_prefix = 0;
  PyObject * __pyx_v_order = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("addPattern (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_prefix, &__pyx_n_s_order, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefix)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_order)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("addPattern", 1, 2, 2, 1);
            __PYX_ERR(0, 78, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addPattern") < 0))
          __PYX_ERR(0, 78, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = values[0];
    __pyx_v_order = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addPattern", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 78, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Formatter.addPattern", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_9Formatter_2addPattern(
      ((struct __pyx_obj_3hit_Formatter *)__pyx_v_self), __pyx_v_prefix, __pyx_v_order);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_2addPattern(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                     PyObject * __pyx_v_prefix,
                                     PyObject * __pyx_v_order)
{
  std::vector<std::string> __pyx_v_order_vec;
  PyObject * __pyx_v_o = NULL;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject * (*__pyx_t_3)(PyObject *);
  PyObject * __pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPattern", 0);

  /* "hit.pyx":80
   *     def addPattern(self, prefix, order):
   *         cdef vector[string] order_vec
   *         for o in order:             # <<<<<<<<<<<<<<
   *             order_vec.push_back(o)
   *         self._formatter.addPattern(prefix, order_vec)
   */
  if (likely(PyList_CheckExact(__pyx_v_order)) || PyTuple_CheckExact(__pyx_v_order))
  {
    __pyx_t_1 = __pyx_v_order;
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  }
  else
  {
    __pyx_t_2 = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_v_order);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext;
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 80, __pyx_L1_error)
  }
  for (;;)
  {
    if (likely(!__pyx_t_3))
    {
      if (likely(PyList_CheckExact(__pyx_t_1)))
      {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1))
          break;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_2++;
        if (unlikely(0 < 0))
          __PYX_ERR(0, 80, __pyx_L1_error)
#else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        __pyx_t_2++;
        if (unlikely(!__pyx_t_4))
          __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
#endif
      }
      else
      {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1))
          break;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_2++;
        if (unlikely(0 < 0))
          __PYX_ERR(0, 80, __pyx_L1_error)
#else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2);
        __pyx_t_2++;
        if (unlikely(!__pyx_t_4))
          __PYX_ERR(0, 80, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
#endif
      }
    }
    else
    {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4))
      {
        PyObject * exc_type = PyErr_Occurred();
        if (exc_type)
        {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            PyErr_Clear();
          else
            __PYX_ERR(0, 80, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_o, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hit.pyx":81
     *         cdef vector[string] order_vec
     *         for o in order:
     *             order_vec.push_back(o)             # <<<<<<<<<<<<<<
     *         self._formatter.addPattern(prefix, order_vec)
     *
     */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_o);
    if (unlikely(PyErr_Occurred()))
      __PYX_ERR(0, 81, __pyx_L1_error)
    try
    {
      __pyx_v_order_vec.push_back(__pyx_t_5);
    }
    catch (...)
    {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 81, __pyx_L1_error)
    }

    /* "hit.pyx":80
     *     def addPattern(self, prefix, order):
     *         cdef vector[string] order_vec
     *         for o in order:             # <<<<<<<<<<<<<<
     *             order_vec.push_back(o)
     *         self._formatter.addPattern(prefix, order_vec)
     */
  }
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":82
   *         for o in order:
   *             order_vec.push_back(o)
   *         self._formatter.addPattern(prefix, order_vec)             # <<<<<<<<<<<<<<
   *
   *     def config(self, canonical_section_markers=True):
   */
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_prefix);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_v_self->_formatter.addPattern(__pyx_t_5, __pyx_v_order_vec);

  /* "hit.pyx":78
   *             self._formatter = chit.Formatter(style_file, data)
   *
   *     def addPattern(self, prefix, order):             # <<<<<<<<<<<<<<
   *         cdef vector[string] order_vec
   *         for o in order:
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hit.Formatter.addPattern", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":84
 *         self._formatter.addPattern(prefix, order_vec)
 *
 *     def config(self, canonical_section_markers=True):             # <<<<<<<<<<<<<<
 *         self._formatter.canonical_section_markers = canonical_section_markers
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_9Formatter_5config(PyObject * __pyx_v_self,
                                                   PyObject * __pyx_args,
                                                   PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_5config(PyObject * __pyx_v_self,
                                 PyObject * __pyx_args,
                                 PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_canonical_section_markers = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("config (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_canonical_section_markers, 0};
    PyObject * values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value =
                __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_canonical_section_markers);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "config") < 0))
          __PYX_ERR(0, 84, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_canonical_section_markers = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("config", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 84, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Formatter.config", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_9Formatter_4config(((struct __pyx_obj_3hit_Formatter *)__pyx_v_self),
                                             __pyx_v_canonical_section_markers);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_4config(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                 PyObject * __pyx_v_canonical_section_markers)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations bool __pyx_t_1;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("config", 0);

  /* "hit.pyx":85
   *
   *     def config(self, canonical_section_markers=True):
   *         self._formatter.canonical_section_markers = canonical_section_markers             #
   * <<<<<<<<<<<<<<
   *
   *     def format(self, fname, content):
   */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_canonical_section_markers);
  if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred()))
    __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_v_self->_formatter.canonical_section_markers = __pyx_t_1;

  /* "hit.pyx":84
   *         self._formatter.addPattern(prefix, order_vec)
   *
   *     def config(self, canonical_section_markers=True):             # <<<<<<<<<<<<<<
   *         self._formatter.canonical_section_markers = canonical_section_markers
   *
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_AddTraceback("hit.Formatter.config", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":87
 *         self._formatter.canonical_section_markers = canonical_section_markers
 *
 *     def format(self, fname, content):             # <<<<<<<<<<<<<<
 *         return str(self._formatter.format(fname, content))
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_9Formatter_7format(PyObject * __pyx_v_self,
                                                   PyObject * __pyx_args,
                                                   PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_7format(PyObject * __pyx_v_self,
                                 PyObject * __pyx_args,
                                 PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_fname = 0;
  PyObject * __pyx_v_content = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("format (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_fname, &__pyx_n_s_content, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_content)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("format", 1, 2, 2, 1);
            __PYX_ERR(0, 87, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "format") < 0))
          __PYX_ERR(0, 87, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fname = values[0];
    __pyx_v_content = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("format", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 87, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Formatter.format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_9Formatter_6format(
      ((struct __pyx_obj_3hit_Formatter *)__pyx_v_self), __pyx_v_fname, __pyx_v_content);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_6format(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                 PyObject * __pyx_v_fname,
                                 PyObject * __pyx_v_content)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations std::string __pyx_t_1;
  std::string __pyx_t_2;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format", 0);

  /* "hit.pyx":88
   *
   *     def format(self, fname, content):
   *         return str(self._formatter.format(fname, content))             # <<<<<<<<<<<<<<
   *
   *     def formatTree(self, Node root):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_fname);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_content);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(
      __pyx_v_self->_formatter.format(__pyx_t_1, __pyx_t_2));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

/* "hit.pyx":87
 *         self._formatter.canonical_section_markers = canonical_section_markers
 *
 *     def format(self, fname, content):             # <<<<<<<<<<<<<<
 *         return str(self._formatter.format(fname, content))
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hit.Formatter.format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":90
 *         return str(self._formatter.format(fname, content))
 *
 *     def formatTree(self, Node root):             # <<<<<<<<<<<<<<
 *         self._formatter.format(root._cnode)
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_9Formatter_9formatTree(PyObject * __pyx_v_self,
                                                       PyObject * __pyx_v_root); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_9formatTree(PyObject * __pyx_v_self, PyObject * __pyx_v_root)
{
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("formatTree (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_root), __pyx_ptype_3hit_Node, 1, "root", 0)))
    __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_r = __pyx_pf_3hit_9Formatter_8formatTree(((struct __pyx_obj_3hit_Formatter *)__pyx_v_self),
                                                 ((struct __pyx_obj_3hit_Node *)__pyx_v_root));

  /* function exit code */
  goto __pyx_L0;
__pyx_L1_error:;
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_8formatTree(struct __pyx_obj_3hit_Formatter * __pyx_v_self,
                                     struct __pyx_obj_3hit_Node * __pyx_v_root)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("formatTree", 0);

  /* "hit.pyx":91
   *
   *     def formatTree(self, Node root):
   *         self._formatter.format(root._cnode)             # <<<<<<<<<<<<<<
   *
   * cdef class Node:
   */
  __pyx_v_self->_formatter.format(__pyx_v_root->_cnode);

  /* "hit.pyx":90
   *         return str(self._formatter.format(fname, content))
   *
   *     def formatTree(self, Node root):             # <<<<<<<<<<<<<<
   *         self._formatter.format(root._cnode)
   *
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *
__pyx_pw_3hit_9Formatter_11__reduce_cython__(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_11__reduce_cython__(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_9Formatter_10__reduce_cython__(
      ((struct __pyx_obj_3hit_Formatter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_10__reduce_cython__(
    CYTHON_UNUSED struct __pyx_obj_3hit_Formatter * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
   * def __reduce_cython__(self):
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             #
   * <<<<<<<<<<<<<< def __setstate_cython__(self, __pyx_state): raise TypeError("no default
   * __reduce__ due to non-trivial __cinit__")
   */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback(
      "hit.Formatter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *
__pyx_pw_3hit_9Formatter_13__setstate_cython__(PyObject * __pyx_v_self,
                                               PyObject * __pyx_v___pyx_state); /*proto*/
static PyObject *
__pyx_pw_3hit_9Formatter_13__setstate_cython__(PyObject * __pyx_v_self,
                                               PyObject * __pyx_v___pyx_state)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_9Formatter_12__setstate_cython__(
      ((struct __pyx_obj_3hit_Formatter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_9Formatter_12__setstate_cython__(
    CYTHON_UNUSED struct __pyx_obj_3hit_Formatter * __pyx_v_self,
    CYTHON_UNUSED PyObject * __pyx_v___pyx_state)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
   * def __setstate_cython__(self, __pyx_state):
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             #
   * <<<<<<<<<<<<<<
   */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback(
      "hit.Formatter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":99
 *
 *     @classmethod
 *     def NewSection(cls, path):             # <<<<<<<<<<<<<<
 *         pass
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_1NewSection(PyObject * __pyx_v_cls,
                                                  PyObject * __pyx_v_path); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_1NewSection(PyObject * __pyx_v_cls, PyObject * __pyx_v_path)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewSection (wrapper)", 0);
  __pyx_r =
      __pyx_pf_3hit_4Node_NewSection(((PyTypeObject *)__pyx_v_cls), ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_NewSection(CYTHON_UNUSED PyTypeObject * __pyx_v_cls,
                               CYTHON_UNUSED PyObject * __pyx_v_path)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewSection", 0);

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":103
 *
 *     @classmethod
 *     def NewComment(cls, text):             # <<<<<<<<<<<<<<
 *         pass
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_3NewComment(PyObject * __pyx_v_cls,
                                                  PyObject * __pyx_v_text); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_3NewComment(PyObject * __pyx_v_cls, PyObject * __pyx_v_text)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewComment (wrapper)", 0);
  __pyx_r =
      __pyx_pf_3hit_4Node_2NewComment(((PyTypeObject *)__pyx_v_cls), ((PyObject *)__pyx_v_text));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_2NewComment(CYTHON_UNUSED PyTypeObject * __pyx_v_cls,
                                CYTHON_UNUSED PyObject * __pyx_v_text)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewComment", 0);

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":107
 *
 *     @classmethod
 *     def NewBlank(cls):             # <<<<<<<<<<<<<<
 *         pass
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_5NewBlank(PyObject * __pyx_v_cls,
                                                CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_5NewBlank(PyObject * __pyx_v_cls, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewBlank (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_4NewBlank(((PyTypeObject *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_4NewBlank(CYTHON_UNUSED PyTypeObject * __pyx_v_cls)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("NewBlank", 0);

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":110
 *         pass
 *
 *     def __cinit__(self, own=False, fname=''):             # <<<<<<<<<<<<<<
 *         self._cnode = NULL
 *         self._own = own
 */

/* Python wrapper */
static int __pyx_pw_3hit_4Node_7__cinit__(PyObject * __pyx_v_self,
                                          PyObject * __pyx_args,
                                          PyObject * __pyx_kwds); /*proto*/
static int
__pyx_pw_3hit_4Node_7__cinit__(PyObject * __pyx_v_self,
                               PyObject * __pyx_args,
                               PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_own = 0;
  PyObject * __pyx_v_fname = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_own, &__pyx_n_s_fname, 0};
    PyObject * values[2] = {0, 0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)__pyx_kp_u_);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_own);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
          CYTHON_FALLTHROUGH;
        case 1:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname);
            if (value)
            {
              values[1] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0))
          __PYX_ERR(0, 110, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_own = values[0];
    __pyx_v_fname = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 110, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_6__cinit__(
      ((struct __pyx_obj_3hit_Node *)__pyx_v_self), __pyx_v_own, __pyx_v_fname);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int
__pyx_pf_3hit_4Node_6__cinit__(struct __pyx_obj_3hit_Node * __pyx_v_self,
                               PyObject * __pyx_v_own,
                               PyObject * __pyx_v_fname)
{
  int __pyx_r;
  __Pyx_RefNannyDeclarations bool __pyx_t_1;
  PyObject * __pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "hit.pyx":111
   *
   *     def __cinit__(self, own=False, fname=''):
   *         self._cnode = NULL             # <<<<<<<<<<<<<<
   *         self._own = own
   *         self.fname = fname
   */
  __pyx_v_self->_cnode = NULL;

  /* "hit.pyx":112
   *     def __cinit__(self, own=False, fname=''):
   *         self._cnode = NULL
   *         self._own = own             # <<<<<<<<<<<<<<
   *         self.fname = fname
   *
   */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_own);
  if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred()))
    __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_v_self->_own = __pyx_t_1;

  /* "hit.pyx":113
   *         self._cnode = NULL
   *         self._own = own
   *         self.fname = fname             # <<<<<<<<<<<<<<
   *
   *     def __dealloc__(self):
   */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_fname)) || ((__pyx_v_fname) == Py_None) ||
        (PyErr_Format(PyExc_TypeError,
                      "Expected %.16s, got %.200s",
                      "unicode",
                      Py_TYPE(__pyx_v_fname)->tp_name),
         0)))
    __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_fname;
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->fname);
  __Pyx_DECREF(__pyx_v_self->fname);
  __pyx_v_self->fname = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":110
   *         pass
   *
   *     def __cinit__(self, own=False, fname=''):             # <<<<<<<<<<<<<<
   *         self._cnode = NULL
   *         self._own = own
   */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hit.Node.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":115
 *         self.fname = fname
 *
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._cnode != NULL and self._own:
 *             del self._cnode
 */

/* Python wrapper */
static void __pyx_pw_3hit_4Node_9__dealloc__(PyObject * __pyx_v_self); /*proto*/
static void
__pyx_pw_3hit_4Node_9__dealloc__(PyObject * __pyx_v_self)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3hit_4Node_8__dealloc__(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void
__pyx_pf_3hit_4Node_8__dealloc__(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  __Pyx_RefNannyDeclarations int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "hit.pyx":116
   *
   *     def __dealloc__(self):
   *         if self._cnode != NULL and self._own:             # <<<<<<<<<<<<<<
   *             del self._cnode
   *
   */
  __pyx_t_2 = ((__pyx_v_self->_cnode != NULL) != 0);
  if (__pyx_t_2)
  {
  }
  else
  {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_own != 0);
  __pyx_t_1 = __pyx_t_2;
__pyx_L4_bool_binop_done:;
  if (__pyx_t_1)
  {

    /* "hit.pyx":117
     *     def __dealloc__(self):
     *         if self._cnode != NULL and self._own:
     *             del self._cnode             # <<<<<<<<<<<<<<
     *
     *     def __deepcopy__(self, memodict):
     */
    delete __pyx_v_self->_cnode;

    /* "hit.pyx":116
     *
     *     def __dealloc__(self):
     *         if self._cnode != NULL and self._own:             # <<<<<<<<<<<<<<
     *             del self._cnode
     *
     */
  }

  /* "hit.pyx":115
   *         self.fname = fname
   *
   *     def __dealloc__(self):             # <<<<<<<<<<<<<<
   *         if self._cnode != NULL and self._own:
   *             del self._cnode
   */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "hit.pyx":119
 *             del self._cnode
 *
 *     def __deepcopy__(self, memodict):             # <<<<<<<<<<<<<<
 *         return self.clone()
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_11__deepcopy__(PyObject * __pyx_v_self,
                                                     PyObject * __pyx_v_memodict); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_11__deepcopy__(PyObject * __pyx_v_self, PyObject * __pyx_v_memodict)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_10__deepcopy__(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                               ((PyObject *)__pyx_v_memodict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_10__deepcopy__(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                   CYTHON_UNUSED PyObject * __pyx_v_memodict)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "hit.pyx":120
   *
   *     def __deepcopy__(self, memodict):
   *         return self.clone()             # <<<<<<<<<<<<<<
   *
   *     def __reduce__(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_clone);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":119
 *             del self._cnode
 *
 *     def __deepcopy__(self, memodict):             # <<<<<<<<<<<<<<
 *         return self.clone()
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":122
 *         return self.clone()
 *
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (parse, (self.fname, self.render()))
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_13__reduce__(PyObject * __pyx_v_self,
                                                   CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_13__reduce__(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__reduce__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_12__reduce__(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_12__reduce__(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce__", 0);

  /* "hit.pyx":123
   *
   *     def __reduce__(self):
   *         return (parse, (self.fname, self.render()))             # <<<<<<<<<<<<<<
   *
   *     def __repr__(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_parse);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_render);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3)))
  {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->fname);
  __Pyx_GIVEREF(__pyx_v_self->fname);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->fname);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

/* "hit.pyx":122
 *         return self.clone()
 *
 *     def __reduce__(self):             # <<<<<<<<<<<<<<
 *         return (parse, (self.fname, self.render()))
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hit.Node.__reduce__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":125
 *         return (parse, (self.fname, self.render()))
 *
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.render()
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_15__repr__(PyObject * __pyx_v_self); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_15__repr__(PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_14__repr__(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_14__repr__(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "hit.pyx":126
   *
   *     def __repr__(self):
   *         return self.render()             # <<<<<<<<<<<<<<
   *
   *     def remove(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_render);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":125
 *         return (parse, (self.fname, self.render()))
 *
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.render()
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":128
 *         return self.render()
 *
 *     def remove(self):             # <<<<<<<<<<<<<<
 *         self._cnode.remove()
 *         self._cnode = NULL
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_17remove(PyObject * __pyx_v_self,
                                               CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_17remove(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_16remove(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_16remove(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("remove", 0);

  /* "hit.pyx":129
   *
   *     def remove(self):
   *         self._cnode.remove()             # <<<<<<<<<<<<<<
   *         self._cnode = NULL
   *
   */
  __pyx_v_self->_cnode->remove();

  /* "hit.pyx":130
   *     def remove(self):
   *         self._cnode.remove()
   *         self._cnode = NULL             # <<<<<<<<<<<<<<
   *
   *     def render(self, indent=0, indent_text='  ', maxlen=0):
   */
  __pyx_v_self->_cnode = NULL;

  /* "hit.pyx":128
   *         return self.render()
   *
   *     def remove(self):             # <<<<<<<<<<<<<<
   *         self._cnode.remove()
   *         self._cnode = NULL
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":132
 *         self._cnode = NULL
 *
 *     def render(self, indent=0, indent_text='  ', maxlen=0):             # <<<<<<<<<<<<<<
 *         cindent = <string> indent_text.encode('utf-8')
 *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_19render(PyObject * __pyx_v_self,
                                               PyObject * __pyx_args,
                                               PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_19render(PyObject * __pyx_v_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_indent = 0;
  PyObject * __pyx_v_indent_text = 0;
  PyObject * __pyx_v_maxlen = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("render (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {
        &__pyx_n_s_indent, &__pyx_n_s_indent_text, &__pyx_n_s_maxlen, 0};
    PyObject * values[3] = {0, 0, 0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_kp_u__5);
    values[2] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 3:
          values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
          CYTHON_FALLTHROUGH;
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indent);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
          CYTHON_FALLTHROUGH;
        case 1:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indent_text);
            if (value)
            {
              values[1] = value;
              kw_args--;
            }
          }
          CYTHON_FALLTHROUGH;
        case 2:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxlen);
            if (value)
            {
              values[2] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render") < 0))
          __PYX_ERR(0, 132, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 3:
          values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
          CYTHON_FALLTHROUGH;
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indent = values[0];
    __pyx_v_indent_text = values[1];
    __pyx_v_maxlen = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 132, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_18render(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                         __pyx_v_indent,
                                         __pyx_v_indent_text,
                                         __pyx_v_maxlen);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_18render(struct __pyx_obj_3hit_Node * __pyx_v_self,
                             PyObject * __pyx_v_indent,
                             PyObject * __pyx_v_indent_text,
                             PyObject * __pyx_v_maxlen)
{
  std::string __pyx_v_cindent;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("render", 0);

  /* "hit.pyx":133
   *
   *     def render(self, indent=0, indent_text='  ', maxlen=0):
   *         cindent = <string> indent_text.encode('utf-8')             # <<<<<<<<<<<<<<
   *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_indent_text, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cindent = ((std::string)__pyx_t_4);

  /* "hit.pyx":134
   *     def render(self, indent=0, indent_text='  ', maxlen=0):
   *         cindent = <string> indent_text.encode('utf-8')
   *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')             #
   * <<<<<<<<<<<<<<
   *
   *     def line(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_indent);
  if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred()))
    __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_maxlen);
  if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred()))
    __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_t_1 =
      __Pyx_decode_cpp_string(__pyx_v_self->_cnode->render(__pyx_t_5, __pyx_v_cindent, __pyx_t_6),
                              0,
                              PY_SSIZE_T_MAX,
                              NULL,
                              NULL,
                              PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":132
 *         self._cnode = NULL
 *
 *     def render(self, indent=0, indent_text='  ', maxlen=0):             # <<<<<<<<<<<<<<
 *         cindent = <string> indent_text.encode('utf-8')
 *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":136
 *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')
 *
 *     def line(self):             # <<<<<<<<<<<<<<
 *         return int(self._cnode.line())
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_21line(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_21line(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("line (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_20line(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_20line(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("line", 0);

  /* "hit.pyx":137
   *
   *     def line(self):
   *         return int(self._cnode.line())             # <<<<<<<<<<<<<<
   *
   *     def filename(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_cnode->line());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

/* "hit.pyx":136
 *         return self._cnode.render(indent, cindent, maxlen).decode('utf-8')
 *
 *     def line(self):             # <<<<<<<<<<<<<<
 *         return int(self._cnode.line())
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hit.Node.line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":139
 *         return int(self._cnode.line())
 *
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.filename().decode('utf-8')
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_23filename(PyObject * __pyx_v_self,
                                                 CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_23filename(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("filename (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_22filename(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_22filename(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filename", 0);

  /* "hit.pyx":140
   *
   *     def filename(self):
   *         return self._cnode.filename().decode('utf-8')             # <<<<<<<<<<<<<<
   *
   *     def path(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(
      __pyx_v_self->_cnode->filename(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":139
 *         return int(self._cnode.line())
 *
 *     def filename(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.filename().decode('utf-8')
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":142
 *         return self._cnode.filename().decode('utf-8')
 *
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.path().decode('utf-8')
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_25path(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_25path(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("path (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_24path(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_24path(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("path", 0);

  /* "hit.pyx":143
   *
   *     def path(self):
   *         return self._cnode.path().decode('utf-8')             # <<<<<<<<<<<<<<
   *
   *     def fullpath(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(
      __pyx_v_self->_cnode->path(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":142
 *         return self._cnode.filename().decode('utf-8')
 *
 *     def path(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.path().decode('utf-8')
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.path", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":145
 *         return self._cnode.path().decode('utf-8')
 *
 *     def fullpath(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.fullpath().decode('utf-8')
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_27fullpath(PyObject * __pyx_v_self,
                                                 CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_27fullpath(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("fullpath (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_26fullpath(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_26fullpath(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fullpath", 0);

  /* "hit.pyx":146
   *
   *     def fullpath(self):
   *         return self._cnode.fullpath().decode('utf-8')             # <<<<<<<<<<<<<<
   *
   *     def type(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_decode_cpp_string(
      __pyx_v_self->_cnode->fullpath(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":145
 *         return self._cnode.path().decode('utf-8')
 *
 *     def fullpath(self):             # <<<<<<<<<<<<<<
 *         return self._cnode.fullpath().decode('utf-8')
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.fullpath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":148
 *         return self._cnode.fullpath().decode('utf-8')
 *
 *     def type(self):             # <<<<<<<<<<<<<<
 *         t = <int>self._cnode.type()
 *         if t == <int>chit.NTField:
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_29type(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_29type(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("type (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_28type(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_28type(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  int __pyx_v_t;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations int __pyx_t_1;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("type", 0);

  /* "hit.pyx":149
   *
   *     def type(self):
   *         t = <int>self._cnode.type()             # <<<<<<<<<<<<<<
   *         if t == <int>chit.NTField:
   *             return NodeType.Field
   */
  __pyx_v_t = ((int)__pyx_v_self->_cnode->type());

  /* "hit.pyx":150
   *     def type(self):
   *         t = <int>self._cnode.type()
   *         if t == <int>chit.NTField:             # <<<<<<<<<<<<<<
   *             return NodeType.Field
   *         elif t == <int>chit.NTSection:
   */
  __pyx_t_1 = ((__pyx_v_t == ((int)hit::NodeType::Field)) != 0);
  if (__pyx_t_1)
  {

    /* "hit.pyx":151
     *         t = <int>self._cnode.type()
     *         if t == <int>chit.NTField:
     *             return NodeType.Field             # <<<<<<<<<<<<<<
     *         elif t == <int>chit.NTSection:
     *             return NodeType.Section
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Field);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":150
     *     def type(self):
     *         t = <int>self._cnode.type()
     *         if t == <int>chit.NTField:             # <<<<<<<<<<<<<<
     *             return NodeType.Field
     *         elif t == <int>chit.NTSection:
     */
  }

  /* "hit.pyx":152
   *         if t == <int>chit.NTField:
   *             return NodeType.Field
   *         elif t == <int>chit.NTSection:             # <<<<<<<<<<<<<<
   *             return NodeType.Section
   *         elif t == <int>chit.NTComment:
   */
  __pyx_t_1 = ((__pyx_v_t == ((int)hit::NodeType::Section)) != 0);
  if (__pyx_t_1)
  {

    /* "hit.pyx":153
     *             return NodeType.Field
     *         elif t == <int>chit.NTSection:
     *             return NodeType.Section             # <<<<<<<<<<<<<<
     *         elif t == <int>chit.NTComment:
     *             return NodeType.Comment
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NodeType);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Section);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hit.pyx":152
     *         if t == <int>chit.NTField:
     *             return NodeType.Field
     *         elif t == <int>chit.NTSection:             # <<<<<<<<<<<<<<
     *             return NodeType.Section
     *         elif t == <int>chit.NTComment:
     */
  }

  /* "hit.pyx":154
   *         elif t == <int>chit.NTSection:
   *             return NodeType.Section
   *         elif t == <int>chit.NTComment:             # <<<<<<<<<<<<<<
   *             return NodeType.Comment
   *         elif t == <int>chit.NTBlank:
   */
  __pyx_t_1 = ((__pyx_v_t == ((int)hit::NodeType::Comment)) != 0);
  if (__pyx_t_1)
  {

    /* "hit.pyx":155
     *             return NodeType.Section
     *         elif t == <int>chit.NTComment:
     *             return NodeType.Comment             # <<<<<<<<<<<<<<
     *         elif t == <int>chit.NTBlank:
     *             return NodeType.Blank
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Comment);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":154
     *         elif t == <int>chit.NTSection:
     *             return NodeType.Section
     *         elif t == <int>chit.NTComment:             # <<<<<<<<<<<<<<
     *             return NodeType.Comment
     *         elif t == <int>chit.NTBlank:
     */
  }

  /* "hit.pyx":156
   *         elif t == <int>chit.NTComment:
   *             return NodeType.Comment
   *         elif t == <int>chit.NTBlank:             # <<<<<<<<<<<<<<
   *             return NodeType.Blank
   *         else:
   */
  __pyx_t_1 = ((__pyx_v_t == ((int)hit::NodeType::Blank)) != 0);
  if (__pyx_t_1)
  {

    /* "hit.pyx":157
     *             return NodeType.Comment
     *         elif t == <int>chit.NTBlank:
     *             return NodeType.Blank             # <<<<<<<<<<<<<<
     *         else:
     *             return 'Unknown'
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NodeType);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Blank);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hit.pyx":156
     *         elif t == <int>chit.NTComment:
     *             return NodeType.Comment
     *         elif t == <int>chit.NTBlank:             # <<<<<<<<<<<<<<
     *             return NodeType.Blank
     *         else:
     */
  }

  /* "hit.pyx":159
   *             return NodeType.Blank
   *         else:
   *             return 'Unknown'             # <<<<<<<<<<<<<<
   *
   *     def kind(self):
   */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_u_Unknown);
    __pyx_r = __pyx_n_u_Unknown;
    goto __pyx_L0;
  }

/* "hit.pyx":148
 *         return self._cnode.fullpath().decode('utf-8')
 *
 *     def type(self):             # <<<<<<<<<<<<<<
 *         t = <int>self._cnode.type()
 *         if t == <int>chit.NTField:
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":161
 *             return 'Unknown'
 *
 *     def kind(self):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Field:
 *             return FieldKind.NotField
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_31kind(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_31kind(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("kind (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_30kind(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_30kind(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  hit::Field * __pyx_v_f;
  int __pyx_v_k;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("kind", 0);

  /* "hit.pyx":162
   *
   *     def kind(self):
   *         if self.type() != NodeType.Field:             # <<<<<<<<<<<<<<
   *             return FieldKind.NotField
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Field);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_4 < 0))
    __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_4)
  {

    /* "hit.pyx":163
     *     def kind(self):
     *         if self.type() != NodeType.Field:
     *             return FieldKind.NotField             # <<<<<<<<<<<<<<
     *
     *         f = <chit.Field *> self._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FieldKind);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_NotField);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":162
     *
     *     def kind(self):
     *         if self.type() != NodeType.Field:             # <<<<<<<<<<<<<<
     *             return FieldKind.NotField
     *
     */
  }

  /* "hit.pyx":165
   *             return FieldKind.NotField
   *
   *         f = <chit.Field *> self._cnode             # <<<<<<<<<<<<<<
   *         k = <int>f.kind()
   *         if k == <int>chit.Int:
   */
  __pyx_v_f = ((hit::Field *)__pyx_v_self->_cnode);

  /* "hit.pyx":166
   *
   *         f = <chit.Field *> self._cnode
   *         k = <int>f.kind()             # <<<<<<<<<<<<<<
   *         if k == <int>chit.Int:
   *             return FieldKind.Int
   */
  __pyx_v_k = ((int)__pyx_v_f->kind());

  /* "hit.pyx":167
   *         f = <chit.Field *> self._cnode
   *         k = <int>f.kind()
   *         if k == <int>chit.Int:             # <<<<<<<<<<<<<<
   *             return FieldKind.Int
   *         elif k == <int>chit.Float:
   */
  __pyx_t_4 = ((__pyx_v_k == ((int)hit::Field::Kind::Int)) != 0);
  if (__pyx_t_4)
  {

    /* "hit.pyx":168
     *         k = <int>f.kind()
     *         if k == <int>chit.Int:
     *             return FieldKind.Int             # <<<<<<<<<<<<<<
     *         elif k == <int>chit.Float:
     *             return FieldKind.Float
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FieldKind);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Int);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hit.pyx":167
     *         f = <chit.Field *> self._cnode
     *         k = <int>f.kind()
     *         if k == <int>chit.Int:             # <<<<<<<<<<<<<<
     *             return FieldKind.Int
     *         elif k == <int>chit.Float:
     */
  }

  /* "hit.pyx":169
   *         if k == <int>chit.Int:
   *             return FieldKind.Int
   *         elif k == <int>chit.Float:             # <<<<<<<<<<<<<<
   *             return FieldKind.Float
   *         elif k == <int>chit.Bool:
   */
  __pyx_t_4 = ((__pyx_v_k == ((int)hit::Field::Kind::Float)) != 0);
  if (__pyx_t_4)
  {

    /* "hit.pyx":170
     *             return FieldKind.Int
     *         elif k == <int>chit.Float:
     *             return FieldKind.Float             # <<<<<<<<<<<<<<
     *         elif k == <int>chit.Bool:
     *             return FieldKind.Bool
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FieldKind);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Float);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":169
     *         if k == <int>chit.Int:
     *             return FieldKind.Int
     *         elif k == <int>chit.Float:             # <<<<<<<<<<<<<<
     *             return FieldKind.Float
     *         elif k == <int>chit.Bool:
     */
  }

  /* "hit.pyx":171
   *         elif k == <int>chit.Float:
   *             return FieldKind.Float
   *         elif k == <int>chit.Bool:             # <<<<<<<<<<<<<<
   *             return FieldKind.Bool
   *         elif k == <int>chit.String:
   */
  __pyx_t_4 = ((__pyx_v_k == ((int)hit::Field::Kind::Bool)) != 0);
  if (__pyx_t_4)
  {

    /* "hit.pyx":172
     *             return FieldKind.Float
     *         elif k == <int>chit.Bool:
     *             return FieldKind.Bool             # <<<<<<<<<<<<<<
     *         elif k == <int>chit.String:
     *             return FieldKind.String
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FieldKind);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Bool);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "hit.pyx":171
     *         elif k == <int>chit.Float:
     *             return FieldKind.Float
     *         elif k == <int>chit.Bool:             # <<<<<<<<<<<<<<
     *             return FieldKind.Bool
     *         elif k == <int>chit.String:
     */
  }

  /* "hit.pyx":173
   *         elif k == <int>chit.Bool:
   *             return FieldKind.Bool
   *         elif k == <int>chit.String:             # <<<<<<<<<<<<<<
   *             return FieldKind.String
   *         return FieldKind.NotField
   */
  __pyx_t_4 = ((__pyx_v_k == ((int)hit::Field::Kind::String)) != 0);
  if (__pyx_t_4)
  {

    /* "hit.pyx":174
     *             return FieldKind.Bool
     *         elif k == <int>chit.String:
     *             return FieldKind.String             # <<<<<<<<<<<<<<
     *         return FieldKind.NotField
     *
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FieldKind);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_String);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":173
     *         elif k == <int>chit.Bool:
     *             return FieldKind.Bool
     *         elif k == <int>chit.String:             # <<<<<<<<<<<<<<
     *             return FieldKind.String
     *         return FieldKind.NotField
     */
  }

  /* "hit.pyx":175
   *         elif k == <int>chit.String:
   *             return FieldKind.String
   *         return FieldKind.NotField             # <<<<<<<<<<<<<<
   *
   *     def raw(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_NotField);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

/* "hit.pyx":161
 *             return 'Unknown'
 *
 *     def kind(self):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Field:
 *             return FieldKind.NotField
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.kind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":177
 *         return FieldKind.NotField
 *
 *     def raw(self):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Field:
 *             return None
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_33raw(PyObject * __pyx_v_self,
                                            CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_33raw(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("raw (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_32raw(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_32raw(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("raw", 0);

  /* "hit.pyx":178
   *
   *     def raw(self):
   *         if self.type() != NodeType.Field:             # <<<<<<<<<<<<<<
   *             return None
   *         return self._cnode.strVal().decode('utf-8')
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Field);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_4 < 0))
    __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_4)
  {

    /* "hit.pyx":179
     *     def raw(self):
     *         if self.type() != NodeType.Field:
     *             return None             # <<<<<<<<<<<<<<
     *         return self._cnode.strVal().decode('utf-8')
     *
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None;
    __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hit.pyx":178
     *
     *     def raw(self):
     *         if self.type() != NodeType.Field:             # <<<<<<<<<<<<<<
     *             return None
     *         return self._cnode.strVal().decode('utf-8')
     */
  }

  /* "hit.pyx":180
   *         if self.type() != NodeType.Field:
   *             return None
   *         return self._cnode.strVal().decode('utf-8')             # <<<<<<<<<<<<<<
   *
   *     def find(self, path):
   */
  __Pyx_XDECREF(__pyx_r);
  try
  {
    __pyx_t_5 = __pyx_v_self->_cnode->strVal();
  }
  catch (...)
  {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __pyx_t_2 =
      __Pyx_decode_cpp_string(__pyx_t_5, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

/* "hit.pyx":177
 *         return FieldKind.NotField
 *
 *     def raw(self):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Field:
 *             return None
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.raw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":182
 *         return self._cnode.strVal().decode('utf-8')
 *
 *     def find(self, path):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_35find(PyObject * __pyx_v_self,
                                             PyObject * __pyx_v_path); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_35find(PyObject * __pyx_v_self, PyObject * __pyx_v_path)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("find (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_34find(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                       ((PyObject *)__pyx_v_path));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_34find(struct __pyx_obj_3hit_Node * __pyx_v_self, PyObject * __pyx_v_path)
{
  std::string __pyx_v_cpath;
  hit::Node * __pyx_v_n;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find", 0);

  /* "hit.pyx":183
   *
   *     def find(self, path):
   *         cpath = <string> path.encode('utf-8')             # <<<<<<<<<<<<<<
   *         n = self._cnode.find(cpath)
   *         if n == NULL:
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cpath = ((std::string)__pyx_t_4);

  /* "hit.pyx":184
   *     def find(self, path):
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)             # <<<<<<<<<<<<<<
   *         if n == NULL:
   *             return None
   */
  __pyx_v_n = __pyx_v_self->_cnode->find(__pyx_v_cpath);

  /* "hit.pyx":185
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)
   *         if n == NULL:             # <<<<<<<<<<<<<<
   *             return None
   *         return _initpynode(n)
   */
  __pyx_t_5 = ((__pyx_v_n == NULL) != 0);
  if (__pyx_t_5)
  {

    /* "hit.pyx":186
     *         n = self._cnode.find(cpath)
     *         if n == NULL:
     *             return None             # <<<<<<<<<<<<<<
     *         return _initpynode(n)
     *
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None;
    __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hit.pyx":185
     *         cpath = <string> path.encode('utf-8')
     *         n = self._cnode.find(cpath)
     *         if n == NULL:             # <<<<<<<<<<<<<<
     *             return None
     *         return _initpynode(n)
     */
  }

  /* "hit.pyx":187
   *         if n == NULL:
   *             return None
   *         return _initpynode(n)             # <<<<<<<<<<<<<<
   *
   *     def param(self, path=''):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_n, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":182
 *         return self._cnode.strVal().decode('utf-8')
 *
 *     def find(self, path):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.find", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":189
 *         return _initpynode(n)
 *
 *     def param(self, path=''):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_37param(PyObject * __pyx_v_self,
                                              PyObject * __pyx_args,
                                              PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_37param(PyObject * __pyx_v_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_path = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("param (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_path, 0};
    PyObject * values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_u_);
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "param") < 0))
          __PYX_ERR(0, 189, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("param", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 189, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.param", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_36param(((struct __pyx_obj_3hit_Node *)__pyx_v_self), __pyx_v_path);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_36param(struct __pyx_obj_3hit_Node * __pyx_v_self, PyObject * __pyx_v_path)
{
  std::string __pyx_v_cpath;
  hit::Node * __pyx_v_n;
  struct __pyx_obj_3hit_Node * __pyx_v_nn = 0;
  hit::Field * __pyx_v_f;
  PyObject * __pyx_v_k = NULL;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  hit::Node * __pyx_t_7;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("param", 0);

  /* "hit.pyx":190
   *
   *     def param(self, path=''):
   *         cpath = <string> path.encode('utf-8')             # <<<<<<<<<<<<<<
   *         n = self._cnode.find(cpath)
   *         if path != '' and n == NULL:
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cpath = ((std::string)__pyx_t_4);

  /* "hit.pyx":191
   *     def param(self, path=''):
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)             # <<<<<<<<<<<<<<
   *         if path != '' and n == NULL:
   *             return None
   */
  __pyx_v_n = __pyx_v_self->_cnode->find(__pyx_v_cpath);

  /* "hit.pyx":192
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)
   *         if path != '' and n == NULL:             # <<<<<<<<<<<<<<
   *             return None
   *         elif path == '':
   */
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_path, __pyx_kp_u_, Py_NE));
  if (unlikely(__pyx_t_6 < 0))
    __PYX_ERR(0, 192, __pyx_L1_error)
  if (__pyx_t_6)
  {
  }
  else
  {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_n == NULL) != 0);
  __pyx_t_5 = __pyx_t_6;
__pyx_L4_bool_binop_done:;
  if (__pyx_t_5)
  {

    /* "hit.pyx":193
     *         n = self._cnode.find(cpath)
     *         if path != '' and n == NULL:
     *             return None             # <<<<<<<<<<<<<<
     *         elif path == '':
     *             n = self._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None;
    __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hit.pyx":192
     *         cpath = <string> path.encode('utf-8')
     *         n = self._cnode.find(cpath)
     *         if path != '' and n == NULL:             # <<<<<<<<<<<<<<
     *             return None
     *         elif path == '':
     */
  }

  /* "hit.pyx":194
   *         if path != '' and n == NULL:
   *             return None
   *         elif path == '':             # <<<<<<<<<<<<<<
   *             n = self._cnode
   *
   */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_path, __pyx_kp_u_, Py_EQ));
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 194, __pyx_L1_error)
  if (__pyx_t_5)
  {

    /* "hit.pyx":195
     *             return None
     *         elif path == '':
     *             n = self._cnode             # <<<<<<<<<<<<<<
     *
     *         cdef Node nn = _initpynode(n)
     */
    __pyx_t_7 = __pyx_v_self->_cnode;
    __pyx_v_n = __pyx_t_7;

    /* "hit.pyx":194
     *         if path != '' and n == NULL:
     *             return None
     *         elif path == '':             # <<<<<<<<<<<<<<
     *             n = self._cnode
     *
     */
  }

  /* "hit.pyx":197
   *             n = self._cnode
   *
   *         cdef Node nn = _initpynode(n)             # <<<<<<<<<<<<<<
   *         if nn.type() != NodeType.Field:
   *             return None
   */
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_n, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) ||
               likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3hit_Node)))))
    __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_v_nn = ((struct __pyx_obj_3hit_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":198
   *
   *         cdef Node nn = _initpynode(n)
   *         if nn.type() != NodeType.Field:             # <<<<<<<<<<<<<<
   *             return None
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nn), __pyx_n_s_type);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Field);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_5)
  {

    /* "hit.pyx":199
     *         cdef Node nn = _initpynode(n)
     *         if nn.type() != NodeType.Field:
     *             return None             # <<<<<<<<<<<<<<
     *
     *         f = <chit.Field *> nn._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None;
    __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hit.pyx":198
     *
     *         cdef Node nn = _initpynode(n)
     *         if nn.type() != NodeType.Field:             # <<<<<<<<<<<<<<
     *             return None
     *
     */
  }

  /* "hit.pyx":201
   *             return None
   *
   *         f = <chit.Field *> nn._cnode             # <<<<<<<<<<<<<<
   *         k = nn.kind()
   *         if k == FieldKind.Int:
   */
  __pyx_v_f = ((hit::Field *)__pyx_v_nn->_cnode);

  /* "hit.pyx":202
   *
   *         f = <chit.Field *> nn._cnode
   *         k = nn.kind()             # <<<<<<<<<<<<<<
   *         if k == FieldKind.Int:
   *             return int(f.intVal())
   */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nn), __pyx_n_s_kind);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3)))
  {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_k = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hit.pyx":203
   *         f = <chit.Field *> nn._cnode
   *         k = nn.kind()
   *         if k == FieldKind.Int:             # <<<<<<<<<<<<<<
   *             return int(f.intVal())
   *         elif k == FieldKind.Float:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Int);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_k, __pyx_t_3, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_5)
  {

    /* "hit.pyx":204
     *         k = nn.kind()
     *         if k == FieldKind.Int:
     *             return int(f.intVal())             # <<<<<<<<<<<<<<
     *         elif k == FieldKind.Float:
     *             return float(f.floatVal())
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_f->intVal());
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_2);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":203
     *         f = <chit.Field *> nn._cnode
     *         k = nn.kind()
     *         if k == FieldKind.Int:             # <<<<<<<<<<<<<<
     *             return int(f.intVal())
     *         elif k == FieldKind.Float:
     */
  }

  /* "hit.pyx":205
   *         if k == FieldKind.Int:
   *             return int(f.intVal())
   *         elif k == FieldKind.Float:             # <<<<<<<<<<<<<<
   *             return float(f.floatVal())
   *         elif k == FieldKind.Bool:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Float);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_k, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_3);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (__pyx_t_5)
  {

    /* "hit.pyx":206
     *             return int(f.intVal())
     *         elif k == FieldKind.Float:
     *             return float(f.floatVal())             # <<<<<<<<<<<<<<
     *         elif k == FieldKind.Bool:
     *             return bool(f.boolVal())
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_f->floatVal());
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":205
     *         if k == FieldKind.Int:
     *             return int(f.intVal())
     *         elif k == FieldKind.Float:             # <<<<<<<<<<<<<<
     *             return float(f.floatVal())
     *         elif k == FieldKind.Bool:
     */
  }

  /* "hit.pyx":207
   *         elif k == FieldKind.Float:
   *             return float(f.floatVal())
   *         elif k == FieldKind.Bool:             # <<<<<<<<<<<<<<
   *             return bool(f.boolVal())
   *         return f.strVal().decode('utf-8')
   */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FieldKind);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Bool);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_k, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_3);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (__pyx_t_5)
  {

    /* "hit.pyx":208
     *             return float(f.floatVal())
     *         elif k == FieldKind.Bool:
     *             return bool(f.boolVal())             # <<<<<<<<<<<<<<
     *         return f.strVal().decode('utf-8')
     *
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_f->boolVal());
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3);
    if (unlikely(__pyx_t_5 < 0))
      __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((!(!__pyx_t_5)));
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "hit.pyx":207
     *         elif k == FieldKind.Float:
     *             return float(f.floatVal())
     *         elif k == FieldKind.Bool:             # <<<<<<<<<<<<<<
     *             return bool(f.boolVal())
     *         return f.strVal().decode('utf-8')
     */
  }

  /* "hit.pyx":209
   *         elif k == FieldKind.Bool:
   *             return bool(f.boolVal())
   *         return f.strVal().decode('utf-8')             # <<<<<<<<<<<<<<
   *
   *     def setParam(self, path, val):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_decode_cpp_string(
      __pyx_v_f->strVal(), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

/* "hit.pyx":189
 *         return _initpynode(n)
 *
 *     def param(self, path=''):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.param", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nn);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":211
 *         return f.strVal().decode('utf-8')
 *
 *     def setParam(self, path, val):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_39setParam(PyObject * __pyx_v_self,
                                                 PyObject * __pyx_args,
                                                 PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_39setParam(PyObject * __pyx_v_self,
                               PyObject * __pyx_args,
                               PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_path = 0;
  PyObject * __pyx_v_val = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("setParam (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_path, &__pyx_n_s_val, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_path)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_val)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("setParam", 1, 2, 2, 1);
            __PYX_ERR(0, 211, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setParam") < 0))
          __PYX_ERR(0, 211, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_path = values[0];
    __pyx_v_val = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setParam", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 211, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.setParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_38setParam(
      ((struct __pyx_obj_3hit_Node *)__pyx_v_self), __pyx_v_path, __pyx_v_val);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_38setParam(struct __pyx_obj_3hit_Node * __pyx_v_self,
                               PyObject * __pyx_v_path,
                               PyObject * __pyx_v_val)
{
  std::string __pyx_v_cpath;
  hit::Node * __pyx_v_n;
  struct __pyx_obj_3hit_Node * __pyx_v_nn = 0;
  hit::Field * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  hit::Node * __pyx_t_7;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setParam", 0);

  /* "hit.pyx":212
   *
   *     def setParam(self, path, val):
   *         cpath = <string> path.encode('utf-8')             # <<<<<<<<<<<<<<
   *         n = self._cnode.find(cpath)
   *         if path != '' and n == NULL:
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_cpath = ((std::string)__pyx_t_4);

  /* "hit.pyx":213
   *     def setParam(self, path, val):
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)             # <<<<<<<<<<<<<<
   *         if path != '' and n == NULL:
   *             return 1
   */
  __pyx_v_n = __pyx_v_self->_cnode->find(__pyx_v_cpath);

  /* "hit.pyx":214
   *         cpath = <string> path.encode('utf-8')
   *         n = self._cnode.find(cpath)
   *         if path != '' and n == NULL:             # <<<<<<<<<<<<<<
   *             return 1
   *         elif path == '':
   */
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_v_path, __pyx_kp_u_, Py_NE));
  if (unlikely(__pyx_t_6 < 0))
    __PYX_ERR(0, 214, __pyx_L1_error)
  if (__pyx_t_6)
  {
  }
  else
  {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = ((__pyx_v_n == NULL) != 0);
  __pyx_t_5 = __pyx_t_6;
__pyx_L4_bool_binop_done:;
  if (__pyx_t_5)
  {

    /* "hit.pyx":215
     *         n = self._cnode.find(cpath)
     *         if path != '' and n == NULL:
     *             return 1             # <<<<<<<<<<<<<<
     *         elif path == '':
     *             n = self._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "hit.pyx":214
     *         cpath = <string> path.encode('utf-8')
     *         n = self._cnode.find(cpath)
     *         if path != '' and n == NULL:             # <<<<<<<<<<<<<<
     *             return 1
     *         elif path == '':
     */
  }

  /* "hit.pyx":216
   *         if path != '' and n == NULL:
   *             return 1
   *         elif path == '':             # <<<<<<<<<<<<<<
   *             n = self._cnode
   *
   */
  __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_path, __pyx_kp_u_, Py_EQ));
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 216, __pyx_L1_error)
  if (__pyx_t_5)
  {

    /* "hit.pyx":217
     *             return 1
     *         elif path == '':
     *             n = self._cnode             # <<<<<<<<<<<<<<
     *
     *         cdef Node nn = _initpynode(n)
     */
    __pyx_t_7 = __pyx_v_self->_cnode;
    __pyx_v_n = __pyx_t_7;

    /* "hit.pyx":216
     *         if path != '' and n == NULL:
     *             return 1
     *         elif path == '':             # <<<<<<<<<<<<<<
     *             n = self._cnode
     *
     */
  }

  /* "hit.pyx":219
   *             n = self._cnode
   *
   *         cdef Node nn = _initpynode(n)             # <<<<<<<<<<<<<<
   *         if nn.type() != NodeType.Field:
   *             return 1
   */
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_n, NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) ||
               likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_3hit_Node)))))
    __PYX_ERR(0, 219, __pyx_L1_error)
  __pyx_v_nn = ((struct __pyx_obj_3hit_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":220
   *
   *         cdef Node nn = _initpynode(n)
   *         if nn.type() != NodeType.Field:             # <<<<<<<<<<<<<<
   *             return 1
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_nn), __pyx_n_s_type);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Field);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_5)
  {

    /* "hit.pyx":221
     *         cdef Node nn = _initpynode(n)
     *         if nn.type() != NodeType.Field:
     *             return 1             # <<<<<<<<<<<<<<
     *
     *         f = <chit.Field *> nn._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "hit.pyx":220
     *
     *         cdef Node nn = _initpynode(n)
     *         if nn.type() != NodeType.Field:             # <<<<<<<<<<<<<<
     *             return 1
     *
     */
  }

  /* "hit.pyx":223
   *             return 1
   *
   *         f = <chit.Field *> nn._cnode             # <<<<<<<<<<<<<<
   *         f.setVal(<string> str(val).encode('utf-8'), f.kind())
   *         return 0
   */
  __pyx_v_f = ((hit::Field *)__pyx_v_nn->_cnode);

  /* "hit.pyx":224
   *
   *         f = <chit.Field *> nn._cnode
   *         f.setVal(<string> str(val).encode('utf-8'), f.kind())             # <<<<<<<<<<<<<<
   *         return 0
   *
   */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_val);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject *)__pyx_t_2));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_f->setVal(((std::string)__pyx_t_4), __pyx_v_f->kind());

  /* "hit.pyx":225
   *         f = <chit.Field *> nn._cnode
   *         f.setVal(<string> str(val).encode('utf-8'), f.kind())
   *         return 0             # <<<<<<<<<<<<<<
   *
   *     def setText(self, text):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

/* "hit.pyx":211
 *         return f.strVal().decode('utf-8')
 *
 *     def setParam(self, path, val):             # <<<<<<<<<<<<<<
 *         cpath = <string> path.encode('utf-8')
 *         n = self._cnode.find(cpath)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.setParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_nn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":227
 *         return 0
 *
 *     def setText(self, text):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Comment:
 *             return 1
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_41setText(PyObject * __pyx_v_self,
                                                PyObject * __pyx_v_text); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_41setText(PyObject * __pyx_v_self, PyObject * __pyx_v_text)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("setText (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_40setText(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                          ((PyObject *)__pyx_v_text));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_40setText(struct __pyx_obj_3hit_Node * __pyx_v_self, PyObject * __pyx_v_text)
{
  hit::Comment * __pyx_v_f;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  int __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setText", 0);

  /* "hit.pyx":228
   *
   *     def setText(self, text):
   *         if self.type() != NodeType.Comment:             # <<<<<<<<<<<<<<
   *             return 1
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Comment);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_NE);
  __Pyx_XGOTREF(__pyx_t_2);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2);
  if (unlikely(__pyx_t_4 < 0))
    __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (__pyx_t_4)
  {

    /* "hit.pyx":229
     *     def setText(self, text):
     *         if self.type() != NodeType.Comment:
     *             return 1             # <<<<<<<<<<<<<<
     *
     *         f = <chit.Comment *> self._cnode
     */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;

    /* "hit.pyx":228
     *
     *     def setText(self, text):
     *         if self.type() != NodeType.Comment:             # <<<<<<<<<<<<<<
     *             return 1
     *
     */
  }

  /* "hit.pyx":231
   *             return 1
   *
   *         f = <chit.Comment *> self._cnode             # <<<<<<<<<<<<<<
   *         f.setText(<string> str(text).encode('utf-8'))
   *         return 0
   */
  __pyx_v_f = ((hit::Comment *)__pyx_v_self->_cnode);

  /* "hit.pyx":232
   *
   *         f = <chit.Comment *> self._cnode
   *         f.setText(<string> str(text).encode('utf-8'))             # <<<<<<<<<<<<<<
   *         return 0
   *
   */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_text);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject *)__pyx_t_2));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_f->setText(((std::string)__pyx_t_5));

  /* "hit.pyx":233
   *         f = <chit.Comment *> self._cnode
   *         f.setText(<string> str(text).encode('utf-8'))
   *         return 0             # <<<<<<<<<<<<<<
   *
   *     def walk(self, walker, node_type=NodeType.All):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

/* "hit.pyx":227
 *         return 0
 *
 *     def setText(self, text):             # <<<<<<<<<<<<<<
 *         if self.type() != NodeType.Comment:
 *             return 1
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.Node.setText", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":235
 *         return 0
 *
 *     def walk(self, walker, node_type=NodeType.All):             # <<<<<<<<<<<<<<
 *         if self.type() == node_type or node_type == NodeType.All:
 *             walker.walk(self.fullpath(), self.path(), self);
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_43walk(PyObject * __pyx_v_self,
                                             PyObject * __pyx_args,
                                             PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_43walk(PyObject * __pyx_v_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_walker = 0;
  PyObject * __pyx_v_node_type = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("walk (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_walker, &__pyx_n_s_node_type, 0};
    PyObject * values[2] = {0, 0};
    values[1] = __pyx_k__6;
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_walker)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_type);
            if (value)
            {
              values[1] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "walk") < 0))
          __PYX_ERR(0, 235, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_walker = values[0];
    __pyx_v_node_type = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("walk", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 235, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.walk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_42walk(
      ((struct __pyx_obj_3hit_Node *)__pyx_v_self), __pyx_v_walker, __pyx_v_node_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_42walk(struct __pyx_obj_3hit_Node * __pyx_v_self,
                           PyObject * __pyx_v_walker,
                           PyObject * __pyx_v_node_type)
{
  PyObject * __pyx_v_child = NULL;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations int __pyx_t_1;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject * __pyx_t_6 = NULL;
  PyObject * __pyx_t_7 = NULL;
  PyObject * __pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject * (*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("walk", 0);

  /* "hit.pyx":236
   *
   *     def walk(self, walker, node_type=NodeType.All):
   *         if self.type() == node_type or node_type == NodeType.All:             # <<<<<<<<<<<<<<
   *             walker.walk(self.fullpath(), self.path(), self);
   *         for child in self.children():
   */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_type);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3)))
  {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_node_type, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_3);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (!__pyx_t_5)
  {
  }
  else
  {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_All);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_node_type, __pyx_t_2, Py_EQ);
  __Pyx_XGOTREF(__pyx_t_3);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3);
  if (unlikely(__pyx_t_5 < 0))
    __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_5;
__pyx_L4_bool_binop_done:;
  if (__pyx_t_1)
  {

    /* "hit.pyx":237
     *     def walk(self, walker, node_type=NodeType.All):
     *         if self.type() == node_type or node_type == NodeType.All:
     *             walker.walk(self.fullpath(), self.path(), self);             # <<<<<<<<<<<<<<
     *         for child in self.children():
     *             child.walk(walker, node_type);
     */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_walker, __pyx_n_s_walk);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fullpath);
    if (unlikely(!__pyx_t_6))
      __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6)))
    {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7)
                            : __Pyx_PyObject_CallNoArg(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7);
    __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_path);
    if (unlikely(!__pyx_t_7))
      __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7)))
    {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8)
                            : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6))
      __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
    {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_9 = 1;
      }
    }
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2))
    {
      PyObject * __pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_t_6, ((PyObject *)__pyx_v_self)};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_9, 3 + __pyx_t_9);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = 0;
    }
    else
#endif
#if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2))
    {
      PyObject * __pyx_temp[4] = {__pyx_t_7, __pyx_t_4, __pyx_t_6, ((PyObject *)__pyx_v_self)};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_9, 3 + __pyx_t_9);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = 0;
    }
    else
#endif
    {
      __pyx_t_8 = PyTuple_New(3 + __pyx_t_9);
      if (unlikely(!__pyx_t_8))
        __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_7)
      {
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
        __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_8, 0 + __pyx_t_9, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 1 + __pyx_t_9, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_8, 2 + __pyx_t_9, ((PyObject *)__pyx_v_self));
      __pyx_t_4 = 0;
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 237, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8);
      __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hit.pyx":236
     *
     *     def walk(self, walker, node_type=NodeType.All):
     *         if self.type() == node_type or node_type == NodeType.All:             #
     * <<<<<<<<<<<<<< walker.walk(self.fullpath(), self.path(), self); for child in self.children():
     */
  }

  /* "hit.pyx":238
   *         if self.type() == node_type or node_type == NodeType.All:
   *             walker.walk(self.fullpath(), self.path(), self);
   *         for child in self.children():             # <<<<<<<<<<<<<<
   *             child.walk(walker, node_type);
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_8)
                          : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3))
  {
    __pyx_t_2 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  }
  else
  {
    __pyx_t_10 = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_3);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext;
    if (unlikely(!__pyx_t_11))
      __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  for (;;)
  {
    if (likely(!__pyx_t_11))
    {
      if (likely(PyList_CheckExact(__pyx_t_2)))
      {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2))
          break;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_10++;
        if (unlikely(0 < 0))
          __PYX_ERR(0, 238, __pyx_L1_error)
#else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_10);
        __pyx_t_10++;
        if (unlikely(!__pyx_t_3))
          __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
#endif
      }
      else
      {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2))
          break;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10);
        __Pyx_INCREF(__pyx_t_3);
        __pyx_t_10++;
        if (unlikely(0 < 0))
          __PYX_ERR(0, 238, __pyx_L1_error)
#else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_10);
        __pyx_t_10++;
        if (unlikely(!__pyx_t_3))
          __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
#endif
      }
    }
    else
    {
      __pyx_t_3 = __pyx_t_11(__pyx_t_2);
      if (unlikely(!__pyx_t_3))
      {
        PyObject * exc_type = PyErr_Occurred();
        if (exc_type)
        {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            PyErr_Clear();
          else
            __PYX_ERR(0, 238, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_child, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hit.pyx":239
     *             walker.walk(self.fullpath(), self.path(), self);
     *         for child in self.children():
     *             child.walk(walker, node_type);             # <<<<<<<<<<<<<<
     *
     *     def clone(self):
     */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_child, __pyx_n_s_walk);
    if (unlikely(!__pyx_t_8))
      __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8)))
    {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_9 = 1;
      }
    }
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_8))
    {
      PyObject * __pyx_temp[3] = {__pyx_t_6, __pyx_v_walker, __pyx_v_node_type};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp + 1 - __pyx_t_9, 2 + __pyx_t_9);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    }
    else
#endif
#if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_8))
    {
      PyObject * __pyx_temp[3] = {__pyx_t_6, __pyx_v_walker, __pyx_v_node_type};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp + 1 - __pyx_t_9, 2 + __pyx_t_9);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    }
    else
#endif
    {
      __pyx_t_4 = PyTuple_New(2 + __pyx_t_9);
      if (unlikely(!__pyx_t_4))
        __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_6)
      {
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
        __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_walker);
      __Pyx_GIVEREF(__pyx_v_walker);
      PyTuple_SET_ITEM(__pyx_t_4, 0 + __pyx_t_9, __pyx_v_walker);
      __Pyx_INCREF(__pyx_v_node_type);
      __Pyx_GIVEREF(__pyx_v_node_type);
      PyTuple_SET_ITEM(__pyx_t_4, 1 + __pyx_t_9, __pyx_v_node_type);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_4, NULL);
      if (unlikely(!__pyx_t_3))
        __PYX_ERR(0, 239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hit.pyx":238
     *         if self.type() == node_type or node_type == NodeType.All:
     *             walker.walk(self.fullpath(), self.path(), self);
     *         for child in self.children():             # <<<<<<<<<<<<<<
     *             child.walk(walker, node_type);
     *
     */
  }
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":235
   *         return 0
   *
   *     def walk(self, walker, node_type=NodeType.All):             # <<<<<<<<<<<<<<
   *         if self.type() == node_type or node_type == NodeType.All:
   *             walker.walk(self.fullpath(), self.path(), self);
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hit.Node.walk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":241
 *             child.walk(walker, node_type);
 *
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.clone(), own=self._own)
 *     def root(self):
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_45clone(PyObject * __pyx_v_self,
                                              CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_45clone(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_44clone(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_44clone(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  struct __pyx_opt_args_3hit__initpynode __pyx_t_3;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "hit.pyx":242
   *
   *     def clone(self):
   *         return _initpynode(self._cnode.clone(), own=self._own)             # <<<<<<<<<<<<<<
   *     def root(self):
   *         return _initpynode(self._cnode.root())
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_own);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3.__pyx_n = 1;
  __pyx_t_3.own = __pyx_t_1;
  __pyx_t_2 = __pyx_f_3hit__initpynode(__pyx_v_self->_cnode->clone(), &__pyx_t_3);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

/* "hit.pyx":241
 *             child.walk(walker, node_type);
 *
 *     def clone(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.clone(), own=self._own)
 *     def root(self):
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hit.Node.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":243
 *     def clone(self):
 *         return _initpynode(self._cnode.clone(), own=self._own)
 *     def root(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.root())
 *     def parent(self):
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_47root(PyObject * __pyx_v_self,
                                             CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_47root(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("root (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_46root(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_46root(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("root", 0);

  /* "hit.pyx":244
   *         return _initpynode(self._cnode.clone(), own=self._own)
   *     def root(self):
   *         return _initpynode(self._cnode.root())             # <<<<<<<<<<<<<<
   *     def parent(self):
   *         return _initpynode(self._cnode.root())
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_self->_cnode->root(), NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":243
 *     def clone(self):
 *         return _initpynode(self._cnode.clone(), own=self._own)
 *     def root(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.root())
 *     def parent(self):
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":245
 *     def root(self):
 *         return _initpynode(self._cnode.root())
 *     def parent(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.root())
 *     def addChild(self, Node child):
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_49parent(PyObject * __pyx_v_self,
                                               CYTHON_UNUSED PyObject * unused); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_49parent(PyObject * __pyx_v_self, CYTHON_UNUSED PyObject * unused)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("parent (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_4Node_48parent(((struct __pyx_obj_3hit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_48parent(struct __pyx_obj_3hit_Node * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parent", 0);

  /* "hit.pyx":246
   *         return _initpynode(self._cnode.root())
   *     def parent(self):
   *         return _initpynode(self._cnode.root())             # <<<<<<<<<<<<<<
   *     def addChild(self, Node child):
   *         self._cnode.addChild(child._cnode)
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_self->_cnode->root(), NULL);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":245
 *     def root(self):
 *         return _initpynode(self._cnode.root())
 *     def parent(self):             # <<<<<<<<<<<<<<
 *         return _initpynode(self._cnode.root())
 *     def addChild(self, Node child):
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":247
 *     def parent(self):
 *         return _initpynode(self._cnode.root())
 *     def addChild(self, Node child):             # <<<<<<<<<<<<<<
 *         self._cnode.addChild(child._cnode)
 *     def insertChild(self, index, Node child):
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_51addChild(PyObject * __pyx_v_self,
                                                 PyObject * __pyx_v_child); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_51addChild(PyObject * __pyx_v_self, PyObject * __pyx_v_child)
{
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("addChild (wrapper)", 0);
  if (unlikely(
          !__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_3hit_Node, 1, "child", 0)))
    __PYX_ERR(0, 247, __pyx_L1_error)
  __pyx_r = __pyx_pf_3hit_4Node_50addChild(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                           ((struct __pyx_obj_3hit_Node *)__pyx_v_child));

  /* function exit code */
  goto __pyx_L0;
__pyx_L1_error:;
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_50addChild(struct __pyx_obj_3hit_Node * __pyx_v_self,
                               struct __pyx_obj_3hit_Node * __pyx_v_child)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("addChild", 0);

  /* "hit.pyx":248
   *         return _initpynode(self._cnode.root())
   *     def addChild(self, Node child):
   *         self._cnode.addChild(child._cnode)             # <<<<<<<<<<<<<<
   *     def insertChild(self, index, Node child):
   *         self._cnode.insertChild(index, child._cnode)
   */
  __pyx_v_self->_cnode->addChild(__pyx_v_child->_cnode);

  /* "hit.pyx":247
   *     def parent(self):
   *         return _initpynode(self._cnode.root())
   *     def addChild(self, Node child):             # <<<<<<<<<<<<<<
   *         self._cnode.addChild(child._cnode)
   *     def insertChild(self, index, Node child):
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":249
 *     def addChild(self, Node child):
 *         self._cnode.addChild(child._cnode)
 *     def insertChild(self, index, Node child):             # <<<<<<<<<<<<<<
 *         self._cnode.insertChild(index, child._cnode)
 *     def children(self, node_type = NodeType.All):
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_53insertChild(PyObject * __pyx_v_self,
                                                    PyObject * __pyx_args,
                                                    PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_53insertChild(PyObject * __pyx_v_self,
                                  PyObject * __pyx_args,
                                  PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_index = 0;
  struct __pyx_obj_3hit_Node * __pyx_v_child = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("insertChild (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_index, &__pyx_n_s_child, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("insertChild", 1, 2, 2, 1);
            __PYX_ERR(0, 249, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insertChild") < 0))
          __PYX_ERR(0, 249, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = values[0];
    __pyx_v_child = ((struct __pyx_obj_3hit_Node *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insertChild", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 249, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.insertChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  if (unlikely(
          !__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_3hit_Node, 1, "child", 0)))
    __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_r = __pyx_pf_3hit_4Node_52insertChild(
      ((struct __pyx_obj_3hit_Node *)__pyx_v_self), __pyx_v_index, __pyx_v_child);

  /* function exit code */
  goto __pyx_L0;
__pyx_L1_error:;
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_52insertChild(struct __pyx_obj_3hit_Node * __pyx_v_self,
                                  PyObject * __pyx_v_index,
                                  struct __pyx_obj_3hit_Node * __pyx_v_child)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations int __pyx_t_1;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insertChild", 0);

  /* "hit.pyx":250
   *         self._cnode.addChild(child._cnode)
   *     def insertChild(self, index, Node child):
   *         self._cnode.insertChild(index, child._cnode)             # <<<<<<<<<<<<<<
   *     def children(self, node_type = NodeType.All):
   *         ckids = self._cnode.children(_nodetype_enum(node_type));
   */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_index);
  if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred()))
    __PYX_ERR(0, 250, __pyx_L1_error)
  __pyx_v_self->_cnode->insertChild(__pyx_t_1, __pyx_v_child->_cnode);

  /* "hit.pyx":249
   *     def addChild(self, Node child):
   *         self._cnode.addChild(child._cnode)
   *     def insertChild(self, index, Node child):             # <<<<<<<<<<<<<<
   *         self._cnode.insertChild(index, child._cnode)
   *     def children(self, node_type = NodeType.All):
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_AddTraceback("hit.Node.insertChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":251
 *     def insertChild(self, index, Node child):
 *         self._cnode.insertChild(index, child._cnode)
 *     def children(self, node_type = NodeType.All):             # <<<<<<<<<<<<<<
 *         ckids = self._cnode.children(_nodetype_enum(node_type));
 *         kids = []
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_4Node_55children(PyObject * __pyx_v_self,
                                                 PyObject * __pyx_args,
                                                 PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_4Node_55children(PyObject * __pyx_v_self,
                               PyObject * __pyx_args,
                               PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_node_type = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("children (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_node_type, 0};
    PyObject * values[1] = {0};
    values[0] = __pyx_k__7;
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (kw_args > 0)
          {
            PyObject * value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_type);
            if (value)
            {
              values[0] = value;
              kw_args--;
            }
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "children") < 0))
          __PYX_ERR(0, 251, __pyx_L3_error)
      }
    }
    else
    {
      switch (PyTuple_GET_SIZE(__pyx_args))
      {
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node_type = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("children", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 251, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Node.children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_4Node_54children(((struct __pyx_obj_3hit_Node *)__pyx_v_self),
                                           __pyx_v_node_type);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_4Node_54children(struct __pyx_obj_3hit_Node * __pyx_v_self,
                               PyObject * __pyx_v_node_type)
{
  std::vector<hit::Node *> __pyx_v_ckids;
  PyObject * __pyx_v_kids = NULL;
  hit::Node * __pyx_v_val;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  std::vector<hit::Node *>::iterator __pyx_t_2;
  hit::Node * __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("children", 0);

  /* "hit.pyx":252
   *         self._cnode.insertChild(index, child._cnode)
   *     def children(self, node_type = NodeType.All):
   *         ckids = self._cnode.children(_nodetype_enum(node_type));             # <<<<<<<<<<<<<<
   *         kids = []
   *         for val in ckids:
   */
  __pyx_v_ckids = __pyx_v_self->_cnode->children(__pyx_f_3hit__nodetype_enum(__pyx_v_node_type));

  /* "hit.pyx":253
   *     def children(self, node_type = NodeType.All):
   *         ckids = self._cnode.children(_nodetype_enum(node_type));
   *         kids = []             # <<<<<<<<<<<<<<
   *         for val in ckids:
   *             kids.append(_initpynode(val))
   */
  __pyx_t_1 = PyList_New(0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_kids = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":254
   *         ckids = self._cnode.children(_nodetype_enum(node_type));
   *         kids = []
   *         for val in ckids:             # <<<<<<<<<<<<<<
   *             kids.append(_initpynode(val))
   *         return kids
   */
  __pyx_t_2 = __pyx_v_ckids.begin();
  for (;;)
  {
    if (!(__pyx_t_2 != __pyx_v_ckids.end()))
      break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_val = __pyx_t_3;

    /* "hit.pyx":255
     *         kids = []
     *         for val in ckids:
     *             kids.append(_initpynode(val))             # <<<<<<<<<<<<<<
     *         return kids
     *
     */
    __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_val, NULL);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_kids, __pyx_t_1);
    if (unlikely(__pyx_t_4 == ((int)-1)))
      __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hit.pyx":254
     *         ckids = self._cnode.children(_nodetype_enum(node_type));
     *         kids = []
     *         for val in ckids:             # <<<<<<<<<<<<<<
     *             kids.append(_initpynode(val))
     *         return kids
     */
  }

  /* "hit.pyx":256
   *         for val in ckids:
   *             kids.append(_initpynode(val))
   *         return kids             # <<<<<<<<<<<<<<
   *
   * # this function is a hack to get around the fact that cython assumes all arguments to class
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_kids);
  __pyx_r = __pyx_v_kids;
  goto __pyx_L0;

/* "hit.pyx":251
 *     def insertChild(self, index, Node child):
 *         self._cnode.insertChild(index, child._cnode)
 *     def children(self, node_type = NodeType.All):             # <<<<<<<<<<<<<<
 *         ckids = self._cnode.children(_nodetype_enum(node_type));
 *         kids = []
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Node.children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kids);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":261
 * # constructors are python objects.  So the Node constructor does nothing and this function
 * # actually sets the internal cnode member pointer.
 * cdef _initpynode(chit.Node* n, own=False):             # <<<<<<<<<<<<<<
 *     pyn = Node(own=own)
 *     pyn._cnode = n
 */

static PyObject *
__pyx_f_3hit__initpynode(hit::Node * __pyx_v_n,
                         struct __pyx_opt_args_3hit__initpynode * __pyx_optional_args)
{
  PyObject * __pyx_v_own = ((PyObject *)Py_False);
  struct __pyx_obj_3hit_Node * __pyx_v_pyn = NULL;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_initpynode", 0);
  if (__pyx_optional_args)
  {
    if (__pyx_optional_args->__pyx_n > 0)
    {
      __pyx_v_own = __pyx_optional_args->own;
    }
  }

  /* "hit.pyx":262
   * # actually sets the internal cnode member pointer.
   * cdef _initpynode(chit.Node* n, own=False):
   *     pyn = Node(own=own)             # <<<<<<<<<<<<<<
   *     pyn._cnode = n
   *     return pyn
   */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_own, __pyx_v_own) < 0)
    __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_t_2 =
      __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3hit_Node), __pyx_empty_tuple, __pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_pyn = ((struct __pyx_obj_3hit_Node *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":263
   * cdef _initpynode(chit.Node* n, own=False):
   *     pyn = Node(own=own)
   *     pyn._cnode = n             # <<<<<<<<<<<<<<
   *     return pyn
   *
   */
  __pyx_v_pyn->_cnode = __pyx_v_n;

  /* "hit.pyx":264
   *     pyn = Node(own=own)
   *     pyn._cnode = n
   *     return pyn             # <<<<<<<<<<<<<<
   *
   * def parse(fname, input):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pyn));
  __pyx_r = ((PyObject *)__pyx_v_pyn);
  goto __pyx_L0;

/* "hit.pyx":261
 * # constructors are python objects.  So the Node constructor does nothing and this function
 * # actually sets the internal cnode member pointer.
 * cdef _initpynode(chit.Node* n, own=False):             # <<<<<<<<<<<<<<
 *     pyn = Node(own=own)
 *     pyn._cnode = n
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hit._initpynode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":266
 *     return pyn
 *
 * def parse(fname, input):             # <<<<<<<<<<<<<<
 *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8'))
 *     return _initpynode(node, own=True)
 */

/* Python wrapper */
static PyObject *
__pyx_pw_3hit_9parse(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3hit_9parse = {
    "parse",
    (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_9parse,
    METH_VARARGS | METH_KEYWORDS,
    0};
static PyObject *
__pyx_pw_3hit_9parse(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_fname = 0;
  PyObject * __pyx_v_input = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("parse (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_fname, &__pyx_n_s_input, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, 1);
            __PYX_ERR(0, 266, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "parse") < 0))
          __PYX_ERR(0, 266, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fname = values[0];
    __pyx_v_input = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("parse", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 266, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_8parse(__pyx_self, __pyx_v_fname, __pyx_v_input);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_8parse(CYTHON_UNUSED PyObject * __pyx_self,
                     PyObject * __pyx_v_fname,
                     PyObject * __pyx_v_input)
{
  hit::Node * __pyx_v_node;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  hit::Node * __pyx_t_6;
  struct __pyx_opt_args_3hit__initpynode __pyx_t_7;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("parse", 0);

  /* "hit.pyx":267
   *
   * def parse(fname, input):
   *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8')) #
   * <<<<<<<<<<<<<< return _initpynode(node, own=True)
   *
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_input, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  try
  {
    __pyx_t_6 = hit::parse(__pyx_t_4, __pyx_t_5);
  }
  catch (...)
  {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 267, __pyx_L1_error)
  }
  __pyx_v_node = __pyx_t_6;

  /* "hit.pyx":268
   * def parse(fname, input):
   *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8'))
   *     return _initpynode(node, own=True)             # <<<<<<<<<<<<<<
   *
   * cpdef explode(Node n):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.own = Py_True;
  __pyx_t_1 = __pyx_f_3hit__initpynode(__pyx_v_node, &__pyx_t_7);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":266
 *     return pyn
 *
 * def parse(fname, input):             # <<<<<<<<<<<<<<
 *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8'))
 *     return _initpynode(node, own=True)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hit.parse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":270
 *     return _initpynode(node, own=True)
 *
 * cpdef explode(Node n):             # <<<<<<<<<<<<<<
 *     n._cnode = chit.explode(n._cnode)
 *     return n
 */

static PyObject * __pyx_pw_3hit_11explode(PyObject * __pyx_self, PyObject * __pyx_v_n); /*proto*/
static PyObject *
__pyx_f_3hit_explode(struct __pyx_obj_3hit_Node * __pyx_v_n, CYTHON_UNUSED int __pyx_skip_dispatch)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations hit::Node * __pyx_t_1;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("explode", 0);

  /* "hit.pyx":271
   *
   * cpdef explode(Node n):
   *     n._cnode = chit.explode(n._cnode)             # <<<<<<<<<<<<<<
   *     return n
   *
   */
  try
  {
    __pyx_t_1 = hit::explode(__pyx_v_n->_cnode);
  }
  catch (...)
  {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 271, __pyx_L1_error)
  }
  __pyx_v_n->_cnode = __pyx_t_1;

  /* "hit.pyx":272
   * cpdef explode(Node n):
   *     n._cnode = chit.explode(n._cnode)
   *     return n             # <<<<<<<<<<<<<<
   *
   * cpdef merge(Node src, Node dst):
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

/* "hit.pyx":270
 *     return _initpynode(node, own=True)
 *
 * cpdef explode(Node n):             # <<<<<<<<<<<<<<
 *     n._cnode = chit.explode(n._cnode)
 *     return n
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_AddTraceback("hit.explode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_11explode(PyObject * __pyx_self, PyObject * __pyx_v_n); /*proto*/
static PyObject *
__pyx_pw_3hit_11explode(PyObject * __pyx_self, PyObject * __pyx_v_n)
{
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("explode (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_3hit_Node, 1, "n", 0)))
    __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_r = __pyx_pf_3hit_10explode(__pyx_self, ((struct __pyx_obj_3hit_Node *)__pyx_v_n));

  /* function exit code */
  goto __pyx_L0;
__pyx_L1_error:;
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_10explode(CYTHON_UNUSED PyObject * __pyx_self, struct __pyx_obj_3hit_Node * __pyx_v_n)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("explode", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit_explode(__pyx_v_n, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.explode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":274
 *     return n
 *
 * cpdef merge(Node src, Node dst):             # <<<<<<<<<<<<<<
 *     chit.merge(src._cnode, dst._cnode)
 *
 */

static PyObject * __pyx_pw_3hit_13merge(PyObject * __pyx_self,
                                        PyObject * __pyx_args,
                                        PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_f_3hit_merge(struct __pyx_obj_3hit_Node * __pyx_v_src,
                   struct __pyx_obj_3hit_Node * __pyx_v_dst,
                   CYTHON_UNUSED int __pyx_skip_dispatch)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);

  /* "hit.pyx":275
   *
   * cpdef merge(Node src, Node dst):
   *     chit.merge(src._cnode, dst._cnode)             # <<<<<<<<<<<<<<
   *
   * # LEXER
   */
  try
  {
    hit::merge(__pyx_v_src->_cnode, __pyx_v_dst->_cnode);
  }
  catch (...)
  {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 275, __pyx_L1_error)
  }

  /* "hit.pyx":274
   *     return n
   *
   * cpdef merge(Node src, Node dst):             # <<<<<<<<<<<<<<
   *     chit.merge(src._cnode, dst._cnode)
   *
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_AddTraceback("hit.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject * __pyx_pw_3hit_13merge(PyObject * __pyx_self,
                                        PyObject * __pyx_args,
                                        PyObject * __pyx_kwds); /*proto*/
static PyObject *
__pyx_pw_3hit_13merge(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  struct __pyx_obj_3hit_Node * __pyx_v_src = 0;
  struct __pyx_obj_3hit_Node * __pyx_v_dst = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("merge (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_src, &__pyx_n_s_dst, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_src)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dst)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, 1);
            __PYX_ERR(0, 274, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "merge") < 0))
          __PYX_ERR(0, 274, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_src = ((struct __pyx_obj_3hit_Node *)values[0]);
    __pyx_v_dst = ((struct __pyx_obj_3hit_Node *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("merge", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 274, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src), __pyx_ptype_3hit_Node, 1, "src", 0)))
    __PYX_ERR(0, 274, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dst), __pyx_ptype_3hit_Node, 1, "dst", 0)))
    __PYX_ERR(0, 274, __pyx_L1_error)
  __pyx_r = __pyx_pf_3hit_12merge(__pyx_self, __pyx_v_src, __pyx_v_dst);

  /* function exit code */
  goto __pyx_L0;
__pyx_L1_error:;
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_12merge(CYTHON_UNUSED PyObject * __pyx_self,
                      struct __pyx_obj_3hit_Node * __pyx_v_src,
                      struct __pyx_obj_3hit_Node * __pyx_v_dst)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("merge", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_3hit_merge(__pyx_v_src, __pyx_v_dst, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.merge", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":307
 *         line: line number
 *     """
 *     def __init__(self, ttype, value, name, offset, line):             # <<<<<<<<<<<<<<
 *         self.__token_type = ttype
 *         self.__name = name
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_1__init__(PyObject * __pyx_self,
                                                 PyObject * __pyx_args,
                                                 PyObject * __pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_1__init__ = {
    "__init__",
    (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_5Token_1__init__,
    METH_VARARGS | METH_KEYWORDS,
    0};
static PyObject *
__pyx_pw_3hit_5Token_1__init__(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_self = 0;
  PyObject * __pyx_v_ttype = 0;
  PyObject * __pyx_v_value = 0;
  PyObject * __pyx_v_name = 0;
  PyObject * __pyx_v_offset = 0;
  PyObject * __pyx_v_line = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_self,
                                             &__pyx_n_s_ttype,
                                             &__pyx_n_s_value,
                                             &__pyx_n_s_name,
                                             &__pyx_n_s_offset,
                                             &__pyx_n_s_line,
                                             0};
    PyObject * values[6] = {0, 0, 0, 0, 0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 6:
          values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
          CYTHON_FALLTHROUGH;
        case 5:
          values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
          CYTHON_FALLTHROUGH;
        case 4:
          values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
          CYTHON_FALLTHROUGH;
        case 3:
          values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
          CYTHON_FALLTHROUGH;
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ttype)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 1);
            __PYX_ERR(0, 307, __pyx_L3_error)
          }
          CYTHON_FALLTHROUGH;
        case 2:
          if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 2);
            __PYX_ERR(0, 307, __pyx_L3_error)
          }
          CYTHON_FALLTHROUGH;
        case 3:
          if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 3);
            __PYX_ERR(0, 307, __pyx_L3_error)
          }
          CYTHON_FALLTHROUGH;
        case 4:
          if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 4);
            __PYX_ERR(0, 307, __pyx_L3_error)
          }
          CYTHON_FALLTHROUGH;
        case 5:
          if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 5);
            __PYX_ERR(0, 307, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0))
          __PYX_ERR(0, 307, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 6)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_self = values[0];
    __pyx_v_ttype = values[1];
    __pyx_v_value = values[2];
    __pyx_v_name = values[3];
    __pyx_v_offset = values[4];
    __pyx_v_line = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 307, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Token.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_5Token___init__(__pyx_self,
                                          __pyx_v_self,
                                          __pyx_v_ttype,
                                          __pyx_v_value,
                                          __pyx_v_name,
                                          __pyx_v_offset,
                                          __pyx_v_line);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token___init__(CYTHON_UNUSED PyObject * __pyx_self,
                              PyObject * __pyx_v_self,
                              PyObject * __pyx_v_ttype,
                              PyObject * __pyx_v_value,
                              PyObject * __pyx_v_name,
                              PyObject * __pyx_v_offset,
                              PyObject * __pyx_v_line)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hit.pyx":308
   *     """
   *     def __init__(self, ttype, value, name, offset, line):
   *         self.__token_type = ttype             # <<<<<<<<<<<<<<
   *         self.__name = name
   *         self.__value = value
   */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Token__token_type, __pyx_v_ttype) < 0)
    __PYX_ERR(0, 308, __pyx_L1_error)

  /* "hit.pyx":309
   *     def __init__(self, ttype, value, name, offset, line):
   *         self.__token_type = ttype
   *         self.__name = name             # <<<<<<<<<<<<<<
   *         self.__value = value
   *         self.__offset = offset
   */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Token__name, __pyx_v_name) < 0)
    __PYX_ERR(0, 309, __pyx_L1_error)

  /* "hit.pyx":310
   *         self.__token_type = ttype
   *         self.__name = name
   *         self.__value = value             # <<<<<<<<<<<<<<
   *         self.__offset = offset
   *         self.__line = line
   */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Token__value, __pyx_v_value) < 0)
    __PYX_ERR(0, 310, __pyx_L1_error)

  /* "hit.pyx":311
   *         self.__name = name
   *         self.__value = value
   *         self.__offset = offset             # <<<<<<<<<<<<<<
   *         self.__line = line
   *
   */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Token__offset, __pyx_v_offset) < 0)
    __PYX_ERR(0, 311, __pyx_L1_error)

  /* "hit.pyx":312
   *         self.__value = value
   *         self.__offset = offset
   *         self.__line = line             # <<<<<<<<<<<<<<
   *
   *     @property
   */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_Token__line, __pyx_v_line) < 0)
    __PYX_ERR(0, 312, __pyx_L1_error)

  /* "hit.pyx":307
   *         line: line number
   *     """
   *     def __init__(self, ttype, value, name, offset, line):             # <<<<<<<<<<<<<<
   *         self.__token_type = ttype
   *         self.__name = name
   */

  /* function exit code */
  __pyx_r = Py_None;
  __Pyx_INCREF(Py_None);
  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_AddTraceback("hit.Token.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":315
 *
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.__token_type
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_3type(PyObject * __pyx_self,
                                             PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_3type = {
    "type", (PyCFunction)__pyx_pw_3hit_5Token_3type, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_3type(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("type (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_2type(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_2type(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("type", 0);

  /* "hit.pyx":316
   *     @property
   *     def type(self):
   *         return self.__token_type             # <<<<<<<<<<<<<<
   *
   *     @property
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__token_type);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":315
 *
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.__token_type
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Token.type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":319
 *
 *     @property
 *     def value(self):             # <<<<<<<<<<<<<<
 *         return self.__value
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_5value(PyObject * __pyx_self,
                                              PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_5value = {
    "value", (PyCFunction)__pyx_pw_3hit_5Token_5value, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_5value(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("value (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_4value(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_4value(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("value", 0);

  /* "hit.pyx":320
   *     @property
   *     def value(self):
   *         return self.__value             # <<<<<<<<<<<<<<
   *
   *     @property
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__value);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":319
 *
 *     @property
 *     def value(self):             # <<<<<<<<<<<<<<
 *         return self.__value
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Token.value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":323
 *
 *     @property
 *     def offset(self):             # <<<<<<<<<<<<<<
 *         return self.__offset
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_7offset(PyObject * __pyx_self,
                                               PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_7offset = {
    "offset", (PyCFunction)__pyx_pw_3hit_5Token_7offset, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_7offset(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("offset (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_6offset(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_6offset(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("offset", 0);

  /* "hit.pyx":324
   *     @property
   *     def offset(self):
   *         return self.__offset             # <<<<<<<<<<<<<<
   *
   *     @property
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__offset);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":323
 *
 *     @property
 *     def offset(self):             # <<<<<<<<<<<<<<
 *         return self.__offset
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Token.offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":327
 *
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.__name
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_9name(PyObject * __pyx_self,
                                             PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_9name = {
    "name", (PyCFunction)__pyx_pw_3hit_5Token_9name, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_9name(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("name (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_8name(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_8name(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("name", 0);

  /* "hit.pyx":328
   *     @property
   *     def name(self):
   *         return self.__name             # <<<<<<<<<<<<<<
   *
   *     @property
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__name);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":327
 *
 *     @property
 *     def name(self):             # <<<<<<<<<<<<<<
 *         return self.__name
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Token.name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":331
 *
 *     @property
 *     def line(self):             # <<<<<<<<<<<<<<
 *         return self.__line
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_11line(PyObject * __pyx_self,
                                              PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_11line = {
    "line", (PyCFunction)__pyx_pw_3hit_5Token_11line, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_11line(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("line (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_10line(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_10line(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("line", 0);

  /* "hit.pyx":332
   *     @property
   *     def line(self):
   *         return self.__line             # <<<<<<<<<<<<<<
   *
   *     def __str__(self):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__line);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":331
 *
 *     @property
 *     def line(self):             # <<<<<<<<<<<<<<
 *         return self.__line
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hit.Token.line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":334
 *         return self.__line
 *
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name, self.__offset,
 * self.__line)
 *
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_13__str__(PyObject * __pyx_self,
                                                 PyObject * __pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_13__str__ = {
    "__str__", (PyCFunction)__pyx_pw_3hit_5Token_13__str__, METH_O, 0};
static PyObject *
__pyx_pw_3hit_5Token_13__str__(PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_3hit_5Token_12__str__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_12__str__(CYTHON_UNUSED PyObject * __pyx_self, PyObject * __pyx_v_self)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  PyObject * __pyx_t_5 = NULL;
  PyObject * __pyx_t_6 = NULL;
  PyObject * __pyx_t_7 = NULL;
  PyObject * __pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject * __pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "hit.pyx":335
   *
   *     def __str__(self):
   *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name,
   * self.__offset, self.__line)             # <<<<<<<<<<<<<<
   *
   *     def __eq__(self, other):
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_u__8, __pyx_n_s_format);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__token_type);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__value);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__name);
  if (unlikely(!__pyx_t_5))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__offset);
  if (unlikely(!__pyx_t_6))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_Token__line);
  if (unlikely(!__pyx_t_7))
    __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_8))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_9 = 1;
    }
  }
#if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2))
  {
    PyObject * __pyx_temp[6] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_9, 5 + __pyx_t_9);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7);
    __pyx_t_7 = 0;
  }
  else
#endif
#if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2))
  {
    PyObject * __pyx_temp[6] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_9, 5 + __pyx_t_9);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7);
    __pyx_t_7 = 0;
  }
  else
#endif
  {
    __pyx_t_10 = PyTuple_New(5 + __pyx_t_9);
    if (unlikely(!__pyx_t_10))
      __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8)
    {
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
      __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_10, 0 + __pyx_t_9, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_10, 1 + __pyx_t_9, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_10, 2 + __pyx_t_9, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 3 + __pyx_t_9, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 4 + __pyx_t_9, __pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, NULL);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "hit.pyx":334
 *         return self.__line
 *
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name, self.__offset,
 * self.__line)
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hit.Token.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":337
 *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name, self.__offset,
 * self.__line)
 *
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Token):
 *             return all([self.type == other.type, self.value == other.value, self.name ==
 * other.name,
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_5Token_15__eq__(PyObject * __pyx_self,
                                                PyObject * __pyx_args,
                                                PyObject * __pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_3hit_5Token_15__eq__ = {
    "__eq__",
    (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_5Token_15__eq__,
    METH_VARARGS | METH_KEYWORDS,
    0};
static PyObject *
__pyx_pw_3hit_5Token_15__eq__(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_self = 0;
  PyObject * __pyx_v_other = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_self, &__pyx_n_s_other, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_self)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_other)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1);
            __PYX_ERR(0, 337, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0))
          __PYX_ERR(0, 337, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 337, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.Token.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_5Token_14__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_5Token_14__eq__(CYTHON_UNUSED PyObject * __pyx_self,
                              PyObject * __pyx_v_self,
                              PyObject * __pyx_v_other)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject * __pyx_t_4 = NULL;
  PyObject * __pyx_t_5 = NULL;
  PyObject * __pyx_t_6 = NULL;
  PyObject * __pyx_t_7 = NULL;
  PyObject * __pyx_t_8 = NULL;
  PyObject * __pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "hit.pyx":338
   *
   *     def __eq__(self, other):
   *         if isinstance(other, Token):             # <<<<<<<<<<<<<<
   *             return all([self.type == other.type, self.value == other.value, self.name ==
   * other.name, self.offset == other.offset, self.line == other.line])
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Token);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_other, __pyx_t_1);
  if (unlikely(__pyx_t_2 == ((int)-1)))
    __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3)
  {

    /* "hit.pyx":339
     *     def __eq__(self, other):
     *         if isinstance(other, Token):
     *             return all([self.type == other.type, self.value == other.value, self.name ==
     * other.name,             # <<<<<<<<<<<<<< self.offset == other.offset, self.line ==
     * other.line]) elif isinstance(other, TokenType):
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_type);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_type);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_5);
    if (unlikely(!__pyx_t_5))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_value);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_value);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_6);
    if (unlikely(!__pyx_t_6))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_name);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_name);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_7);
    if (unlikely(!__pyx_t_7))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hit.pyx":340
     *         if isinstance(other, Token):
     *             return all([self.type == other.type, self.value == other.value, self.name ==
     * other.name, self.offset == other.offset, self.line == other.line])             #
     * <<<<<<<<<<<<<< elif isinstance(other, TokenType): return self.type == other
     */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_offset);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_offset);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_8);
    if (unlikely(!__pyx_t_8))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_line);
    if (unlikely(!__pyx_t_1))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_n_s_line);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_9);
    if (unlikely(!__pyx_t_9))
      __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hit.pyx":339
     *     def __eq__(self, other):
     *         if isinstance(other, Token):
     *             return all([self.type == other.type, self.value == other.value, self.name ==
     * other.name,             # <<<<<<<<<<<<<< self.offset == other.offset, self.line ==
     * other.line]) elif isinstance(other, TokenType):
     */
    __pyx_t_4 = PyList_New(5);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_4, 4, __pyx_t_9);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_4);
    if (unlikely(!__pyx_t_9))
      __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "hit.pyx":338
     *
     *     def __eq__(self, other):
     *         if isinstance(other, Token):             # <<<<<<<<<<<<<<
     *             return all([self.type == other.type, self.value == other.value, self.name ==
     * other.name, self.offset == other.offset, self.line == other.line])
     */
  }

  /* "hit.pyx":341
   *             return all([self.type == other.type, self.value == other.value, self.name ==
   * other.name, self.offset == other.offset, self.line == other.line]) elif isinstance(other,
   * TokenType):             # <<<<<<<<<<<<<< return self.type == other else:
   */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TokenType);
  if (unlikely(!__pyx_t_9))
    __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_other, __pyx_t_9);
  if (unlikely(__pyx_t_3 == ((int)-1)))
    __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (likely(__pyx_t_2))
  {

    /* "hit.pyx":342
     *                         self.offset == other.offset, self.line == other.line])
     *         elif isinstance(other, TokenType):
     *             return self.type == other             # <<<<<<<<<<<<<<
     *         else:
     *             raise TypeError("Comparison is only valid with Token and TokenType, {}
     * provided".format(type(other)))
     */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_type);
    if (unlikely(!__pyx_t_9))
      __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_9, __pyx_v_other, Py_EQ);
    __Pyx_XGOTREF(__pyx_t_4);
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "hit.pyx":341
     *             return all([self.type == other.type, self.value == other.value, self.name ==
     * other.name, self.offset == other.offset, self.line == other.line]) elif isinstance(other,
     * TokenType):             # <<<<<<<<<<<<<< return self.type == other else:
     */
  }

  /* "hit.pyx":344
   *             return self.type == other
   *         else:
   *             raise TypeError("Comparison is only valid with Token and TokenType, {}
   * provided".format(type(other)))             # <<<<<<<<<<<<<<
   *
   * def tokenize(fname, text):
   */
  /*else*/ {
    __pyx_t_9 =
        __Pyx_PyObject_GetAttrStr(__pyx_kp_u_Comparison_is_only_valid_with_To, __pyx_n_s_format);
    if (unlikely(!__pyx_t_9))
      __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9)))
    {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 =
        (__pyx_t_8)
            ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, ((PyObject *)Py_TYPE(__pyx_v_other)))
            : __Pyx_PyObject_CallOneArg(__pyx_t_9, ((PyObject *)Py_TYPE(__pyx_v_other)));
    __Pyx_XDECREF(__pyx_t_8);
    __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4))
      __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_4);
    if (unlikely(!__pyx_t_9))
      __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_9, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_9);
    __pyx_t_9 = 0;
    __PYX_ERR(0, 344, __pyx_L1_error)
  }

/* "hit.pyx":337
 *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name, self.__offset,
 * self.__line)
 *
 *     def __eq__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Token):
 *             return all([self.type == other.type, self.value == other.value, self.name ==
 * other.name,
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hit.Token.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hit.pyx":346
 *             raise TypeError("Comparison is only valid with Token and TokenType, {}
 * provided".format(type(other)))
 *
 * def tokenize(fname, text):             # <<<<<<<<<<<<<<
 *     """
 *     Uses the lexer in lex.h/cc to create a list of tokens, which are converted to the python
 * Token
 */

/* Python wrapper */
static PyObject * __pyx_pw_3hit_15tokenize(PyObject * __pyx_self,
                                           PyObject * __pyx_args,
                                           PyObject * __pyx_kwds); /*proto*/
static char __pyx_doc_3hit_14tokenize[] =
    "\n    Uses the lexer in lex.h/cc to create a list of tokens, which are converted to the "
    "python Token\n    class above and returned.\n\n    Inputs:\n        fname[str]: Filename of "
    "the hit string being to be tokenified\n        text[str]: The content of the file\n    ";
static PyMethodDef __pyx_mdef_3hit_15tokenize = {
    "tokenize",
    (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_15tokenize,
    METH_VARARGS | METH_KEYWORDS,
    __pyx_doc_3hit_14tokenize};
static PyObject *
__pyx_pw_3hit_15tokenize(PyObject * __pyx_self, PyObject * __pyx_args, PyObject * __pyx_kwds)
{
  PyObject * __pyx_v_fname = 0;
  PyObject * __pyx_v_text = 0;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject * __pyx_r = 0;
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("tokenize (wrapper)", 0);
  {
    static PyObject ** __pyx_pyargnames[] = {&__pyx_n_s_fname, &__pyx_n_s_text, 0};
    PyObject * values[2] = {0, 0};
    if (unlikely(__pyx_kwds))
    {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args)
      {
        case 2:
          values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
          CYTHON_FALLTHROUGH;
        case 1:
          values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
          CYTHON_FALLTHROUGH;
        case 0:
          break;
        default:
          goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args)
      {
        case 0:
          if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fname)) != 0))
            kw_args--;
          else
            goto __pyx_L5_argtuple_error;
          CYTHON_FALLTHROUGH;
        case 1:
          if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0))
            kw_args--;
          else
          {
            __Pyx_RaiseArgtupleInvalid("tokenize", 1, 2, 2, 1);
            __PYX_ERR(0, 346, __pyx_L3_error)
          }
      }
      if (unlikely(kw_args > 0))
      {
        if (unlikely(__Pyx_ParseOptionalKeywords(
                         __pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "tokenize") < 0))
          __PYX_ERR(0, 346, __pyx_L3_error)
      }
    }
    else if (PyTuple_GET_SIZE(__pyx_args) != 2)
    {
      goto __pyx_L5_argtuple_error;
    }
    else
    {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fname = values[0];
    __pyx_v_text = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
__pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("tokenize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args));
  __PYX_ERR(0, 346, __pyx_L3_error)
__pyx_L3_error:;
  __Pyx_AddTraceback("hit.tokenize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
__pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3hit_14tokenize(__pyx_self, __pyx_v_fname, __pyx_v_text);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_pf_3hit_14tokenize(CYTHON_UNUSED PyObject * __pyx_self,
                         PyObject * __pyx_v_fname,
                         PyObject * __pyx_v_text)
{
  std::vector<hit::Token> __pyx_v_ctokens;
  PyObject * __pyx_v_tokens = NULL;
  std::vector<hit::Token>::size_type __pyx_v_i;
  PyObject * __pyx_v_ttype = NULL;
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  std::string __pyx_t_4;
  std::string __pyx_t_5;
  std::vector<hit::Token> __pyx_t_6;
  std::vector<hit::Token>::size_type __pyx_t_7;
  std::vector<hit::Token>::size_type __pyx_t_8;
  std::vector<hit::Token>::size_type __pyx_t_9;
  int __pyx_t_10;
  PyObject * __pyx_t_11 = NULL;
  PyObject * __pyx_t_12 = NULL;
  PyObject * __pyx_t_13 = NULL;
  PyObject * __pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject * __pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tokenize", 0);

  /* "hit.pyx":355
   *         text[str]: The content of the file
   *     """
   *     cdef vector[chit.Token] ctokens = chit.tokenize(fname.encode('utf-8'),
   * text.encode('utf-8'))             # <<<<<<<<<<<<<< tokens = list() for i in
   * range(ctokens.size()):
   */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_fname, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_text, __pyx_n_s_encode);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2)))
  {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3))
    {
      PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_u_utf_8)
                          : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_u_utf_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1);
  if (unlikely(PyErr_Occurred()))
    __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  try
  {
    __pyx_t_6 = hit::tokenize(__pyx_t_4, __pyx_t_5);
  }
  catch (...)
  {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_v_ctokens = __pyx_t_6;

  /* "hit.pyx":356
   *     """
   *     cdef vector[chit.Token] ctokens = chit.tokenize(fname.encode('utf-8'),
   * text.encode('utf-8')) tokens = list()             # <<<<<<<<<<<<<< for i in
   * range(ctokens.size()): if <int>ctokens[i].type == <int>chit.TokenError:
   */
  __pyx_t_1 = PyList_New(0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tokens = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":357
   *     cdef vector[chit.Token] ctokens = chit.tokenize(fname.encode('utf-8'),
   * text.encode('utf-8')) tokens = list() for i in range(ctokens.size()):             #
   * <<<<<<<<<<<<<< if <int>ctokens[i].type == <int>chit.TokenError: ttype = TokenType.ERROR
   */
  __pyx_t_7 = __pyx_v_ctokens.size();
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9 += 1)
  {
    __pyx_v_i = __pyx_t_9;

    /* "hit.pyx":358
     *     tokens = list()
     *     for i in range(ctokens.size()):
     *         if <int>ctokens[i].type == <int>chit.TokenError:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.ERROR
     *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Error)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":359
       *     for i in range(ctokens.size()):
       *         if <int>ctokens[i].type == <int>chit.TokenError:
       *             ttype = TokenType.ERROR             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
       *             ttype = TokenType.EOF
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ERROR);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":358
       *     tokens = list()
       *     for i in range(ctokens.size()):
       *         if <int>ctokens[i].type == <int>chit.TokenError:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.ERROR
       *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":360
     *         if <int>ctokens[i].type == <int>chit.TokenError:
     *             ttype = TokenType.ERROR
     *         elif <int>ctokens[i].type == <int>chit.TokenEOF:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.EOF
     *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::EOF)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":361
       *             ttype = TokenType.ERROR
       *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
       *             ttype = TokenType.EOF             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
       *             ttype = TokenType.EQUALS
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_EOF);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":360
       *         if <int>ctokens[i].type == <int>chit.TokenError:
       *             ttype = TokenType.ERROR
       *         elif <int>ctokens[i].type == <int>chit.TokenEOF:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.EOF
       *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":362
     *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
     *             ttype = TokenType.EOF
     *         elif <int>ctokens[i].type == <int>chit.TokenEquals:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.EQUALS
     *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Equals)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":363
       *             ttype = TokenType.EOF
       *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
       *             ttype = TokenType.EQUALS             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
       *             ttype = TokenType.LEFTBRACKET
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_EQUALS);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":362
       *         elif <int>ctokens[i].type == <int>chit.TokenEOF:
       *             ttype = TokenType.EOF
       *         elif <int>ctokens[i].type == <int>chit.TokenEquals:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.EQUALS
       *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":364
     *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
     *             ttype = TokenType.EQUALS
     *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.LEFTBRACKET
     *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:
     */
    __pyx_t_10 =
        ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::LeftBracket)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":365
       *             ttype = TokenType.EQUALS
       *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
       *             ttype = TokenType.LEFTBRACKET             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:
       *             ttype = TokenType.RIGHTBRACKET
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LEFTBRACKET);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 365, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":364
       *         elif <int>ctokens[i].type == <int>chit.TokenEquals:
       *             ttype = TokenType.EQUALS
       *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:             #
       * <<<<<<<<<<<<<< ttype = TokenType.LEFTBRACKET elif <int>ctokens[i].type ==
       * <int>chit.TokenRightBracket:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":366
     *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
     *             ttype = TokenType.LEFTBRACKET
     *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:             #
     * <<<<<<<<<<<<<< ttype = TokenType.RIGHTBRACKET elif <int>ctokens[i].type ==
     * <int>chit.TokenIdent:
     */
    __pyx_t_10 =
        ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::RightBracket)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":367
       *             ttype = TokenType.LEFTBRACKET
       *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:
       *             ttype = TokenType.RIGHTBRACKET             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenIdent:
       *             ttype = TokenType.IDENT
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_RIGHTBRACKET);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 367, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":366
       *         elif <int>ctokens[i].type == <int>chit.TokenLeftBracket:
       *             ttype = TokenType.LEFTBRACKET
       *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:             #
       * <<<<<<<<<<<<<< ttype = TokenType.RIGHTBRACKET elif <int>ctokens[i].type ==
       * <int>chit.TokenIdent:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":368
     *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:
     *             ttype = TokenType.RIGHTBRACKET
     *         elif <int>ctokens[i].type == <int>chit.TokenIdent:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.IDENT
     *         elif <int>ctokens[i].type == <int>chit.TokenPath:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Ident)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":369
       *             ttype = TokenType.RIGHTBRACKET
       *         elif <int>ctokens[i].type == <int>chit.TokenIdent:
       *             ttype = TokenType.IDENT             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenPath:
       *             ttype = TokenType.PATH
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IDENT);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 369, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":368
       *         elif <int>ctokens[i].type == <int>chit.TokenRightBracket:
       *             ttype = TokenType.RIGHTBRACKET
       *         elif <int>ctokens[i].type == <int>chit.TokenIdent:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.IDENT
       *         elif <int>ctokens[i].type == <int>chit.TokenPath:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":370
     *         elif <int>ctokens[i].type == <int>chit.TokenIdent:
     *             ttype = TokenType.IDENT
     *         elif <int>ctokens[i].type == <int>chit.TokenPath:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.PATH
     *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Path)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":371
       *             ttype = TokenType.IDENT
       *         elif <int>ctokens[i].type == <int>chit.TokenPath:
       *             ttype = TokenType.PATH             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
       *             ttype = TokenType.NUMBER
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_PATH);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":370
       *         elif <int>ctokens[i].type == <int>chit.TokenIdent:
       *             ttype = TokenType.IDENT
       *         elif <int>ctokens[i].type == <int>chit.TokenPath:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.PATH
       *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":372
     *         elif <int>ctokens[i].type == <int>chit.TokenPath:
     *             ttype = TokenType.PATH
     *         elif <int>ctokens[i].type == <int>chit.TokenNumber:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.NUMBER
     *         elif <int>ctokens[i].type == <int>chit.TokenString:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Number)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":373
       *             ttype = TokenType.PATH
       *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
       *             ttype = TokenType.NUMBER             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenString:
       *             ttype = TokenType.STRING
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_NUMBER);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":372
       *         elif <int>ctokens[i].type == <int>chit.TokenPath:
       *             ttype = TokenType.PATH
       *         elif <int>ctokens[i].type == <int>chit.TokenNumber:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.NUMBER
       *         elif <int>ctokens[i].type == <int>chit.TokenString:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":374
     *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
     *             ttype = TokenType.NUMBER
     *         elif <int>ctokens[i].type == <int>chit.TokenString:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.STRING
     *         elif <int>ctokens[i].type == <int>chit.TokenComment:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::String)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":375
       *             ttype = TokenType.NUMBER
       *         elif <int>ctokens[i].type == <int>chit.TokenString:
       *             ttype = TokenType.STRING             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenComment:
       *             ttype = TokenType.COMMENT
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_STRING);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":374
       *         elif <int>ctokens[i].type == <int>chit.TokenNumber:
       *             ttype = TokenType.NUMBER
       *         elif <int>ctokens[i].type == <int>chit.TokenString:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.STRING
       *         elif <int>ctokens[i].type == <int>chit.TokenComment:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":376
     *         elif <int>ctokens[i].type == <int>chit.TokenString:
     *             ttype = TokenType.STRING
     *         elif <int>ctokens[i].type == <int>chit.TokenComment:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.COMMENT
     *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
     */
    __pyx_t_10 = ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::Comment)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":377
       *             ttype = TokenType.STRING
       *         elif <int>ctokens[i].type == <int>chit.TokenComment:
       *             ttype = TokenType.COMMENT             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
       *             ttype = TokenType.INLINECOMMENT
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_COMMENT);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 377, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":376
       *         elif <int>ctokens[i].type == <int>chit.TokenString:
       *             ttype = TokenType.STRING
       *         elif <int>ctokens[i].type == <int>chit.TokenComment:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.COMMENT
       *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":378
     *         elif <int>ctokens[i].type == <int>chit.TokenComment:
     *             ttype = TokenType.COMMENT
     *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:             #
     * <<<<<<<<<<<<<< ttype = TokenType.INLINECOMMENT elif <int>ctokens[i].type ==
     * <int>chit.TokenBlankLine:
     */
    __pyx_t_10 =
        ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::InlineComment)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":379
       *             ttype = TokenType.COMMENT
       *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
       *             ttype = TokenType.INLINECOMMENT             # <<<<<<<<<<<<<<
       *         elif <int>ctokens[i].type == <int>chit.TokenBlankLine:
       *             ttype = TokenType.BLANKLINE
       */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INLINECOMMENT);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 379, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hit.pyx":378
       *         elif <int>ctokens[i].type == <int>chit.TokenComment:
       *             ttype = TokenType.COMMENT
       *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:             #
       * <<<<<<<<<<<<<< ttype = TokenType.INLINECOMMENT elif <int>ctokens[i].type ==
       * <int>chit.TokenBlankLine:
       */
      goto __pyx_L5;
    }

    /* "hit.pyx":380
     *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
     *             ttype = TokenType.INLINECOMMENT
     *         elif <int>ctokens[i].type == <int>chit.TokenBlankLine:             # <<<<<<<<<<<<<<
     *             ttype = TokenType.BLANKLINE
     *         tokens.append(Token(ttype, ctokens[i].val, ctokens[i].name, ctokens[i].offset,
     * ctokens[i].line))
     */
    __pyx_t_10 =
        ((((int)(__pyx_v_ctokens[__pyx_v_i]).type) == ((int)hit::TokType::BlankLine)) != 0);
    if (__pyx_t_10)
    {

      /* "hit.pyx":381
       *             ttype = TokenType.INLINECOMMENT
       *         elif <int>ctokens[i].type == <int>chit.TokenBlankLine:
       *             ttype = TokenType.BLANKLINE             # <<<<<<<<<<<<<<
       *         tokens.append(Token(ttype, ctokens[i].val, ctokens[i].name, ctokens[i].offset,
       * ctokens[i].line)) return tokens
       */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_TokenType);
      if (unlikely(!__pyx_t_2))
        __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BLANKLINE);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ttype, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hit.pyx":380
       *         elif <int>ctokens[i].type == <int>chit.TokenInlineComment:
       *             ttype = TokenType.INLINECOMMENT
       *         elif <int>ctokens[i].type == <int>chit.TokenBlankLine:             # <<<<<<<<<<<<<<
       *             ttype = TokenType.BLANKLINE
       *         tokens.append(Token(ttype, ctokens[i].val, ctokens[i].name, ctokens[i].offset,
       * ctokens[i].line))
       */
    }
  __pyx_L5:;

    /* "hit.pyx":382
     *         elif <int>ctokens[i].type == <int>chit.TokenBlankLine:
     *             ttype = TokenType.BLANKLINE
     *         tokens.append(Token(ttype, ctokens[i].val, ctokens[i].name, ctokens[i].offset,
     * ctokens[i].line))             # <<<<<<<<<<<<<< return tokens
     */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Token);
    if (unlikely(!__pyx_t_2))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(!__pyx_v_ttype))
    {
      __Pyx_RaiseUnboundLocalError("ttype");
      __PYX_ERR(0, 382, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_ctokens[__pyx_v_i]).val);
    if (unlikely(!__pyx_t_3))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 =
        __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_ctokens[__pyx_v_i]).name);
    if (unlikely(!__pyx_t_11))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyInt_FromSize_t((__pyx_v_ctokens[__pyx_v_i]).offset);
    if (unlikely(!__pyx_t_12))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyInt_From_int((__pyx_v_ctokens[__pyx_v_i]).line);
    if (unlikely(!__pyx_t_13))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2)))
    {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_14))
      {
        PyObject * function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_15 = 1;
      }
    }
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2))
    {
      PyObject * __pyx_temp[6] = {
          __pyx_t_14, __pyx_v_ttype, __pyx_t_3, __pyx_t_11, __pyx_t_12, __pyx_t_13};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_15, 5 + __pyx_t_15);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13);
      __pyx_t_13 = 0;
    }
    else
#endif
#if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_2))
    {
      PyObject * __pyx_temp[6] = {
          __pyx_t_14, __pyx_v_ttype, __pyx_t_3, __pyx_t_11, __pyx_t_12, __pyx_t_13};
      __pyx_t_1 =
          __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp + 1 - __pyx_t_15, 5 + __pyx_t_15);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14);
      __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12);
      __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13);
      __pyx_t_13 = 0;
    }
    else
#endif
    {
      __pyx_t_16 = PyTuple_New(5 + __pyx_t_15);
      if (unlikely(!__pyx_t_16))
        __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_14)
      {
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14);
        __pyx_t_14 = NULL;
      }
      __Pyx_INCREF(__pyx_v_ttype);
      __Pyx_GIVEREF(__pyx_v_ttype);
      PyTuple_SET_ITEM(__pyx_t_16, 0 + __pyx_t_15, __pyx_v_ttype);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_16, 1 + __pyx_t_15, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_16, 2 + __pyx_t_15, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_16, 3 + __pyx_t_15, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_16, 4 + __pyx_t_15, __pyx_t_13);
      __pyx_t_3 = 0;
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_16, NULL);
      if (unlikely(!__pyx_t_1))
        __PYX_ERR(0, 382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_16);
      __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_tokens, __pyx_t_1);
    if (unlikely(__pyx_t_17 == ((int)-1)))
      __PYX_ERR(0, 382, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "hit.pyx":383
   *             ttype = TokenType.BLANKLINE
   *         tokens.append(Token(ttype, ctokens[i].val, ctokens[i].name, ctokens[i].offset,
   * ctokens[i].line)) return tokens             # <<<<<<<<<<<<<<
   */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tokens);
  __pyx_r = __pyx_v_tokens;
  goto __pyx_L0;

/* "hit.pyx":346
 *             raise TypeError("Comparison is only valid with Token and TokenType, {}
 * provided".format(type(other)))
 *
 * def tokenize(fname, text):             # <<<<<<<<<<<<<<
 *     """
 *     Uses the lexer in lex.h/cc to create a list of tokens, which are converted to the python
 * Token
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("hit.tokenize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
__pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tokens);
  __Pyx_XDECREF(__pyx_v_ttype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 *
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             #
 * <<<<<<<<<<<<<< cdef Py_ssize_t length = 0 cdef const char* data =
 * __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string
__pyx_convert_string_from_py_std__in_string(PyObject * __pyx_v_o)
{
  Py_ssize_t __pyx_v_length;
  char const * __pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations char const * __pyx_t_1;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
   * @cname("__pyx_convert_string_from_py_std__in_string")
   * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
   *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
   *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
   *     return string(data, length)
   */
  __pyx_v_length = 0;

  /* "string.from_py":15
   * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
   *     cdef Py_ssize_t length = 0
   *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             #
   * <<<<<<<<<<<<<< return string(data, length)
   *
   */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length));
  if (unlikely(__pyx_t_1 == ((char const *)NULL)))
    __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
   *     cdef Py_ssize_t length = 0
   *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
   *     return string(data, length)             # <<<<<<<<<<<<<<
   *
   *
   */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

/* "string.from_py":13
 *
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             #
 * <<<<<<<<<<<<<< cdef Py_ssize_t length = 0 cdef const char* data =
 * __Pyx_PyObject_AsStringAndSize(o, &length)
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 *
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyObject_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

static CYTHON_INLINE PyObject *
__pyx_convert_PyObject_string_to_py_std__in_string(std::string const & __pyx_v_s)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
   * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
   *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
   * cdef extern from *:
   *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "string.to_py":31
 *
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyObject_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 *
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

static CYTHON_INLINE PyObject *
__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const & __pyx_v_s)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
   * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
   *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
   * cdef extern from *:
   *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "string.to_py":37
 *
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 *
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyStr_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

static CYTHON_INLINE PyObject *
__pyx_convert_PyStr_string_to_py_std__in_string(std::string const & __pyx_v_s)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
   * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
   *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
   * cdef extern from *:
   *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "string.to_py":43
 *
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyStr_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 *
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

static CYTHON_INLINE PyObject *
__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const & __pyx_v_s)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
   * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
   *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
   * cdef extern from *:
   *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "string.to_py":49
 *
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size()) cdef extern from *:
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 *
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 *
 */

static CYTHON_INLINE PyObject *
__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const & __pyx_v_s)
{
  PyObject * __pyx_r = NULL;
  __Pyx_RefNannyDeclarations PyObject * __pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
   * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
   *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
   *
   */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size());
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

/* "string.to_py":55
 *
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s): #
 * <<<<<<<<<<<<<< return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 *
 */

/* function exit code */
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string",
                     __pyx_clineno,
                     __pyx_lineno,
                     __pyx_filename);
  __pyx_r = 0;
__pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *
__pyx_tp_new_3hit_Formatter(PyTypeObject * t, PyObject * a, PyObject * k)
{
  struct __pyx_obj_3hit_Formatter * p;
  PyObject * o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0))
  {
    o = (*t->tp_alloc)(t, 0);
  }
  else
  {
    o = (PyObject *)PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o))
    return 0;
  p = ((struct __pyx_obj_3hit_Formatter *)o);
  new ((void *)&(p->_formatter)) hit::Formatter();
  if (unlikely(__pyx_pw_3hit_9Formatter_1__cinit__(o, a, k) < 0))
    goto bad;
  return o;
bad:
  Py_DECREF(o);
  o = 0;
  return NULL;
}

static void
__pyx_tp_dealloc_3hit_Formatter(PyObject * o)
{
  struct __pyx_obj_3hit_Formatter * p = (struct __pyx_obj_3hit_Formatter *)o;
#if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) &&
               Py_TYPE(o)->tp_finalize) &&
      (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o)))
  {
    if (PyObject_CallFinalizerFromDealloc(o))
      return;
  }
#endif
  __Pyx_call_destructor(p->_formatter);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3hit_Formatter[] = {
    {"addPattern",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_9Formatter_3addPattern,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"config",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_9Formatter_5config,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"format",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_9Formatter_7format,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"formatTree", (PyCFunction)__pyx_pw_3hit_9Formatter_9formatTree, METH_O, 0},
    {"__reduce_cython__",
     (PyCFunction)__pyx_pw_3hit_9Formatter_11__reduce_cython__,
     METH_NOARGS,
     0},
    {"__setstate_cython__", (PyCFunction)__pyx_pw_3hit_9Formatter_13__setstate_cython__, METH_O, 0},
    {0, 0, 0, 0}};

static PyTypeObject __pyx_type_3hit_Formatter = {
    PyVarObject_HEAD_INIT(0, 0) "hit.Formatter", /*tp_name*/
    sizeof(struct __pyx_obj_3hit_Formatter),     /*tp_basicsize*/
    0,                                           /*tp_itemsize*/
    __pyx_tp_dealloc_3hit_Formatter,             /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
    0,                                           /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
    0,                                           /*tp_vectorcall_offset*/
#endif
    0,                                           /*tp_getattr*/
    0,                                           /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                           /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
    0,                                           /*tp_as_async*/
#endif
    0,                                           /*tp_repr*/
    0,                                           /*tp_as_number*/
    0,                                           /*tp_as_sequence*/
    0,                                           /*tp_as_mapping*/
    0,                                           /*tp_hash*/
    0,                                           /*tp_call*/
    0,                                           /*tp_str*/
    0,                                           /*tp_getattro*/
    0,                                           /*tp_setattro*/
    0,                                           /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_VERSION_TAG | Py_TPFLAGS_CHECKTYPES |
        Py_TPFLAGS_HAVE_NEWBUFFER | Py_TPFLAGS_BASETYPE, /*tp_flags*/
    0,                                                   /*tp_doc*/
    0,                                                   /*tp_traverse*/
    0,                                                   /*tp_clear*/
    0,                                                   /*tp_richcompare*/
    0,                                                   /*tp_weaklistoffset*/
    0,                                                   /*tp_iter*/
    0,                                                   /*tp_iternext*/
    __pyx_methods_3hit_Formatter,                        /*tp_methods*/
    0,                                                   /*tp_members*/
    0,                                                   /*tp_getset*/
    0,                                                   /*tp_base*/
    0,                                                   /*tp_dict*/
    0,                                                   /*tp_descr_get*/
    0,                                                   /*tp_descr_set*/
    0,                                                   /*tp_dictoffset*/
    0,                                                   /*tp_init*/
    0,                                                   /*tp_alloc*/
    __pyx_tp_new_3hit_Formatter,                         /*tp_new*/
    0,                                                   /*tp_free*/
    0,                                                   /*tp_is_gc*/
    0,                                                   /*tp_bases*/
    0,                                                   /*tp_mro*/
    0,                                                   /*tp_cache*/
    0,                                                   /*tp_subclasses*/
    0,                                                   /*tp_weaklist*/
    0,                                                   /*tp_del*/
    0,                                                   /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                                   /*tp_finalize*/
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,                                                   /*tp_vectorcall*/
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,                                                   /*tp_print*/
#endif
};

static PyObject *
__pyx_tp_new_3hit_Node(PyTypeObject * t, PyObject * a, PyObject * k)
{
  struct __pyx_obj_3hit_Node * p;
  PyObject * o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0))
  {
    o = (*t->tp_alloc)(t, 0);
  }
  else
  {
    o = (PyObject *)PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o))
    return 0;
  p = ((struct __pyx_obj_3hit_Node *)o);
  p->fname = ((PyObject *)Py_None);
  Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_3hit_4Node_7__cinit__(o, a, k) < 0))
    goto bad;
  return o;
bad:
  Py_DECREF(o);
  o = 0;
  return NULL;
}

static void
__pyx_tp_dealloc_3hit_Node(PyObject * o)
{
  struct __pyx_obj_3hit_Node * p = (struct __pyx_obj_3hit_Node *)o;
#if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) &&
               Py_TYPE(o)->tp_finalize) &&
      (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o)))
  {
    if (PyObject_CallFinalizerFromDealloc(o))
      return;
  }
#endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_3hit_4Node_9__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->fname);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3hit_Node[] = {
    {"NewSection", (PyCFunction)__pyx_pw_3hit_4Node_1NewSection, METH_O, 0},
    {"NewComment", (PyCFunction)__pyx_pw_3hit_4Node_3NewComment, METH_O, 0},
    {"NewBlank", (PyCFunction)__pyx_pw_3hit_4Node_5NewBlank, METH_NOARGS, 0},
    {"__deepcopy__", (PyCFunction)__pyx_pw_3hit_4Node_11__deepcopy__, METH_O, 0},
    {"__reduce__", (PyCFunction)__pyx_pw_3hit_4Node_13__reduce__, METH_NOARGS, 0},
    {"remove", (PyCFunction)__pyx_pw_3hit_4Node_17remove, METH_NOARGS, 0},
    {"render",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_19render,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"line", (PyCFunction)__pyx_pw_3hit_4Node_21line, METH_NOARGS, 0},
    {"filename", (PyCFunction)__pyx_pw_3hit_4Node_23filename, METH_NOARGS, 0},
    {"path", (PyCFunction)__pyx_pw_3hit_4Node_25path, METH_NOARGS, 0},
    {"fullpath", (PyCFunction)__pyx_pw_3hit_4Node_27fullpath, METH_NOARGS, 0},
    {"type", (PyCFunction)__pyx_pw_3hit_4Node_29type, METH_NOARGS, 0},
    {"kind", (PyCFunction)__pyx_pw_3hit_4Node_31kind, METH_NOARGS, 0},
    {"raw", (PyCFunction)__pyx_pw_3hit_4Node_33raw, METH_NOARGS, 0},
    {"find", (PyCFunction)__pyx_pw_3hit_4Node_35find, METH_O, 0},
    {"param",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_37param,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"setParam",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_39setParam,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"setText", (PyCFunction)__pyx_pw_3hit_4Node_41setText, METH_O, 0},
    {"walk",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_43walk,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"clone", (PyCFunction)__pyx_pw_3hit_4Node_45clone, METH_NOARGS, 0},
    {"root", (PyCFunction)__pyx_pw_3hit_4Node_47root, METH_NOARGS, 0},
    {"parent", (PyCFunction)__pyx_pw_3hit_4Node_49parent, METH_NOARGS, 0},
    {"addChild", (PyCFunction)__pyx_pw_3hit_4Node_51addChild, METH_O, 0},
    {"insertChild",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_53insertChild,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"children",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_4Node_55children,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {0, 0, 0, 0}};

static PyTypeObject __pyx_type_3hit_Node = {
    PyVarObject_HEAD_INIT(0, 0) "hit.Node", /*tp_name*/
    sizeof(struct __pyx_obj_3hit_Node),     /*tp_basicsize*/
    0,                                      /*tp_itemsize*/
    __pyx_tp_dealloc_3hit_Node,             /*tp_dealloc*/
#if PY_VERSION_HEX < 0x030800b4
    0,                                      /*tp_print*/
#endif
#if PY_VERSION_HEX >= 0x030800b4
    0,                                      /*tp_vectorcall_offset*/
#endif
    0,                                      /*tp_getattr*/
    0,                                      /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                      /*tp_compare*/
#endif
#if PY_MAJOR_VERSION >= 3
    0,                                      /*tp_as_async*/
#endif
    __pyx_pw_3hit_4Node_15__repr__,         /*tp_repr*/
    0,                                      /*tp_as_number*/
    0,                                      /*tp_as_sequence*/
    0,                                      /*tp_as_mapping*/
    0,                                      /*tp_hash*/
    0,                                      /*tp_call*/
    0,                                      /*tp_str*/
    0,                                      /*tp_getattro*/
    0,                                      /*tp_setattro*/
    0,                                      /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_VERSION_TAG | Py_TPFLAGS_CHECKTYPES |
        Py_TPFLAGS_HAVE_NEWBUFFER | Py_TPFLAGS_BASETYPE, /*tp_flags*/
    0,                                                   /*tp_doc*/
    0,                                                   /*tp_traverse*/
    0,                                                   /*tp_clear*/
    0,                                                   /*tp_richcompare*/
    0,                                                   /*tp_weaklistoffset*/
    0,                                                   /*tp_iter*/
    0,                                                   /*tp_iternext*/
    __pyx_methods_3hit_Node,                             /*tp_methods*/
    0,                                                   /*tp_members*/
    0,                                                   /*tp_getset*/
    0,                                                   /*tp_base*/
    0,                                                   /*tp_dict*/
    0,                                                   /*tp_descr_get*/
    0,                                                   /*tp_descr_set*/
    0,                                                   /*tp_dictoffset*/
    0,                                                   /*tp_init*/
    0,                                                   /*tp_alloc*/
    __pyx_tp_new_3hit_Node,                              /*tp_new*/
    0,                                                   /*tp_free*/
    0,                                                   /*tp_is_gc*/
    0,                                                   /*tp_bases*/
    0,                                                   /*tp_mro*/
    0,                                                   /*tp_cache*/
    0,                                                   /*tp_subclasses*/
    0,                                                   /*tp_weaklist*/
    0,                                                   /*tp_del*/
    0,                                                   /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                                   /*tp_finalize*/
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,                                                   /*tp_vectorcall*/
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,                                                   /*tp_print*/
#endif
};

static PyMethodDef __pyx_methods[] = {
    {"NewField",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_1NewField,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"NewSection", (PyCFunction)__pyx_pw_3hit_3NewSection, METH_O, 0},
    {"NewComment",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_5NewComment,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {"NewBlank", (PyCFunction)__pyx_pw_3hit_7NewBlank, METH_NOARGS, 0},
    {"explode", (PyCFunction)__pyx_pw_3hit_11explode, METH_O, 0},
    {"merge",
     (PyCFunction)(void *)(PyCFunctionWithKeywords)__pyx_pw_3hit_13merge,
     METH_VARARGS | METH_KEYWORDS,
     0},
    {0, 0, 0, 0}};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject * __pyx_pymod_create(PyObject * spec, PyModuleDef * def); /*proto*/
static int __pyx_pymod_exec_hit(PyObject * module);                       /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {{Py_mod_create, (void *)__pyx_pymod_create},
                                                   {Py_mod_exec, (void *)__pyx_pymod_exec_hit},
                                                   {0, NULL}};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "hit",
    0, /* m_doc */
#if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
#else
    -1,   /* m_size */
#endif
    __pyx_methods /* m_methods */,
#if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
#else
    NULL, /* m_reload */
#endif
    NULL,                  /* m_traverse */
    NULL,                  /* m_clear */
    NULL                   /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
#define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
#define CYTHON_SMALL_CODE __attribute__((cold))
#else
#define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_kp_s_A_python_Enum_object_for_defini,
     __pyx_k_A_python_Enum_object_for_defini,
     sizeof(__pyx_k_A_python_Enum_object_for_defini),
     0,
     0,
     1,
     0},
    {&__pyx_kp_s_A_python_version_of_the_Token_s,
     __pyx_k_A_python_version_of_the_Token_s,
     sizeof(__pyx_k_A_python_version_of_the_Token_s),
     0,
     0,
     1,
     0},
    {&__pyx_n_s_All, __pyx_k_All, sizeof(__pyx_k_All), 0, 0, 1, 1},
    {&__pyx_n_u_All, __pyx_k_All, sizeof(__pyx_k_All), 0, 1, 0, 1},
    {&__pyx_n_s_BLANKLINE, __pyx_k_BLANKLINE, sizeof(__pyx_k_BLANKLINE), 0, 0, 1, 1},
    {&__pyx_n_s_Blank, __pyx_k_Blank, sizeof(__pyx_k_Blank), 0, 0, 1, 1},
    {&__pyx_n_u_Blank, __pyx_k_Blank, sizeof(__pyx_k_Blank), 0, 1, 0, 1},
    {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
    {&__pyx_n_u_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 1, 0, 1},
    {&__pyx_n_s_COMMENT, __pyx_k_COMMENT, sizeof(__pyx_k_COMMENT), 0, 0, 1, 1},
    {&__pyx_n_s_Comment, __pyx_k_Comment, sizeof(__pyx_k_Comment), 0, 0, 1, 1},
    {&__pyx_n_u_Comment, __pyx_k_Comment, sizeof(__pyx_k_Comment), 0, 1, 0, 1},
    {&__pyx_kp_u_Comparison_is_only_valid_with_To,
     __pyx_k_Comparison_is_only_valid_with_To,
     sizeof(__pyx_k_Comparison_is_only_valid_with_To),
     0,
     1,
     0,
     0},
    {&__pyx_n_s_EOF, __pyx_k_EOF, sizeof(__pyx_k_EOF), 0, 0, 1, 1},
    {&__pyx_n_s_EQUALS, __pyx_k_EQUALS, sizeof(__pyx_k_EQUALS), 0, 0, 1, 1},
    {&__pyx_n_s_ERROR, __pyx_k_ERROR, sizeof(__pyx_k_ERROR), 0, 0, 1, 1},
    {&__pyx_n_s_Enum, __pyx_k_Enum, sizeof(__pyx_k_Enum), 0, 0, 1, 1},
    {&__pyx_n_s_Field, __pyx_k_Field, sizeof(__pyx_k_Field), 0, 0, 1, 1},
    {&__pyx_n_u_Field, __pyx_k_Field, sizeof(__pyx_k_Field), 0, 1, 0, 1},
    {&__pyx_n_s_FieldKind, __pyx_k_FieldKind, sizeof(__pyx_k_FieldKind), 0, 0, 1, 1},
    {&__pyx_n_s_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 0, 1, 1},
    {&__pyx_n_u_Float, __pyx_k_Float, sizeof(__pyx_k_Float), 0, 1, 0, 1},
    {&__pyx_n_s_Formatter, __pyx_k_Formatter, sizeof(__pyx_k_Formatter), 0, 0, 1, 1},
    {&__pyx_n_s_IDENT, __pyx_k_IDENT, sizeof(__pyx_k_IDENT), 0, 0, 1, 1},
    {&__pyx_n_s_INLINECOMMENT, __pyx_k_INLINECOMMENT, sizeof(__pyx_k_INLINECOMMENT), 0, 0, 1, 1},
    {&__pyx_n_s_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 0, 1, 1},
    {&__pyx_n_u_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 1, 0, 1},
    {&__pyx_n_s_LEFTBRACKET, __pyx_k_LEFTBRACKET, sizeof(__pyx_k_LEFTBRACKET), 0, 0, 1, 1},
    {&__pyx_n_s_NUMBER, __pyx_k_NUMBER, sizeof(__pyx_k_NUMBER), 0, 0, 1, 1},
    {&__pyx_n_s_NewBlank, __pyx_k_NewBlank, sizeof(__pyx_k_NewBlank), 0, 0, 1, 1},
    {&__pyx_n_s_NewComment, __pyx_k_NewComment, sizeof(__pyx_k_NewComment), 0, 0, 1, 1},
    {&__pyx_n_s_NewSection, __pyx_k_NewSection, sizeof(__pyx_k_NewSection), 0, 0, 1, 1},
    {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
    {&__pyx_n_s_NodeType, __pyx_k_NodeType, sizeof(__pyx_k_NodeType), 0, 0, 1, 1},
    {&__pyx_n_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 1},
    {&__pyx_n_s_NotField, __pyx_k_NotField, sizeof(__pyx_k_NotField), 0, 0, 1, 1},
    {&__pyx_n_s_PATH, __pyx_k_PATH, sizeof(__pyx_k_PATH), 0, 0, 1, 1},
    {&__pyx_n_s_RIGHTBRACKET, __pyx_k_RIGHTBRACKET, sizeof(__pyx_k_RIGHTBRACKET), 0, 0, 1, 1},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_STRING, __pyx_k_STRING, sizeof(__pyx_k_STRING), 0, 0, 1, 1},
    {&__pyx_n_s_Section, __pyx_k_Section, sizeof(__pyx_k_Section), 0, 0, 1, 1},
    {&__pyx_n_u_Section, __pyx_k_Section, sizeof(__pyx_k_Section), 0, 1, 0, 1},
    {&__pyx_n_s_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 0, 1, 1},
    {&__pyx_n_u_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 1, 0, 1},
    {&__pyx_n_s_Token, __pyx_k_Token, sizeof(__pyx_k_Token), 0, 0, 1, 1},
    {&__pyx_n_s_TokenType, __pyx_k_TokenType, sizeof(__pyx_k_TokenType), 0, 0, 1, 1},
    {&__pyx_n_s_Token___eq, __pyx_k_Token___eq, sizeof(__pyx_k_Token___eq), 0, 0, 1, 1},
    {&__pyx_n_s_Token___init, __pyx_k_Token___init, sizeof(__pyx_k_Token___init), 0, 0, 1, 1},
    {&__pyx_n_s_Token___str, __pyx_k_Token___str, sizeof(__pyx_k_Token___str), 0, 0, 1, 1},
    {&__pyx_n_s_Token__line, __pyx_k_Token__line, sizeof(__pyx_k_Token__line), 0, 0, 1, 1},
    {&__pyx_n_s_Token__name, __pyx_k_Token__name, sizeof(__pyx_k_Token__name), 0, 0, 1, 1},
    {&__pyx_n_s_Token__offset, __pyx_k_Token__offset, sizeof(__pyx_k_Token__offset), 0, 0, 1, 1},
    {&__pyx_n_s_Token__token_type,
     __pyx_k_Token__token_type,
     sizeof(__pyx_k_Token__token_type),
     0,
     0,
     1,
     1},
    {&__pyx_n_s_Token__value, __pyx_k_Token__value, sizeof(__pyx_k_Token__value), 0, 0, 1, 1},
    {&__pyx_n_s_Token_line, __pyx_k_Token_line, sizeof(__pyx_k_Token_line), 0, 0, 1, 1},
    {&__pyx_n_s_Token_name, __pyx_k_Token_name, sizeof(__pyx_k_Token_name), 0, 0, 1, 1},
    {&__pyx_n_s_Token_offset, __pyx_k_Token_offset, sizeof(__pyx_k_Token_offset), 0, 0, 1, 1},
    {&__pyx_n_s_Token_type, __pyx_k_Token_type, sizeof(__pyx_k_Token_type), 0, 0, 1, 1},
    {&__pyx_n_s_Token_value, __pyx_k_Token_value, sizeof(__pyx_k_Token_value), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_u_Unknown, __pyx_k_Unknown, sizeof(__pyx_k_Unknown), 0, 1, 0, 1},
    {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
    {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
    {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
    {&__pyx_n_s_canonical_section_markers,
     __pyx_k_canonical_section_markers,
     sizeof(__pyx_k_canonical_section_markers),
     0,
     0,
     1,
     1},
    {&__pyx_n_s_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 0, 1, 1},
    {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback,
     __pyx_k_cline_in_traceback,
     sizeof(__pyx_k_cline_in_traceback),
     0,
     0,
     1,
     1},
    {&__pyx_n_s_clone, __pyx_k_clone, sizeof(__pyx_k_clone), 0, 0, 1, 1},
    {&__pyx_n_s_content, __pyx_k_content, sizeof(__pyx_k_content), 0, 0, 1, 1},
    {&__pyx_n_s_ctokens, __pyx_k_ctokens, sizeof(__pyx_k_ctokens), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_dst, __pyx_k_dst, sizeof(__pyx_k_dst), 0, 0, 1, 1},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_enter, __pyx_k_enter, sizeof(__pyx_k_enter), 0, 0, 1, 1},
    {&__pyx_n_s_enum, __pyx_k_enum, sizeof(__pyx_k_enum), 0, 0, 1, 1},
    {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
    {&__pyx_n_s_exit, __pyx_k_exit, sizeof(__pyx_k_exit), 0, 0, 1, 1},
    {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_fullpath, __pyx_k_fullpath, sizeof(__pyx_k_fullpath), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_hit, __pyx_k_hit, sizeof(__pyx_k_hit), 0, 0, 1, 1},
    {&__pyx_kp_s_hit_pyx, __pyx_k_hit_pyx, sizeof(__pyx_k_hit_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_indent, __pyx_k_indent, sizeof(__pyx_k_indent), 0, 0, 1, 1},
    {&__pyx_n_s_indent_text, __pyx_k_indent_text, sizeof(__pyx_k_indent_text), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 0, 1, 1},
    {&__pyx_n_s_is_inline, __pyx_k_is_inline, sizeof(__pyx_k_is_inline), 0, 0, 1, 1},
    {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
    {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_maxlen, __pyx_k_maxlen, sizeof(__pyx_k_maxlen), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non,
     __pyx_k_no_default___reduce___due_to_non,
     sizeof(__pyx_k_no_default___reduce___due_to_non),
     0,
     0,
     1,
     0},
    {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
    {&__pyx_n_s_node_type, __pyx_k_node_type, sizeof(__pyx_k_node_type), 0, 0, 1, 1},
    {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
    {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
    {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
    {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
    {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
    {&__pyx_n_s_own, __pyx_k_own, sizeof(__pyx_k_own), 0, 0, 1, 1},
    {&__pyx_n_s_parse, __pyx_k_parse, sizeof(__pyx_k_parse), 0, 0, 1, 1},
    {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
    {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_u_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 1, 0, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_render, __pyx_k_render, sizeof(__pyx_k_render), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython,
     __pyx_k_setstate_cython,
     sizeof(__pyx_k_setstate_cython),
     0,
     0,
     1,
     1},
    {&__pyx_n_s_src, __pyx_k_src, sizeof(__pyx_k_src), 0, 0, 1, 1},
    {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
    {&__pyx_n_s_style_file, __pyx_k_style_file, sizeof(__pyx_k_style_file), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
    {&__pyx_n_s_tokenize, __pyx_k_tokenize, sizeof(__pyx_k_tokenize), 0, 0, 1, 1},
    {&__pyx_n_s_tokens, __pyx_k_tokens, sizeof(__pyx_k_tokens), 0, 0, 1, 1},
    {&__pyx_n_s_ttype, __pyx_k_ttype, sizeof(__pyx_k_ttype), 0, 0, 1, 1},
    {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
    {&__pyx_kp_u_unknown_Field_Kind,
     __pyx_k_unknown_Field_Kind,
     sizeof(__pyx_k_unknown_Field_Kind),
     0,
     1,
     0,
     0},
    {&__pyx_kp_u_unknown_NodeType,
     __pyx_k_unknown_NodeType,
     sizeof(__pyx_k_unknown_NodeType),
     0,
     1,
     0,
     0},
    {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
    {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_walk, __pyx_k_walk, sizeof(__pyx_k_walk), 0, 0, 1, 1},
    {&__pyx_n_s_walker, __pyx_k_walker, sizeof(__pyx_k_walker), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}};
static CYTHON_SMALL_CODE int
__Pyx_InitCachedBuiltins(void)
{
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object);
  if (!__pyx_builtin_object)
    __PYX_ERR(0, 10, __pyx_L1_error)
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property);
  if (!__pyx_builtin_property)
    __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError);
  if (!__pyx_builtin_RuntimeError)
    __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open);
  if (!__pyx_builtin_open)
    __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError);
  if (!__pyx_builtin_TypeError)
    __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all);
  if (!__pyx_builtin_all)
    __PYX_ERR(0, 339, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range);
  if (!__pyx_builtin_range)
    __PYX_ERR(0, 357, __pyx_L1_error)
  return 0;
__pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int
__Pyx_InitCachedConstants(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hit.pyx":74
   *         self._formatter = chit.Formatter()
   *         if style_file != '':
   *             with open(style_file, 'r') as f:             # <<<<<<<<<<<<<<
   *                 data = f.read()
   *             self._formatter = chit.Formatter(style_file, data)
   */
  __pyx_tuple__2 = PyTuple_Pack(3, Py_None, Py_None, Py_None);
  if (unlikely(!__pyx_tuple__2))
    __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
   * def __reduce_cython__(self):
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             #
   * <<<<<<<<<<<<<< def __setstate_cython__(self, __pyx_state): raise TypeError("no default
   * __reduce__ due to non-trivial __cinit__")
   */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non);
  if (unlikely(!__pyx_tuple__3))
    __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
   * def __setstate_cython__(self, __pyx_state):
   *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             #
   * <<<<<<<<<<<<<<
   */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non);
  if (unlikely(!__pyx_tuple__4))
    __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "hit.pyx":10
   * from libcpp.vector cimport vector
   *
   * class NodeType(object):             # <<<<<<<<<<<<<<
   *     All = 'All'
   *     Section = 'Section'
   */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_builtin_object);
  if (unlikely(!__pyx_tuple__9))
    __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "hit.pyx":30
   *     raise RuntimeError('unknown NodeType ' + node_type)
   *
   * class FieldKind(object):             # <<<<<<<<<<<<<<
   *     Int = 'Int'
   *     Float = 'Float'
   */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_builtin_object);
  if (unlikely(!__pyx_tuple__10))
    __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "hit.pyx":266
   *     return pyn
   *
   * def parse(fname, input):             # <<<<<<<<<<<<<<
   *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8'))
   *     return _initpynode(node, own=True)
   */
  __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_fname, __pyx_n_s_input, __pyx_n_s_node);
  if (unlikely(!__pyx_tuple__11))
    __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject *)__Pyx_PyCode_New(2,
                                                   0,
                                                   3,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__11,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_parse,
                                                   266,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__12))
    __PYX_ERR(0, 266, __pyx_L1_error)

  /* "hit.pyx":297
   *     ERROR = 200        # "hit::TokType::Error"
   *
   * class Token(object):             # <<<<<<<<<<<<<<
   *     """
   *     A python version of the Token struct in lex.h
   */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_builtin_object);
  if (unlikely(!__pyx_tuple__13))
    __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "hit.pyx":307
   *         line: line number
   *     """
   *     def __init__(self, ttype, value, name, offset, line):             # <<<<<<<<<<<<<<
   *         self.__token_type = ttype
   *         self.__name = name
   */
  __pyx_tuple__14 = PyTuple_Pack(6,
                                 __pyx_n_s_self,
                                 __pyx_n_s_ttype,
                                 __pyx_n_s_value,
                                 __pyx_n_s_name,
                                 __pyx_n_s_offset,
                                 __pyx_n_s_line);
  if (unlikely(!__pyx_tuple__14))
    __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject *)__Pyx_PyCode_New(6,
                                                   0,
                                                   6,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__14,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_init,
                                                   307,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__15))
    __PYX_ERR(0, 307, __pyx_L1_error)

  /* "hit.pyx":315
   *
   *     @property
   *     def type(self):             # <<<<<<<<<<<<<<
   *         return self.__token_type
   *
   */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__16))
    __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__16,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_type,
                                                   315,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__17))
    __PYX_ERR(0, 315, __pyx_L1_error)

  /* "hit.pyx":319
   *
   *     @property
   *     def value(self):             # <<<<<<<<<<<<<<
   *         return self.__value
   *
   */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__18))
    __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__18,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_value,
                                                   319,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__19))
    __PYX_ERR(0, 319, __pyx_L1_error)

  /* "hit.pyx":323
   *
   *     @property
   *     def offset(self):             # <<<<<<<<<<<<<<
   *         return self.__offset
   *
   */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__20))
    __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__20,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_offset,
                                                   323,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__21))
    __PYX_ERR(0, 323, __pyx_L1_error)

  /* "hit.pyx":327
   *
   *     @property
   *     def name(self):             # <<<<<<<<<<<<<<
   *         return self.__name
   *
   */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__22))
    __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__22,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_name,
                                                   327,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__23))
    __PYX_ERR(0, 327, __pyx_L1_error)

  /* "hit.pyx":331
   *
   *     @property
   *     def line(self):             # <<<<<<<<<<<<<<
   *         return self.__line
   *
   */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__24))
    __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__24,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_line,
                                                   331,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__25))
    __PYX_ERR(0, 331, __pyx_L1_error)

  /* "hit.pyx":334
   *         return self.__line
   *
   *     def __str__(self):             # <<<<<<<<<<<<<<
   *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name,
   * self.__offset, self.__line)
   *
   */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_self);
  if (unlikely(!__pyx_tuple__26))
    __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject *)__Pyx_PyCode_New(1,
                                                   0,
                                                   1,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__26,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_str,
                                                   334,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__27))
    __PYX_ERR(0, 334, __pyx_L1_error)

  /* "hit.pyx":337
   *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name,
   * self.__offset, self.__line)
   *
   *     def __eq__(self, other):             # <<<<<<<<<<<<<<
   *         if isinstance(other, Token):
   *             return all([self.type == other.type, self.value == other.value, self.name ==
   * other.name,
   */
  __pyx_tuple__28 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other);
  if (unlikely(!__pyx_tuple__28))
    __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject *)__Pyx_PyCode_New(2,
                                                   0,
                                                   2,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__28,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_eq,
                                                   337,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__29))
    __PYX_ERR(0, 337, __pyx_L1_error)

  /* "hit.pyx":346
   *             raise TypeError("Comparison is only valid with Token and TokenType, {}
   * provided".format(type(other)))
   *
   * def tokenize(fname, text):             # <<<<<<<<<<<<<<
   *     """
   *     Uses the lexer in lex.h/cc to create a list of tokens, which are converted to the python
   * Token
   */
  __pyx_tuple__30 = PyTuple_Pack(6,
                                 __pyx_n_s_fname,
                                 __pyx_n_s_text,
                                 __pyx_n_s_ctokens,
                                 __pyx_n_s_tokens,
                                 __pyx_n_s_i,
                                 __pyx_n_s_ttype);
  if (unlikely(!__pyx_tuple__30))
    __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject *)__Pyx_PyCode_New(2,
                                                   0,
                                                   6,
                                                   0,
                                                   CO_OPTIMIZED | CO_NEWLOCALS,
                                                   __pyx_empty_bytes,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_tuple__30,
                                                   __pyx_empty_tuple,
                                                   __pyx_empty_tuple,
                                                   __pyx_kp_s_hit_pyx,
                                                   __pyx_n_s_tokenize,
                                                   346,
                                                   __pyx_empty_bytes);
  if (unlikely(!__pyx_codeobj__31))
    __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
__pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int
__Pyx_InitGlobals(void)
{
  if (__Pyx_InitStrings(__pyx_string_tab) < 0)
    __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0);
  if (unlikely(!__pyx_int_0))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1);
  if (unlikely(!__pyx_int_1))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10);
  if (unlikely(!__pyx_int_10))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_11 = PyInt_FromLong(11);
  if (unlikely(!__pyx_int_11))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12);
  if (unlikely(!__pyx_int_12))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_20 = PyInt_FromLong(20);
  if (unlikely(!__pyx_int_20))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_21 = PyInt_FromLong(21);
  if (unlikely(!__pyx_int_21))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_22 = PyInt_FromLong(22);
  if (unlikely(!__pyx_int_22))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_23 = PyInt_FromLong(23);
  if (unlikely(!__pyx_int_23))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30);
  if (unlikely(!__pyx_int_30))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_31 = PyInt_FromLong(31);
  if (unlikely(!__pyx_int_31))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100);
  if (unlikely(!__pyx_int_100))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200);
  if (unlikely(!__pyx_int_200))
    __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
__pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void);     /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void);       /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void);     /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int
__Pyx_modinit_global_init_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int
__Pyx_modinit_variable_export_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int
__Pyx_modinit_function_export_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int
__Pyx_modinit_type_init_code(void)
{
  __Pyx_RefNannyDeclarations int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3hit_Formatter) < 0)
    __PYX_ERR(0, 68, __pyx_L1_error)
#if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3hit_Formatter.tp_print = 0;
#endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) &&
      likely(!__pyx_type_3hit_Formatter.tp_dictoffset &&
             __pyx_type_3hit_Formatter.tp_getattro == PyObject_GenericGetAttr))
  {
    __pyx_type_3hit_Formatter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Formatter, (PyObject *)&__pyx_type_3hit_Formatter) < 0)
    __PYX_ERR(0, 68, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *)&__pyx_type_3hit_Formatter) < 0)
    __PYX_ERR(0, 68, __pyx_L1_error)
  __pyx_ptype_3hit_Formatter = &__pyx_type_3hit_Formatter;
  if (PyType_Ready(&__pyx_type_3hit_Node) < 0)
    __PYX_ERR(0, 93, __pyx_L1_error)
#if PY_VERSION_HEX < 0x030800B1
  __pyx_type_3hit_Node.tp_print = 0;
#endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) &&
      likely(!__pyx_type_3hit_Node.tp_dictoffset &&
             __pyx_type_3hit_Node.tp_getattro == PyObject_GenericGetAttr))
  {
    __pyx_type_3hit_Node.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Node, (PyObject *)&__pyx_type_3hit_Node) < 0)
    __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_ptype_3hit_Node = &__pyx_type_3hit_Node;
  __Pyx_RefNannyFinishContext();
  return 0;
__pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int
__Pyx_modinit_type_import_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int
__Pyx_modinit_variable_import_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int
__Pyx_modinit_function_import_code(void)
{
  __Pyx_RefNannyDeclarations __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif

#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inithit(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC
inithit(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_hit(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC
PyInit_hit(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int
__Pyx_check_single_interpreter(void)
{
#if PY_VERSION_HEX >= 0x030700A1
  static PY_INT64_T main_interpreter_id = -1;
  PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
  if (main_interpreter_id == -1)
  {
    main_interpreter_id = current_id;
    return (unlikely(current_id == -1)) ? -1 : 0;
  }
  else if (unlikely(main_interpreter_id != current_id))
#else
  static PyInterpreterState * main_interpreter = NULL;
  PyInterpreterState * current_interpreter = PyThreadState_Get()->interp;
  if (!main_interpreter)
  {
    main_interpreter = current_interpreter;
  }
  else if (unlikely(main_interpreter != current_interpreter))
#endif
  {
    PyErr_SetString(PyExc_ImportError,
                    "Interpreter change detected - this module can only be loaded into one "
                    "interpreter per process.");
    return -1;
  }
  return 0;
}
static CYTHON_SMALL_CODE int
__Pyx_copy_spec_to_module(PyObject * spec,
                          PyObject * moddict,
                          const char * from_name,
                          const char * to_name,
                          int allow_none)
{
  PyObject * value = PyObject_GetAttrString(spec, from_name);
  int result = 0;
  if (likely(value))
  {
    if (allow_none || value != Py_None)
    {
      result = PyDict_SetItemString(moddict, to_name, value);
    }
    Py_DECREF(value);
  }
  else if (PyErr_ExceptionMatches(PyExc_AttributeError))
  {
    PyErr_Clear();
  }
  else
  {
    result = -1;
  }
  return result;
}
static CYTHON_SMALL_CODE PyObject *
__pyx_pymod_create(PyObject * spec, CYTHON_UNUSED PyModuleDef * def)
{
  PyObject *module = NULL, *moddict, *modname;
  if (__Pyx_check_single_interpreter())
    return NULL;
  if (__pyx_m)
    return __Pyx_NewRef(__pyx_m);
  modname = PyObject_GetAttrString(spec, "name");
  if (unlikely(!modname))
    goto bad;
  module = PyModule_NewObject(modname);
  Py_DECREF(modname);
  if (unlikely(!module))
    goto bad;
  moddict = PyModule_GetDict(module);
  if (unlikely(!moddict))
    goto bad;
  if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0))
    goto bad;
  if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0))
    goto bad;
  if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0))
    goto bad;
  if (unlikely(__Pyx_copy_spec_to_module(
                   spec, moddict, "submodule_search_locations", "__path__", 0) < 0))
    goto bad;
  return module;
bad:
  Py_XDECREF(module);
  return NULL;
}

static CYTHON_SMALL_CODE int
__pyx_pymod_exec_hit(PyObject * __pyx_pyinit_module)
#endif
#endif
{
  PyObject * __pyx_t_1 = NULL;
  PyObject * __pyx_t_2 = NULL;
  PyObject * __pyx_t_3 = NULL;
  PyObject * __pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char * __pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
#if CYTHON_PEP489_MULTI_PHASE_INIT
      if (__pyx_m)
  {
    if (__pyx_m == __pyx_pyinit_module)
      return 0;
    PyErr_SetString(PyExc_RuntimeError,
                    "Module 'hit' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
#elif PY_MAJOR_VERSION >= 3
      if (__pyx_m) return __Pyx_NewRef(__pyx_m);
#endif
#if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny)
  {
    PyErr_Clear();
    __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
    if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
  }
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_hit(void)", 0);
  if (__Pyx_check_binary_version() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
#endif
  __pyx_empty_tuple = PyTuple_New(0);
  if (unlikely(!__pyx_empty_tuple))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0);
  if (unlikely(!__pyx_empty_bytes))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0);
  if (unlikely(!__pyx_empty_unicode))
    __PYX_ERR(0, 1, __pyx_L1_error)
#ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
#ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
#ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
#ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
#ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
#ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
/*--- Library function declarations ---*/
/*--- Threads initialization code ---*/
#if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
#ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
#endif
#endif
/*--- Module creation code ---*/
#if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
#else
#if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("hit", __pyx_methods, 0, 0, PYTHON_API_VERSION);
  Py_XINCREF(__pyx_m);
#else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
#endif
  if (unlikely(!__pyx_m))
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
  __pyx_d = PyModule_GetDict(__pyx_m);
  if (unlikely(!__pyx_d))
    __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME);
  if (unlikely(!__pyx_b))
    __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *)"cython_runtime");
  if (unlikely(!__pyx_cython_runtime))
    __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0)
    __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#if PY_MAJOR_VERSION < 3 &&                                                                        \
    (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif
  if (__pyx_module_is_main_hit)
  {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0)
      __PYX_ERR(0, 1, __pyx_L1_error)
  }
#if PY_MAJOR_VERSION >= 3
  {
    PyObject * modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
      __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hit"))
    {
      if (unlikely(PyDict_SetItemString(modules, "hit", __pyx_m) < 0))
        __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
#endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0))
    __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
/*--- Execution code ---*/
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
#endif

  /* "hit.pyx":1
   * import sys             # <<<<<<<<<<<<<<
   * import enum
   *
   */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":2
   * import sys
   * import enum             # <<<<<<<<<<<<<<
   *
   * cimport chit
   */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_enum, 0, 0);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_enum, __pyx_t_1) < 0)
    __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":10
   * from libcpp.vector cimport vector
   *
   * class NodeType(object):             # <<<<<<<<<<<<<<
   *     All = 'All'
   *     Section = 'Section'
   */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__9);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1,
                                        __pyx_tuple__9,
                                        __pyx_n_s_NodeType,
                                        __pyx_n_s_NodeType,
                                        (PyObject *)NULL,
                                        __pyx_n_s_hit,
                                        (PyObject *)NULL);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hit.pyx":11
   *
   * class NodeType(object):
   *     All = 'All'             # <<<<<<<<<<<<<<
   *     Section = 'Section'
   *     Comment = 'Comment'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_All, __pyx_n_u_All) < 0)
    __PYX_ERR(0, 11, __pyx_L1_error)

  /* "hit.pyx":12
   * class NodeType(object):
   *     All = 'All'
   *     Section = 'Section'             # <<<<<<<<<<<<<<
   *     Comment = 'Comment'
   *     Field = 'Field'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Section, __pyx_n_u_Section) < 0)
    __PYX_ERR(0, 12, __pyx_L1_error)

  /* "hit.pyx":13
   *     All = 'All'
   *     Section = 'Section'
   *     Comment = 'Comment'             # <<<<<<<<<<<<<<
   *     Field = 'Field'
   *     Blank = 'Blank'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Comment, __pyx_n_u_Comment) < 0)
    __PYX_ERR(0, 13, __pyx_L1_error)

  /* "hit.pyx":14
   *     Section = 'Section'
   *     Comment = 'Comment'
   *     Field = 'Field'             # <<<<<<<<<<<<<<
   *     Blank = 'Blank'
   *
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Field, __pyx_n_u_Field) < 0)
    __PYX_ERR(0, 14, __pyx_L1_error)

  /* "hit.pyx":15
   *     Comment = 'Comment'
   *     Field = 'Field'
   *     Blank = 'Blank'             # <<<<<<<<<<<<<<
   *
   * cdef chit.NodeType _nodetype_enum(node_type):
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Blank, __pyx_n_u_Blank) < 0)
    __PYX_ERR(0, 15, __pyx_L1_error)

  /* "hit.pyx":10
   * from libcpp.vector cimport vector
   *
   * class NodeType(object):             # <<<<<<<<<<<<<<
   *     All = 'All'
   *     Section = 'Section'
   */
  __pyx_t_3 =
      __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_NodeType, __pyx_tuple__9, __pyx_t_2, NULL, 0, 0);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NodeType, __pyx_t_3) < 0)
    __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":30
   *     raise RuntimeError('unknown NodeType ' + node_type)
   *
   * class FieldKind(object):             # <<<<<<<<<<<<<<
   *     Int = 'Int'
   *     Float = 'Float'
   */
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__10);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_1,
                                        __pyx_tuple__10,
                                        __pyx_n_s_FieldKind,
                                        __pyx_n_s_FieldKind,
                                        (PyObject *)NULL,
                                        __pyx_n_s_hit,
                                        (PyObject *)NULL);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hit.pyx":31
   *
   * class FieldKind(object):
   *     Int = 'Int'             # <<<<<<<<<<<<<<
   *     Float = 'Float'
   *     Bool = 'Bool'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Int, __pyx_n_u_Int) < 0)
    __PYX_ERR(0, 31, __pyx_L1_error)

  /* "hit.pyx":32
   * class FieldKind(object):
   *     Int = 'Int'
   *     Float = 'Float'             # <<<<<<<<<<<<<<
   *     Bool = 'Bool'
   *     String = 'String'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Float, __pyx_n_u_Float) < 0)
    __PYX_ERR(0, 32, __pyx_L1_error)

  /* "hit.pyx":33
   *     Int = 'Int'
   *     Float = 'Float'
   *     Bool = 'Bool'             # <<<<<<<<<<<<<<
   *     String = 'String'
   *     NotField = 'None'
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_Bool, __pyx_n_u_Bool) < 0)
    __PYX_ERR(0, 33, __pyx_L1_error)

  /* "hit.pyx":34
   *     Float = 'Float'
   *     Bool = 'Bool'
   *     String = 'String'             # <<<<<<<<<<<<<<
   *     NotField = 'None'
   *
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_String, __pyx_n_u_String) < 0)
    __PYX_ERR(0, 34, __pyx_L1_error)

  /* "hit.pyx":35
   *     Bool = 'Bool'
   *     String = 'String'
   *     NotField = 'None'             # <<<<<<<<<<<<<<
   *
   * cdef chit.Kind _kind_enum(kind):
   */
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_n_s_NotField, __pyx_n_u_None) < 0)
    __PYX_ERR(0, 35, __pyx_L1_error)

  /* "hit.pyx":30
   *     raise RuntimeError('unknown NodeType ' + node_type)
   *
   * class FieldKind(object):             # <<<<<<<<<<<<<<
   *     Int = 'Int'
   *     Float = 'Float'
   */
  __pyx_t_3 =
      __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_FieldKind, __pyx_tuple__10, __pyx_t_2, NULL, 0, 0);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FieldKind, __pyx_t_3) < 0)
    __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":99
   *
   *     @classmethod
   *     def NewSection(cls, path):             # <<<<<<<<<<<<<<
   *         pass
   *
   */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_3hit_Node, __pyx_n_s_NewSection);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hit.pyx":98
   *     cdef str fname
   *
   *     @classmethod             # <<<<<<<<<<<<<<
   *     def NewSection(cls, path):
   *         pass
   */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3hit_Node->tp_dict, __pyx_n_s_NewSection, __pyx_t_2) <
      0)
    __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3hit_Node);

  /* "hit.pyx":103
   *
   *     @classmethod
   *     def NewComment(cls, text):             # <<<<<<<<<<<<<<
   *         pass
   *
   */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_3hit_Node, __pyx_n_s_NewComment);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hit.pyx":102
   *         pass
   *
   *     @classmethod             # <<<<<<<<<<<<<<
   *     def NewComment(cls, text):
   *         pass
   */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3hit_Node->tp_dict, __pyx_n_s_NewComment, __pyx_t_1) <
      0)
    __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_3hit_Node);

  /* "hit.pyx":107
   *
   *     @classmethod
   *     def NewBlank(cls):             # <<<<<<<<<<<<<<
   *         pass
   *
   */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_3hit_Node, __pyx_n_s_NewBlank);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hit.pyx":106
   *         pass
   *
   *     @classmethod             # <<<<<<<<<<<<<<
   *     def NewBlank(cls):
   *         pass
   */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_3hit_Node->tp_dict, __pyx_n_s_NewBlank, __pyx_t_2) < 0)
    __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_3hit_Node);

  /* "hit.pyx":235
   *         return 0
   *
   *     def walk(self, walker, node_type=NodeType.All):             # <<<<<<<<<<<<<<
   *         if self.type() == node_type or node_type == NodeType.All:
   *             walker.walk(self.fullpath(), self.path(), self);
   */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_All);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_k__6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hit.pyx":251
   *     def insertChild(self, index, Node child):
   *         self._cnode.insertChild(index, child._cnode)
   *     def children(self, node_type = NodeType.All):             # <<<<<<<<<<<<<<
   *         ckids = self._cnode.children(_nodetype_enum(node_type));
   *         kids = []
   */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NodeType);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_All);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":266
   *     return pyn
   *
   * def parse(fname, input):             # <<<<<<<<<<<<<<
   *     cdef chit.Node* node = chit.parse(fname.encode('utf-8'), input.encode('utf-8'))
   *     return _initpynode(node, own=True)
   */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3hit_9parse, NULL, __pyx_n_s_hit);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_parse, __pyx_t_2) < 0)
    __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":280
   * # The following code exposes some basic hit lexer to the pyhit library. The purpose is to
   * provide # tools necessary for a Peacock based hit file editor with highlighting and
   * autocomplete. class TokenType(enum.Enum):             # <<<<<<<<<<<<<<
   *     """
   *     A python Enum object for defining the various token types.
   */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_enum);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Enum);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CalculateMetaclass(NULL, __pyx_t_2);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_1,
                                        __pyx_t_2,
                                        __pyx_n_s_TokenType,
                                        __pyx_n_s_TokenType,
                                        (PyObject *)NULL,
                                        __pyx_n_s_hit,
                                        __pyx_kp_s_A_python_Enum_object_for_defini);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hit.pyx":284
   *     A python Enum object for defining the various token types.
   *     """
   *     BLANKLINE = 1      # "hit::TokType::BlankLine"             # <<<<<<<<<<<<<<
   *     LEFTBRACKET = 10   # "hit::TokType::LeftBracket"
   *     PATH = 11          # "hit::TokType::Path"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_BLANKLINE, __pyx_int_1) < 0)
    __PYX_ERR(0, 284, __pyx_L1_error)

  /* "hit.pyx":285
   *     """
   *     BLANKLINE = 1      # "hit::TokType::BlankLine"
   *     LEFTBRACKET = 10   # "hit::TokType::LeftBracket"             # <<<<<<<<<<<<<<
   *     PATH = 11          # "hit::TokType::Path"
   *     RIGHTBRACKET = 12  # "hit::TokType::RightBracket"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_LEFTBRACKET, __pyx_int_10) < 0)
    __PYX_ERR(0, 285, __pyx_L1_error)

  /* "hit.pyx":286
   *     BLANKLINE = 1      # "hit::TokType::BlankLine"
   *     LEFTBRACKET = 10   # "hit::TokType::LeftBracket"
   *     PATH = 11          # "hit::TokType::Path"             # <<<<<<<<<<<<<<
   *     RIGHTBRACKET = 12  # "hit::TokType::RightBracket"
   *     IDENT = 20         # "hit::TokType::Ident"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_PATH, __pyx_int_11) < 0)
    __PYX_ERR(0, 286, __pyx_L1_error)

  /* "hit.pyx":287
   *     LEFTBRACKET = 10   # "hit::TokType::LeftBracket"
   *     PATH = 11          # "hit::TokType::Path"
   *     RIGHTBRACKET = 12  # "hit::TokType::RightBracket"             # <<<<<<<<<<<<<<
   *     IDENT = 20         # "hit::TokType::Ident"
   *     EQUALS = 21        # "hit::TokType::Equals"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_RIGHTBRACKET, __pyx_int_12) < 0)
    __PYX_ERR(0, 287, __pyx_L1_error)

  /* "hit.pyx":288
   *     PATH = 11          # "hit::TokType::Path"
   *     RIGHTBRACKET = 12  # "hit::TokType::RightBracket"
   *     IDENT = 20         # "hit::TokType::Ident"             # <<<<<<<<<<<<<<
   *     EQUALS = 21        # "hit::TokType::Equals"
   *     NUMBER = 22        # "hit::TokType::Number"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_IDENT, __pyx_int_20) < 0)
    __PYX_ERR(0, 288, __pyx_L1_error)

  /* "hit.pyx":289
   *     RIGHTBRACKET = 12  # "hit::TokType::RightBracket"
   *     IDENT = 20         # "hit::TokType::Ident"
   *     EQUALS = 21        # "hit::TokType::Equals"             # <<<<<<<<<<<<<<
   *     NUMBER = 22        # "hit::TokType::Number"
   *     STRING = 23        # "hit::TokType::String"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EQUALS, __pyx_int_21) < 0)
    __PYX_ERR(0, 289, __pyx_L1_error)

  /* "hit.pyx":290
   *     IDENT = 20         # "hit::TokType::Ident"
   *     EQUALS = 21        # "hit::TokType::Equals"
   *     NUMBER = 22        # "hit::TokType::Number"             # <<<<<<<<<<<<<<
   *     STRING = 23        # "hit::TokType::String"
   *     INLINECOMMENT = 30 # "hit::TokType::InlineComment"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_NUMBER, __pyx_int_22) < 0)
    __PYX_ERR(0, 290, __pyx_L1_error)

  /* "hit.pyx":291
   *     EQUALS = 21        # "hit::TokType::Equals"
   *     NUMBER = 22        # "hit::TokType::Number"
   *     STRING = 23        # "hit::TokType::String"             # <<<<<<<<<<<<<<
   *     INLINECOMMENT = 30 # "hit::TokType::InlineComment"
   *     COMMENT = 31       # "hit::TokType::Comment"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_STRING, __pyx_int_23) < 0)
    __PYX_ERR(0, 291, __pyx_L1_error)

  /* "hit.pyx":292
   *     NUMBER = 22        # "hit::TokType::Number"
   *     STRING = 23        # "hit::TokType::String"
   *     INLINECOMMENT = 30 # "hit::TokType::InlineComment"             # <<<<<<<<<<<<<<
   *     COMMENT = 31       # "hit::TokType::Comment"
   *     EOF = 100          # "hit::TokType::EOF"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_INLINECOMMENT, __pyx_int_30) < 0)
    __PYX_ERR(0, 292, __pyx_L1_error)

  /* "hit.pyx":293
   *     STRING = 23        # "hit::TokType::String"
   *     INLINECOMMENT = 30 # "hit::TokType::InlineComment"
   *     COMMENT = 31       # "hit::TokType::Comment"             # <<<<<<<<<<<<<<
   *     EOF = 100          # "hit::TokType::EOF"
   *     ERROR = 200        # "hit::TokType::Error"
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_COMMENT, __pyx_int_31) < 0)
    __PYX_ERR(0, 293, __pyx_L1_error)

  /* "hit.pyx":294
   *     INLINECOMMENT = 30 # "hit::TokType::InlineComment"
   *     COMMENT = 31       # "hit::TokType::Comment"
   *     EOF = 100          # "hit::TokType::EOF"             # <<<<<<<<<<<<<<
   *     ERROR = 200        # "hit::TokType::Error"
   *
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_EOF, __pyx_int_100) < 0)
    __PYX_ERR(0, 294, __pyx_L1_error)

  /* "hit.pyx":295
   *     COMMENT = 31       # "hit::TokType::Comment"
   *     EOF = 100          # "hit::TokType::EOF"
   *     ERROR = 200        # "hit::TokType::Error"             # <<<<<<<<<<<<<<
   *
   * class Token(object):
   */
  if (__Pyx_SetNameInClass(__pyx_t_3, __pyx_n_s_ERROR, __pyx_int_200) < 0)
    __PYX_ERR(0, 295, __pyx_L1_error)

  /* "hit.pyx":280
   * # The following code exposes some basic hit lexer to the pyhit library. The purpose is to
   * provide # tools necessary for a Peacock based hit file editor with highlighting and
   * autocomplete. class TokenType(enum.Enum):             # <<<<<<<<<<<<<<
   *     """
   *     A python Enum object for defining the various token types.
   */
  __pyx_t_4 =
      __Pyx_Py3ClassCreate(__pyx_t_1, __pyx_n_s_TokenType, __pyx_t_2, __pyx_t_3, NULL, 0, 0);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TokenType, __pyx_t_4) < 0)
    __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":297
   *     ERROR = 200        # "hit::TokType::Error"
   *
   * class Token(object):             # <<<<<<<<<<<<<<
   *     """
   *     A python version of the Token struct in lex.h
   */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__13);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2,
                                        __pyx_tuple__13,
                                        __pyx_n_s_Token,
                                        __pyx_n_s_Token,
                                        (PyObject *)NULL,
                                        __pyx_n_s_hit,
                                        __pyx_kp_s_A_python_version_of_the_Token_s);
  if (unlikely(!__pyx_t_1))
    __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hit.pyx":307
   *         line: line number
   *     """
   *     def __init__(self, ttype, value, name, offset, line):             # <<<<<<<<<<<<<<
   *         self.__token_type = ttype
   *         self.__name = name
   */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_1__init__,
                                   0,
                                   __pyx_n_s_Token___init,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__15));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_3) < 0)
    __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hit.pyx":315
   *
   *     @property
   *     def type(self):             # <<<<<<<<<<<<<<
   *         return self.__token_type
   *
   */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_3type,
                                   0,
                                   __pyx_n_s_Token_type,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__17));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hit.pyx":314
   *         self.__line = line
   *
   *     @property             # <<<<<<<<<<<<<<
   *     def type(self):
   *         return self.__token_type
   */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_type, __pyx_t_4) < 0)
    __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hit.pyx":319
   *
   *     @property
   *     def value(self):             # <<<<<<<<<<<<<<
   *         return self.__value
   *
   */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_5value,
                                   0,
                                   __pyx_n_s_Token_value,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__19));
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hit.pyx":318
   *         return self.__token_type
   *
   *     @property             # <<<<<<<<<<<<<<
   *     def value(self):
   *         return self.__value
   */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_value, __pyx_t_3) < 0)
    __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hit.pyx":323
   *
   *     @property
   *     def offset(self):             # <<<<<<<<<<<<<<
   *         return self.__offset
   *
   */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_7offset,
                                   0,
                                   __pyx_n_s_Token_offset,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__21));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hit.pyx":322
   *         return self.__value
   *
   *     @property             # <<<<<<<<<<<<<<
   *     def offset(self):
   *         return self.__offset
   */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_offset, __pyx_t_4) < 0)
    __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hit.pyx":327
   *
   *     @property
   *     def name(self):             # <<<<<<<<<<<<<<
   *         return self.__name
   *
   */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_9name,
                                   0,
                                   __pyx_n_s_Token_name,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__23));
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hit.pyx":326
   *         return self.__offset
   *
   *     @property             # <<<<<<<<<<<<<<
   *     def name(self):
   *         return self.__name
   */
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_4);
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_name, __pyx_t_3) < 0)
    __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hit.pyx":331
   *
   *     @property
   *     def line(self):             # <<<<<<<<<<<<<<
   *         return self.__line
   *
   */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_11line,
                                   0,
                                   __pyx_n_s_Token_line,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__25));
  if (unlikely(!__pyx_t_3))
    __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hit.pyx":330
   *         return self.__name
   *
   *     @property             # <<<<<<<<<<<<<<
   *     def line(self):
   *         return self.__line
   */
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_property, __pyx_t_3);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_line, __pyx_t_4) < 0)
    __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hit.pyx":334
   *         return self.__line
   *
   *     def __str__(self):             # <<<<<<<<<<<<<<
   *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name,
   * self.__offset, self.__line)
   *
   */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_13__str__,
                                   0,
                                   __pyx_n_s_Token___str,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__27));
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_str, __pyx_t_4) < 0)
    __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hit.pyx":337
   *         return '{}:{}:{}:{}'.format(self.__token_type, self.__value, self.__name,
   * self.__offset, self.__line)
   *
   *     def __eq__(self, other):             # <<<<<<<<<<<<<<
   *         if isinstance(other, Token):
   *             return all([self.type == other.type, self.value == other.value, self.name ==
   * other.name,
   */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_3hit_5Token_15__eq__,
                                   0,
                                   __pyx_n_s_Token___eq,
                                   NULL,
                                   __pyx_n_s_hit,
                                   __pyx_d,
                                   ((PyObject *)__pyx_codeobj__29));
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_eq, __pyx_t_4) < 0)
    __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hit.pyx":297
   *     ERROR = 200        # "hit::TokType::Error"
   *
   * class Token(object):             # <<<<<<<<<<<<<<
   *     """
   *     A python version of the Token struct in lex.h
   */
  __pyx_t_4 =
      __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Token, __pyx_tuple__13, __pyx_t_1, NULL, 0, 0);
  if (unlikely(!__pyx_t_4))
    __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Token, __pyx_t_4) < 0)
    __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":346
   *             raise TypeError("Comparison is only valid with Token and TokenType, {}
   * provided".format(type(other)))
   *
   * def tokenize(fname, text):             # <<<<<<<<<<<<<<
   *     """
   *     Uses the lexer in lex.h/cc to create a list of tokens, which are converted to the python
   * Token
   */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_3hit_15tokenize, NULL, __pyx_n_s_hit);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_tokenize, __pyx_t_2) < 0)
    __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hit.pyx":1
   * import sys             # <<<<<<<<<<<<<<
   * import enum
   *
   */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0);
  if (unlikely(!__pyx_t_2))
    __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0)
    __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "string.to_py":55
   *
   * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
   * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s): #
   * <<<<<<<<<<<<<< return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
   *
   */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
__pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m)
  {
    if (__pyx_d)
    {
      __Pyx_AddTraceback("init hit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  }
  else if (!PyErr_Occurred())
  {
    PyErr_SetString(PyExc_ImportError, "init hit");
  }
__pyx_L0:;
  __Pyx_RefNannyFinishContext();
#if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
#elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
#else
  return;
#endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *
__Pyx_RefNannyImportAPI(const char * modname)
{
  PyObject *m = NULL, *p = NULL;
  void * r = NULL;
  m = PyImport_ImportModule(modname);
  if (!m)
    goto end;
  p = PyObject_GetAttrString(m, "RefNannyAPI");
  if (!p)
    goto end;
  r = PyLong_AsVoidPtr(p);
end:
  Py_XDECREF(p);
  Py_XDECREF(m);
  return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *
__Pyx_PyObject_GetAttrStr(PyObject * obj, PyObject * attr_name)
{
  PyTypeObject * tp = Py_TYPE(obj);
  if (likely(tp->tp_getattro))
    return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
  if (likely(tp->tp_getattr))
    return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
  return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *
__Pyx_GetBuiltinName(PyObject * name)
{
  PyObject * result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
  if (unlikely(!result))
  {
    PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
                 "name '%U' is not defined",
                 name);
#else
                 "name '%.200s' is not defined",
                 PyString_AS_STRING(name));
#endif
  }
  return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T
__Pyx_get_tp_dict_version(PyObject * obj)
{
  PyObject * dict = Py_TYPE(obj)->tp_dict;
  return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T
__Pyx_get_object_dict_version(PyObject * obj)
{
  PyObject ** dictptr = NULL;
  Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
  if (offset)
  {
#if CYTHON_COMPILING_IN_CPYTHON
    dictptr =
        (likely(offset > 0)) ? (PyObject **)((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
    dictptr = _PyObject_GetDictPtr(obj);
#endif
  }
  return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int
__Pyx_object_dict_version_matches(PyObject * obj,
                                  PY_UINT64_T tp_dict_version,
                                  PY_UINT64_T obj_dict_version)
{
  PyObject * dict = Py_TYPE(obj)->tp_dict;
  if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
    return 0;
  return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *
__Pyx__GetModuleGlobalName(PyObject * name,
                           PY_UINT64_T * dict_version,
                           PyObject ** dict_cached_value)
#else
static CYTHON_INLINE PyObject *
__Pyx__GetModuleGlobalName(PyObject * name)
#endif
{
  PyObject * result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
  result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *)name)->hash);
  __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
  if (likely(result))
  {
    return __Pyx_NewRef(result);
  }
  else if (unlikely(PyErr_Occurred()))
  {
    return NULL;
  }
#else
  result = PyDict_GetItem(__pyx_d, name);
  __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
  if (likely(result))
  {
    return __Pyx_NewRef(result);
  }
#endif
#else
  result = PyObject_GetItem(__pyx_d, name);
  __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
  if (likely(result))
  {
    return __Pyx_NewRef(result);
  }
  PyErr_Clear();
#endif
  return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *
__Pyx_PyCFunction_FastCall(PyObject * func_obj, PyObject ** args, Py_ssize_t nargs)
{
  PyCFunctionObject * func = (PyCFunctionObject *)func_obj;
  PyCFunction meth = PyCFunction_GET_FUNCTION(func);
  PyObject * self = PyCFunction_GET_SELF(func);
  int flags = PyCFunction_GET_FLAGS(func);
  assert(PyCFunction_Check(func));
  assert(METH_FASTCALL ==
         (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
  assert(nargs >= 0);
  assert(nargs == 0 || args != NULL);
  /* _PyCFunction_FastCallDict() must not be called with an exception set,
     because it may clear it (directly or indirectly) and so the
     caller loses its exception */
  assert(!PyErr_Occurred());
  if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS))
  {
    return (*((__Pyx_PyCFunctionFastWithKeywords)(void *)meth))(self, args, nargs, NULL);
  }
  else
  {
    return (*((__Pyx_PyCFunctionFast)(void *)meth))(self, args, nargs);
  }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject *
__Pyx_PyFunction_FastCallNoKw(PyCodeObject * co,
                              PyObject ** args,
                              Py_ssize_t na,
                              PyObject * globals)
{
  PyFrameObject * f;
  PyThreadState * tstate = __Pyx_PyThreadState_Current;
  PyObject ** fastlocals;
  Py_ssize_t i;
  PyObject * result;
  assert(globals != NULL);
  /* XXX Perhaps we should create a specialized
     PyFrame_New() that doesn't take locals, but does
     take builtins without sanity checking them.
     */
  assert(tstate != NULL);
  f = PyFrame_New(tstate, co, globals, NULL);
  if (f == NULL)
  {
    return NULL;
  }
  fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
  for (i = 0; i < na; i++)
  {
    Py_INCREF(*args);
    fastlocals[i] = *args++;
  }
  result = PyEval_EvalFrameEx(f, 0);
  ++tstate->recursion_depth;
  Py_DECREF(f);
  --tstate->recursion_depth;
  return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *
__Pyx_PyFunction_FastCallDict(PyObject * func,
                              PyObject ** args,
                              Py_ssize_t nargs,
                              PyObject * kwargs)
{
  PyCodeObject * co = (PyCodeObject *)PyFunction_GET_CODE(func);
  PyObject * globals = PyFunction_GET_GLOBALS(func);
  PyObject * argdefs = PyFunction_GET_DEFAULTS(func);
  PyObject * closure;
#if PY_MAJOR_VERSION >= 3
  PyObject * kwdefs;
#endif
  PyObject *kwtuple, **k;
  PyObject ** d;
  Py_ssize_t nd;
  Py_ssize_t nk;
  PyObject * result;
  assert(kwargs == NULL || PyDict_Check(kwargs));
  nk = kwargs ? PyDict_Size(kwargs) : 0;
  if (Py_EnterRecursiveCall((char *)" while calling a Python object"))
  {
    return NULL;
  }
  if (
#if PY_MAJOR_VERSION >= 3
      co->co_kwonlyargcount == 0 &&
#endif
      likely(kwargs == NULL || nk == 0) &&
      co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE))
  {
    if (argdefs == NULL && co->co_argcount == nargs)
    {
      result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
      goto done;
    }
    else if (nargs == 0 && argdefs != NULL && co->co_argcount == Py_SIZE(argdefs))
    {
      /* function called with no arguments, but all parameters have
         a default value: use default values as arguments .*/
      args = &PyTuple_GET_ITEM(argdefs, 0);
      result = __Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
      goto done;
    }
  }
  if (kwargs != NULL)
  {
    Py_ssize_t pos, i;
    kwtuple = PyTuple_New(2 * nk);
    if (kwtuple == NULL)
    {
      result = NULL;
      goto done;
    }
    k = &PyTuple_GET_ITEM(kwtuple, 0);
    pos = i = 0;
    while (PyDict_Next(kwargs, &pos, &k[i], &k[i + 1]))
    {
      Py_INCREF(k[i]);
      Py_INCREF(k[i + 1]);
      i += 2;
    }
    nk = i / 2;
  }
  else
  {
    kwtuple = NULL;
    k = NULL;
  }
  closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
  kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
  if (argdefs != NULL)
  {
    d = &PyTuple_GET_ITEM(argdefs, 0);
    nd = Py_SIZE(argdefs);
  }
  else
  {
    d = NULL;
    nd = 0;
  }
#if PY_MAJOR_VERSION >= 3
  result = PyEval_EvalCodeEx((PyObject *)co,
                             globals,
                             (PyObject *)NULL,
                             args,
                             (int)nargs,
                             k,
                             (int)nk,
                             d,
                             (int)nd,
                             kwdefs,
                             closure);
#else
  result = PyEval_EvalCodeEx(
      co, globals, (PyObject *)NULL, args, (int)nargs, k, (int)nk, d, (int)nd, closure);
#endif
  Py_XDECREF(kwtuple);
done:
  Py_LeaveRecursiveCall();
  return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *
__Pyx_PyObject_Call(PyObject * func, PyObject * arg, PyObject * kw)
{
  PyObject * result;
  ternaryfunc call = func->ob_type->tp_call;
  if (unlikely(!call))
    return PyObject_Call(func, arg, kw);
  if (unlikely(Py_EnterRecursiveCall((char *)" while calling a Python object")))
    return NULL;
  result = (*call)(func, arg, kw);
  Py_LeaveRecursiveCall();
  if (unlikely(!result) && unlikely(!PyErr_Occurred()))
  {
    PyErr_SetString(PyExc_SystemError, "NULL result without error in PyObject_Call");
  }
  return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *
__Pyx_PyObject_CallMethO(PyObject * func, PyObject * arg)
{
  PyObject *self, *result;
  PyCFunction cfunc;
  cfunc = PyCFunction_GET_FUNCTION(func);
  self = PyCFunction_GET_SELF(func);
  if (unlikely(Py_EnterRecursiveCall((char *)" while calling a Python object")))
    return NULL;
  result = cfunc(self, arg);
  Py_LeaveRecursiveCall();
  if (unlikely(!result) && unlikely(!PyErr_Occurred()))
  {
    PyErr_SetString(PyExc_SystemError, "NULL result without error in PyObject_Call");
  }
  return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject *
__Pyx__PyObject_CallOneArg(PyObject * func, PyObject * arg)
{
  PyObject * result;
  PyObject * args = PyTuple_New(1);
  if (unlikely(!args))
    return NULL;
  Py_INCREF(arg);
  PyTuple_SET_ITEM(args, 0, arg);
  result = __Pyx_PyObject_Call(func, args, NULL);
  Py_DECREF(args);
  return result;
}
static CYTHON_INLINE PyObject *
__Pyx_PyObject_CallOneArg(PyObject * func, PyObject * arg)
{
#if CYTHON_FAST_PYCALL
  if (PyFunction_Check(func))
  {
    return __Pyx_PyFunction_FastCall(func, &arg, 1);
  }
#endif
  if (likely(PyCFunction_Check(func)))
  {
    if (likely(PyCFunction_GET_FLAGS(func) & METH_O))
    {
      return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
    }
    else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL)
    {
      return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
    }
  }
  return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject *
__Pyx_PyObject_CallOneArg(PyObject * func, PyObject * arg)
{
  PyObject * result;
  PyObject * args = PyTuple_Pack(1, arg);
  if (unlikely(!args))
    return NULL;
  result = __Pyx_PyObject_Call(func, args, NULL);
  Py_DECREF(args);
  return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void
__Pyx_ErrRestoreInState(PyThreadState * tstate, PyObject * type, PyObject * value, PyObject * tb)
{
  PyObject *tmp_type, *tmp_value, *tmp_tb;
  tmp_type = tstate->curexc_type;
  tmp_value = tstate->curexc_value;
  tmp_tb = tstate->curexc_traceback;
  tstate->curexc_type = type;
  tstate->curexc_value = value;
  tstate->curexc_traceback = tb;
  Py_XDECREF(tmp_type);
  Py_XDECREF(tmp_value);
  Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void
__Pyx_ErrFetchInState(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb)
{
  *type = tstate->curexc_type;
  *value = tstate->curexc_value;
  *tb = tstate->curexc_traceback;
  tstate->curexc_type = 0;
  tstate->curexc_value = 0;
  tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void
__Pyx_Raise(PyObject * type, PyObject * value, PyObject * tb, CYTHON_UNUSED PyObject * cause)
{
  __Pyx_PyThreadState_declare Py_XINCREF(type);
  if (!value || value == Py_None)
    value = NULL;
  else
    Py_INCREF(value);
  if (!tb || tb == Py_None)
    tb = NULL;
  else
  {
    Py_INCREF(tb);
    if (!PyTraceBack_Check(tb))
    {
      PyErr_SetString(PyExc_TypeError, "raise: arg 3 must be a traceback or None");
      goto raise_error;
    }
  }
  if (PyType_Check(type))
  {
#if CYTHON_COMPILING_IN_PYPY
    if (!value)
    {
      Py_INCREF(Py_None);
      value = Py_None;
    }
#endif
    PyErr_NormalizeException(&type, &value, &tb);
  }
  else
  {
    if (value)
    {
      PyErr_SetString(PyExc_TypeError, "instance exception may not have a separate value");
      goto raise_error;
    }
    value = type;
    type = (PyObject *)Py_TYPE(type);
    Py_INCREF(type);
    if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException))
    {
      PyErr_SetString(PyExc_TypeError,
                      "raise: exception class must be a subclass of BaseException");
      goto raise_error;
    }
  }
  __Pyx_PyThreadState_assign __Pyx_ErrRestore(type, value, tb);
  return;
raise_error:
  Py_XDECREF(value);
  Py_XDECREF(type);
  Py_XDECREF(tb);
  return;
}
#else
static void
__Pyx_Raise(PyObject * type, PyObject * value, PyObject * tb, PyObject * cause)
{
  PyObject * owned_instance = NULL;
  if (tb == Py_None)
  {
    tb = 0;
  }
  else if (tb && !PyTraceBack_Check(tb))
  {
    PyErr_SetString(PyExc_TypeError, "raise: arg 3 must be a traceback or None");
    goto bad;
  }
  if (value == Py_None)
    value = 0;
  if (PyExceptionInstance_Check(type))
  {
    if (value)
    {
      PyErr_SetString(PyExc_TypeError, "instance exception may not have a separate value");
      goto bad;
    }
    value = type;
    type = (PyObject *)Py_TYPE(value);
  }
  else if (PyExceptionClass_Check(type))
  {
    PyObject * instance_class = NULL;
    if (value && PyExceptionInstance_Check(value))
    {
      instance_class = (PyObject *)Py_TYPE(value);
      if (instance_class != type)
      {
        int is_subclass = PyObject_IsSubclass(instance_class, type);
        if (!is_subclass)
        {
          instance_class = NULL;
        }
        else if (unlikely(is_subclass == -1))
        {
          goto bad;
        }
        else
        {
          type = instance_class;
        }
      }
    }
    if (!instance_class)
    {
      PyObject * args;
      if (!value)
        args = PyTuple_New(0);
      else if (PyTuple_Check(value))
      {
        Py_INCREF(value);
        args = value;
      }
      else
        args = PyTuple_Pack(1, value);
      if (!args)
        goto bad;
      owned_instance = PyObject_Call(type, args, NULL);
      Py_DECREF(args);
      if (!owned_instance)
        goto bad;
      value = owned_instance;
      if (!PyExceptionInstance_Check(value))
      {
        PyErr_Format(PyExc_TypeError,
                     "calling %R should have returned an instance of "
                     "BaseException, not %R",
                     type,
                     Py_TYPE(value));
        goto bad;
      }
    }
  }
  else
  {
    PyErr_SetString(PyExc_TypeError, "raise: exception class must be a subclass of BaseException");
    goto bad;
  }
  if (cause)
  {
    PyObject * fixed_cause;
    if (cause == Py_None)
    {
      fixed_cause = NULL;
    }
    else if (PyExceptionClass_Check(cause))
    {
      fixed_cause = PyObject_CallObject(cause, NULL);
      if (fixed_cause == NULL)
        goto bad;
    }
    else if (PyExceptionInstance_Check(cause))
    {
      fixed_cause = cause;
      Py_INCREF(fixed_cause);
    }
    else
    {
      PyErr_SetString(PyExc_TypeError,
                      "exception causes must derive from "
                      "BaseException");
      goto bad;
    }
    PyException_SetCause(value, fixed_cause);
  }
  PyErr_SetObject(type, value);
  if (tb)
  {
#if CYTHON_COMPILING_IN_PYPY
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
    Py_INCREF(tb);
    PyErr_Restore(tmp_type, tmp_value, tb);
    Py_XDECREF(tmp_tb);
#else
    PyThreadState * tstate = __Pyx_PyThreadState_Current;
    PyObject * tmp_tb = tstate->curexc_traceback;
    if (tb != tmp_tb)
    {
      Py_INCREF(tb);
      tstate->curexc_traceback = tb;
      Py_XDECREF(tmp_tb);
    }
#endif
  }
bad:
  Py_XDECREF(owned_instance);
  return;
}
#endif

/* WriteUnraisableException */
static void
__Pyx_WriteUnraisable(const char * name,
                      CYTHON_UNUSED int clineno,
                      CYTHON_UNUSED int lineno,
                      CYTHON_UNUSED const char * filename,
                      int full_traceback,
                      CYTHON_UNUSED int nogil)
{
  PyObject *old_exc, *old_val, *old_tb;
  PyObject * ctx;
  __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
      PyGILState_STATE state;
  if (nogil)
    state = PyGILState_Ensure();
#ifdef _MSC_VER
  else
    state = (PyGILState_STATE)-1;
#endif
#endif
  __Pyx_PyThreadState_assign __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
  if (full_traceback)
  {
    Py_XINCREF(old_exc);
    Py_XINCREF(old_val);
    Py_XINCREF(old_tb);
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    PyErr_PrintEx(1);
  }
#if PY_MAJOR_VERSION < 3
  ctx = PyString_FromString(name);
#else
  ctx = PyUnicode_FromString(name);
#endif
  __Pyx_ErrRestore(old_exc, old_val, old_tb);
  if (!ctx)
  {
    PyErr_WriteUnraisable(Py_None);
  }
  else
  {
    PyErr_WriteUnraisable(ctx);
    Py_DECREF(ctx);
  }
#ifdef WITH_THREAD
  if (nogil)
    PyGILState_Release(state);
#endif
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject *
__Pyx_PyObject_Call2Args(PyObject * function, PyObject * arg1, PyObject * arg2)
{
  PyObject *args, *result = NULL;
#if CYTHON_FAST_PYCALL
  if (PyFunction_Check(function))
  {
    PyObject * args[2] = {arg1, arg2};
    return __Pyx_PyFunction_FastCall(function, args, 2);
  }
#endif
#if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(function))
  {
    PyObject * args[2] = {arg1, arg2};
    return __Pyx_PyCFunction_FastCall(function, args, 2);
  }
#endif
  args = PyTuple_New(2);
  if (unlikely(!args))
    goto done;
  Py_INCREF(arg1);
  PyTuple_SET_ITEM(args, 0, arg1);
  Py_INCREF(arg2);
  PyTuple_SET_ITEM(args, 1, arg2);
  Py_INCREF(function);
  result = __Pyx_PyObject_Call(function, args, NULL);
  Py_DECREF(args);
  Py_DECREF(function);
done:
  return result;
}

/* RaiseArgTupleInvalid */
static void
__Pyx_RaiseArgtupleInvalid(
    const char * func_name, int exact, Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found)
{
  Py_ssize_t num_expected;
  const char * more_or_less;
  if (num_found < num_min)
  {
    num_expected = num_min;
    more_or_less = "at least";
  }
  else
  {
    num_expected = num_max;
    more_or_less = "at most";
  }
  if (exact)
  {
    more_or_less = "exactly";
  }
  PyErr_Format(PyExc_TypeError,
               "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T
               "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
               func_name,
               more_or_less,
               num_expected,
               (num_expected == 1) ? "" : "s",
               num_found);
}

/* RaiseDoubleKeywords */
static void
__Pyx_RaiseDoubleKeywordsError(const char * func_name, PyObject * kw_name)
{
  PyErr_Format(PyExc_TypeError,
#if PY_MAJOR_VERSION >= 3
               "%s() got multiple values for keyword argument '%U'",
               func_name,
               kw_name);
#else
               "%s() got multiple values for keyword argument '%s'",
               func_name,
               PyString_AsString(kw_name));
#endif
}

/* ParseKeywords */
static int
__Pyx_ParseOptionalKeywords(PyObject * kwds,
                            PyObject ** argnames[],
                            PyObject * kwds2,
                            PyObject * values[],
                            Py_ssize_t num_pos_args,
                            const char * function_name)
{
  PyObject *key = 0, *value = 0;
  Py_ssize_t pos = 0;
  PyObject *** name;
  PyObject *** first_kw_arg = argnames + num_pos_args;
  while (PyDict_Next(kwds, &pos, &key, &value))
  {
    name = first_kw_arg;
    while (*name && (**name != key))
      name++;
    if (*name)
    {
      values[name - argnames] = value;
      continue;
    }
    name = first_kw_arg;
#if PY_MAJOR_VERSION < 3
    if (likely(PyString_Check(key)))
    {
      while (*name)
      {
        if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key)) &&
            _PyString_Eq(**name, key))
        {
          values[name - argnames] = value;
          break;
        }
        name++;
      }
      if (*name)
        continue;
      else
      {
        PyObject *** argname = argnames;
        while (argname != first_kw_arg)
        {
          if ((**argname == key) || ((CYTHON_COMPILING_IN_PYPY ||
                                      PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key)) &&
                                     _PyString_Eq(**argname, key)))
          {
            goto arg_passed_twice;
          }
          argname++;
        }
      }
    }
    else
#endif
        if (likely(PyUnicode_Check(key)))
    {
      while (*name)
      {
        int cmp =
            (**name == key) ? 0 :
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                            (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key))
                                ? 1
                                :
#endif
                                PyUnicode_Compare(**name, key);
        if (cmp < 0 && unlikely(PyErr_Occurred()))
          goto bad;
        if (cmp == 0)
        {
          values[name - argnames] = value;
          break;
        }
        name++;
      }
      if (*name)
        continue;
      else
      {
        PyObject *** argname = argnames;
        while (argname != first_kw_arg)
        {
          int cmp = (**argname == key)
                        ? 0
                        :
#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key))
                            ? 1
                            :
#endif
                            PyUnicode_Compare(**argname, key);
          if (cmp < 0 && unlikely(PyErr_Occurred()))
            goto bad;
          if (cmp == 0)
            goto arg_passed_twice;
          argname++;
        }
      }
    }
    else
      goto invalid_keyword_type;
    if (kwds2)
    {
      if (unlikely(PyDict_SetItem(kwds2, key, value)))
        goto bad;
    }
    else
    {
      goto invalid_keyword;
    }
  }
  return 0;
arg_passed_twice:
  __Pyx_RaiseDoubleKeywordsError(function_name, key);
  goto bad;
invalid_keyword_type:
  PyErr_Format(PyExc_TypeError, "%.200s() keywords must be strings", function_name);
  goto bad;
invalid_keyword:
  PyErr_Format(PyExc_TypeError,
#if PY_MAJOR_VERSION < 3
               "%.200s() got an unexpected keyword argument '%.200s'",
               function_name,
               PyString_AsString(key));
#else
               "%s() got an unexpected keyword argument '%U'",
               function_name,
               key);
#endif
bad:
  return -1;
}

/* BytesEquals */
static CYTHON_INLINE int
__Pyx_PyBytes_Equals(PyObject * s1, PyObject * s2, int equals)
{
#if CYTHON_COMPILING_IN_PYPY
  return PyObject_RichCompareBool(s1, s2, equals);
#else
  if (s1 == s2)
  {
    return (equals == Py_EQ);
  }
  else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2))
  {
    const char *ps1, *ps2;
    Py_ssize_t length = PyBytes_GET_SIZE(s1);
    if (length != PyBytes_GET_SIZE(s2))
      return (equals == Py_NE);
    ps1 = PyBytes_AS_STRING(s1);
    ps2 = PyBytes_AS_STRING(s2);
    if (ps1[0] != ps2[0])
    {
      return (equals == Py_NE);
    }
    else if (length == 1)
    {
      return (equals == Py_EQ);
    }
    else
    {
      int result;
#if CYTHON_USE_UNICODE_INTERNALS
      Py_hash_t hash1, hash2;
      hash1 = ((PyBytesObject *)s1)->ob_shash;
      hash2 = ((PyBytesObject *)s2)->ob_shash;
      if (hash1 != hash2 && hash1 != -1 && hash2 != -1)
      {
        return (equals == Py_NE);
      }
#endif
      result = memcmp(ps1, ps2, (size_t)length);
      return (equals == Py_EQ) ? (result == 0) : (result != 0);
    }
  }
  else if ((s1 == Py_None) & PyBytes_CheckExact(s2))
  {
    return (equals == Py_NE);
  }
  else if ((s2 == Py_None) & PyBytes_CheckExact(s1))
  {
    return (equals == Py_NE);
  }
  else
  {
    int result;
    PyObject * py_result = PyObject_RichCompare(s1, s2, equals);
    if (!py_result)
      return -1;
    result = __Pyx_PyObject_IsTrue(py_result);
    Py_DECREF(py_result);
    return result;
  }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int
__Pyx_PyUnicode_Equals(PyObject * s1, PyObject * s2, int equals)
{
#if CYTHON_COMPILING_IN_PYPY
  return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
  PyObject * owned_ref = NULL;
#endif
  int s1_is_unicode, s2_is_unicode;
  if (s1 == s2)
  {
    goto return_eq;
  }
  s1_is_unicode = PyUnicode_CheckExact(s1);
  s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
  if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2))
  {
    owned_ref = PyUnicode_FromObject(s2);
    if (unlikely(!owned_ref))
      return -1;
    s2 = owned_ref;
    s2_is_unicode = 1;
  }
  else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1))
  {
    owned_ref = PyUnicode_FromObject(s1);
    if (unlikely(!owned_ref))
      return -1;
    s1 = owned_ref;
    s1_is_unicode = 1;
  }
  else if (((!s2_is_unicode) & (!s1_is_unicode)))
  {
    return __Pyx_PyBytes_Equals(s1, s2, equals);
  }
#endif
  if (s1_is_unicode & s2_is_unicode)
  {
    Py_ssize_t length;
    int kind;
    void *data1, *data2;
    if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
      return -1;
    length = __Pyx_PyUnicode_GET_LENGTH(s1);
    if (length != __Pyx_PyUnicode_GET_LENGTH(s2))
    {
      goto return_ne;
    }
#if CYTHON_USE_UNICODE_INTERNALS
    {
      Py_hash_t hash1, hash2;
#if CYTHON_PEP393_ENABLED
      hash1 = ((PyASCIIObject *)s1)->hash;
      hash2 = ((PyASCIIObject *)s2)->hash;
#else
      hash1 = ((PyUnicodeObject *)s1)->hash;
      hash2 = ((PyUnicodeObject *)s2)->hash;
#endif
      if (hash1 != hash2 && hash1 != -1 && hash2 != -1)
      {
        goto return_ne;
      }
    }
#endif
    kind = __Pyx_PyUnicode_KIND(s1);
    if (kind != __Pyx_PyUnicode_KIND(s2))
    {
      goto return_ne;
    }
    data1 = __Pyx_PyUnicode_DATA(s1);
    data2 = __Pyx_PyUnicode_DATA(s2);
    if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0))
    {
      goto return_ne;
    }
    else if (length == 1)
    {
      goto return_eq;
    }
    else
    {
      int result = memcmp(data1, data2, (size_t)(length * kind));
#if PY_MAJOR_VERSION < 3
      Py_XDECREF(owned_ref);
#endif
      return (equals == Py_EQ) ? (result == 0) : (result != 0);
    }
  }
  else if ((s1 == Py_None) & s2_is_unicode)
  {
    goto return_ne;
  }
  else if ((s2 == Py_None) & s1_is_unicode)
  {
    goto return_ne;
  }
  else
  {
    int result;
    PyObject * py_result = PyObject_RichCompare(s1, s2, equals);
#if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
#endif
    if (!py_result)
      return -1;
    result = __Pyx_PyObject_IsTrue(py_result);
    Py_DECREF(py_result);
    return result;
  }
return_eq:
#if PY_MAJOR_VERSION < 3
  Py_XDECREF(owned_ref);
#endif
  return (equals == Py_EQ);
return_ne:
#if PY_MAJOR_VERSION < 3
  Py_XDECREF(owned_ref);
#endif
  return (equals == Py_NE);
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *
__Pyx_PyObject_CallNoArg(PyObject * func)
{
#if CYTHON_FAST_PYCALL
  if (PyFunction_Check(func))
  {
    return __Pyx_PyFunction_FastCall(func, NULL, 0);
  }
#endif
#ifdef __Pyx_CyFunction_USED
  if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
  if (likely(PyCFunction_Check(func)))
#endif
  {
    if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS))
    {
      return __Pyx_PyObject_CallMethO(func, NULL);
    }
  }
  return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState * tstate)
{
  _PyErr_StackItem * exc_info = tstate->exc_info;
  while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
         exc_info->previous_item != NULL)
  {
    exc_info = exc_info->previous_item;
  }
  return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void
__Pyx__ExceptionSave(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb)
{
#if CYTHON_USE_EXC_INFO_STACK
  _PyErr_StackItem * exc_info = __Pyx_PyErr_GetTopmostException(tstate);
  *type = exc_info->exc_type;
  *value = exc_info->exc_value;
  *tb = exc_info->exc_traceback;
#else
  *type = tstate->exc_type;
  *value = tstate->exc_value;
  *tb = tstate->exc_traceback;
#endif
  Py_XINCREF(*type);
  Py_XINCREF(*value);
  Py_XINCREF(*tb);
}
static CYTHON_INLINE void
__Pyx__ExceptionReset(PyThreadState * tstate, PyObject * type, PyObject * value, PyObject * tb)
{
  PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_USE_EXC_INFO_STACK
  _PyErr_StackItem * exc_info = tstate->exc_info;
  tmp_type = exc_info->exc_type;
  tmp_value = exc_info->exc_value;
  tmp_tb = exc_info->exc_traceback;
  exc_info->exc_type = type;
  exc_info->exc_value = value;
  exc_info->exc_traceback = tb;
#else
  tmp_type = tstate->exc_type;
  tmp_value = tstate->exc_value;
  tmp_tb = tstate->exc_traceback;
  tstate->exc_type = type;
  tstate->exc_value = value;
  tstate->exc_traceback = tb;
#endif
  Py_XDECREF(tmp_type);
  Py_XDECREF(tmp_value);
  Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int
__Pyx__GetException(PyThreadState * tstate, PyObject ** type, PyObject ** value, PyObject ** tb)
#else
static int
__Pyx_GetException(PyObject ** type, PyObject ** value, PyObject ** tb)
#endif
{
  PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
  PyObject *tmp_type, *tmp_value, *tmp_tb;
  local_type = tstate->curexc_type;
  local_value = tstate->curexc_value;
  local_tb = tstate->curexc_traceback;
  tstate->curexc_type = 0;
  tstate->curexc_value = 0;
  tstate->curexc_traceback = 0;
#else
  PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
  PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
  if (unlikely(tstate->curexc_type))
#else
  if (unlikely(PyErr_Occurred()))
#endif
    goto bad;
#if PY_MAJOR_VERSION >= 3
  if (local_tb)
  {
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
      goto bad;
  }
#endif
  Py_XINCREF(local_tb);
  Py_XINCREF(local_type);
  Py_XINCREF(local_value);
  *type = local_type;
  *value = local_value;
  *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
#if CYTHON_USE_EXC_INFO_STACK
  {
    _PyErr_StackItem * exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = local_type;
    exc_info->exc_value = local_value;
    exc_info->exc_traceback = local_tb;
  }
#else
  tmp_type = tstate->exc_type;
  tmp_value = tstate->exc_value;
  tmp_tb = tstate->exc_traceback;
  tstate->exc_type = local_type;
  tstate->exc_value = local_value;
  tstate->exc_traceback = local_tb;
#endif
  Py_XDECREF(tmp_type);
  Py_XDECREF(tmp_value);
  Py_XDECREF(tmp_tb);
#else
  PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
  return 0;
bad:
  *type = 0;
  *value = 0;
  *tb = 0;
  Py_XDECREF(local_type);
  Py_XDECREF(local_value);
  Py_XDECREF(local_tb);
  return -1;
}

/* None */
static CYTHON_INLINE void
__Pyx_RaiseUnboundLocalError(const char * varname)
{
  PyErr_Format(
      PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ArgTypeTest */
static int
__Pyx__ArgTypeTest(PyObject * obj, PyTypeObject * type, const char * name, int exact)
{
  if (unlikely(!type))
  {
    PyErr_SetString(PyExc_SystemError, "Missing type object");
    return 0;
  }
  else if (exact)
  {
#if PY_MAJOR_VERSION == 2
    if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj)))
      return 1;
#endif
  }
  else
  {
    if (likely(__Pyx_TypeCheck(obj, type)))
      return 1;
  }
  PyErr_Format(PyExc_TypeError,
               "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
               name,
               type->tp_name,
               Py_TYPE(obj)->tp_name);
  return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject *
__Pyx_decode_c_bytes(const char * cstring,
                     Py_ssize_t length,
                     Py_ssize_t start,
                     Py_ssize_t stop,
                     const char * encoding,
                     const char * errors,
                     PyObject * (*decode_func)(const char * s,
                                               Py_ssize_t size,
                                               const char * errors))
{
  if (unlikely((start < 0) | (stop < 0)))
  {
    if (start < 0)
    {
      start += length;
      if (start < 0)
        start = 0;
    }
    if (stop < 0)
      stop += length;
  }
  if (stop > length)
    stop = length;
  if (unlikely(stop <= start))
    return __Pyx_NewRef(__pyx_empty_unicode);
  length = stop - start;
  cstring += start;
  if (decode_func)
  {
    return decode_func(cstring, length, errors);
  }
  else
  {
    return PyUnicode_Decode(cstring, length, encoding, errors);
  }
}

/* ExtTypeTest */
static CYTHON_INLINE int
__Pyx_TypeTest(PyObject * obj, PyTypeObject * type)
{
  if (unlikely(!type))
  {
    PyErr_SetString(PyExc_SystemError, "Missing type object");
    return 0;
  }
  if (likely(__Pyx_TypeCheck(obj, type)))
    return 1;
  PyErr_Format(
      PyExc_TypeError, "Cannot convert %.200s to %.200s", Py_TYPE(obj)->tp_name, type->tp_name);
  return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int
__Pyx_PyObject_SetAttrStr(PyObject * obj, PyObject * attr_name, PyObject * value)
{
  PyTypeObject * tp = Py_TYPE(obj);
  if (likely(tp->tp_setattro))
    return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
  if (likely(tp->tp_setattr))
    return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
  return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *
__Pyx_RaiseGenericGetAttributeError(PyTypeObject * tp, PyObject * attr_name)
{
  PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
               "'%.50s' object has no attribute '%U'",
               tp->tp_name,
               attr_name);
#else
               "'%.50s' object has no attribute '%.400s'",
               tp->tp_name,
               PyString_AS_STRING(attr_name));
#endif
  return NULL;
}
static CYTHON_INLINE PyObject *
__Pyx_PyObject_GenericGetAttrNoDict(PyObject * obj, PyObject * attr_name)
{
  PyObject * descr;
  PyTypeObject * tp = Py_TYPE(obj);
  if (unlikely(!PyString_Check(attr_name)))
  {
    return PyObject_GenericGetAttr(obj, attr_name);
  }
  assert(!tp->tp_dictoffset);
  descr = _PyType_Lookup(tp, attr_name);
  if (unlikely(!descr))
  {
    return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
  }
  Py_INCREF(descr);
#if PY_MAJOR_VERSION < 3
  if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
#endif
  {
    descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
    if (unlikely(f))
    {
      PyObject * res = f(descr, obj, (PyObject *)tp);
      Py_DECREF(descr);
      return res;
    }
  }
  return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *
__Pyx_PyObject_GenericGetAttr(PyObject * obj, PyObject * attr_name)
{
  if (unlikely(Py_TYPE(obj)->tp_dictoffset))
  {
    return PyObject_GenericGetAttr(obj, attr_name);
  }
  return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int
__Pyx_PyErr_ExceptionMatchesTuple(PyObject * exc_type, PyObject * tuple)
{
  Py_ssize_t i, n;
  n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
  for (i = 0; i < n; i++)
  {
    if (exc_type == PyTuple_GET_ITEM(tuple, i))
      return 1;
  }
#endif
  for (i = 0; i < n; i++)
  {
    if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i)))
      return 1;
  }
  return 0;
}
static CYTHON_INLINE int
__Pyx_PyErr_ExceptionMatchesInState(PyThreadState * tstate, PyObject * err)
{
  PyObject * exc_type = tstate->curexc_type;
  if (exc_type == err)
    return 1;
  if (unlikely(!exc_type))
    return 0;
  if (unlikely(PyTuple_Check(err)))
    return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
  return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void
__Pyx_PyObject_GetAttrStr_ClearAttributeError(void)
{
  __Pyx_PyThreadState_declare __Pyx_PyThreadState_assign if (likely(__Pyx_PyErr_ExceptionMatches(
                                                                 PyExc_AttributeError)))
      __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject *
__Pyx_PyObject_GetAttrStrNoError(PyObject * obj, PyObject * attr_name)
{
  PyObject * result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
  PyTypeObject * tp = Py_TYPE(obj);
  if (likely(tp->tp_getattro == PyObject_GenericGetAttr))
  {
    return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
  }
#endif
  result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
  if (unlikely(!result))
  {
    __Pyx_PyObject_GetAttrStr_ClearAttributeError();
  }
  return result;
}

/* SetupReduce */
static int
__Pyx_setup_reduce_is_named(PyObject * meth, PyObject * name)
{
  int ret;
  PyObject * name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr))
  {
    ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  }
  else
  {
    ret = -1;
  }
  if (unlikely(ret < 0))
  {
    PyErr_Clear();
    ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int
__Pyx_setup_reduce(PyObject * type_obj)
{
  int ret = 0;
  PyObject * object_reduce = NULL;
  PyObject * object_reduce_ex = NULL;
  PyObject * reduce = NULL;
  PyObject * reduce_ex = NULL;
  PyObject * reduce_cython = NULL;
  PyObject * setstate = NULL;
  PyObject * setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
  if (_PyType_Lookup((PyTypeObject *)type_obj, __pyx_n_s_getstate))
    goto __PYX_GOOD;
#else
  if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate))
    goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
  object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex);
  if (!object_reduce_ex)
    goto __PYX_BAD;
#else
  object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject *)&PyBaseObject_Type, __pyx_n_s_reduce_ex);
  if (!object_reduce_ex)
    goto __PYX_BAD;
#endif
  reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex);
  if (unlikely(!reduce_ex))
    goto __PYX_BAD;
  if (reduce_ex == object_reduce_ex)
  {
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce);
    if (!object_reduce)
      goto __PYX_BAD;
#else
    object_reduce = __Pyx_PyObject_GetAttrStr((PyObject *)&PyBaseObject_Type, __pyx_n_s_reduce);
    if (!object_reduce)
      goto __PYX_BAD;
#endif
    reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce);
    if (unlikely(!reduce))
      goto __PYX_BAD;
    if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython))
    {
      reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
      if (likely(reduce_cython))
      {
        ret = PyDict_SetItem(((PyTypeObject *)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython);
        if (unlikely(ret < 0))
          goto __PYX_BAD;
        ret = PyDict_DelItem(((PyTypeObject *)type_obj)->tp_dict, __pyx_n_s_reduce_cython);
        if (unlikely(ret < 0))
          goto __PYX_BAD;
      }
      else if (reduce == object_reduce || PyErr_Occurred())
      {
        goto __PYX_BAD;
      }
      setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
      if (!setstate)
        PyErr_Clear();
      if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython))
      {
        setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
        if (likely(setstate_cython))
        {
          ret = PyDict_SetItem(
              ((PyTypeObject *)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython);
          if (unlikely(ret < 0))
            goto __PYX_BAD;
          ret = PyDict_DelItem(((PyTypeObject *)type_obj)->tp_dict, __pyx_n_s_setstate_cython);
          if (unlikely(ret < 0))
            goto __PYX_BAD;
        }
        else if (!setstate || PyErr_Occurred())
        {
          goto __PYX_BAD;
        }
      }
      PyType_Modified((PyTypeObject *)type_obj);
    }
  }
  goto __PYX_GOOD;
__PYX_BAD:
  if (!PyErr_Occurred())
    PyErr_Format(PyExc_RuntimeError,
                 "Unable to initialize pickling for %s",
                 ((PyTypeObject *)type_obj)->tp_name);
  ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
  Py_XDECREF(object_reduce);
  Py_XDECREF(object_reduce_ex);
#endif
  Py_XDECREF(reduce);
  Py_XDECREF(reduce_ex);
  Py_XDECREF(reduce_cython);
  Py_XDECREF(setstate);
  Py_XDECREF(setstate_cython);
  return ret;
}

/* Import */
static PyObject *
__Pyx_Import(PyObject * name, PyObject * from_list, int level)
{
  PyObject * empty_list = 0;
  PyObject * module = 0;
  PyObject * global_dict = 0;
  PyObject * empty_dict = 0;
  PyObject * list;
#if PY_MAJOR_VERSION < 3
  PyObject * py_import;
  py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
  if (!py_import)
    goto bad;
#endif
  if (from_list)
    list = from_list;
  else
  {
    empty_list = PyList_New(0);
    if (!empty_list)
      goto bad;
    list = empty_list;
  }
  global_dict = PyModule_GetDict(__pyx_m);
  if (!global_dict)
    goto bad;
  empty_dict = PyDict_New();
  if (!empty_dict)
    goto bad;
  {
#if PY_MAJOR_VERSION >= 3
    if (level == -1)
    {
      if ((1) && (strchr(__Pyx_MODULE_NAME, '.')))
      {
        module = PyImport_ImportModuleLevelObject(name, global_dict, empty_dict, list, 1);
        if (!module)
        {
          if (!PyErr_ExceptionMatches(PyExc_ImportError))
            goto bad;
          PyErr_Clear();
        }
      }
      level = 0;
    }
#endif
    if (!module)
    {
#if PY_MAJOR_VERSION < 3
      PyObject * py_level = PyInt_FromLong(level);
      if (!py_level)
        goto bad;
      module = PyObject_CallFunctionObjArgs(
          py_import, name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
      Py_DECREF(py_level);
#else
      module = PyImport_ImportModuleLevelObject(name, global_dict, empty_dict, list, level);
#endif
    }
  }
bad:
#if PY_MAJOR_VERSION < 3
  Py_XDECREF(py_import);
#endif
  Py_XDECREF(empty_list);
  Py_XDECREF(empty_dict);
  return module;
}

/* CalculateMetaclass */
static PyObject *
__Pyx_CalculateMetaclass(PyTypeObject * metaclass, PyObject * bases)
{
  Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
  for (i = 0; i < nbases; i++)
  {
    PyTypeObject * tmptype;
    PyObject * tmp = PyTuple_GET_ITEM(bases, i);
    tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
    if (tmptype == &PyClass_Type)
      continue;
#endif
    if (!metaclass)
    {
      metaclass = tmptype;
      continue;
    }
    if (PyType_IsSubtype(metaclass, tmptype))
      continue;
    if (PyType_IsSubtype(tmptype, metaclass))
    {
      metaclass = tmptype;
      continue;
    }
    PyErr_SetString(PyExc_TypeError,
                    "metaclass conflict: "
                    "the metaclass of a derived class "
                    "must be a (non-strict) subclass "
                    "of the metaclasses of all its bases");
    return NULL;
  }
  if (!metaclass)
  {
#if PY_MAJOR_VERSION < 3
    metaclass = &PyClass_Type;
#else
    metaclass = &PyType_Type;
#endif
  }
  Py_INCREF((PyObject *)metaclass);
  return (PyObject *)metaclass;
}

/* Py3ClassCreate */
static PyObject *
__Pyx_Py3MetaclassPrepare(PyObject * metaclass,
                          PyObject * bases,
                          PyObject * name,
                          PyObject * qualname,
                          PyObject * mkw,
                          PyObject * modname,
                          PyObject * doc)
{
  PyObject * ns;
  if (metaclass)
  {
    PyObject * prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
    if (prep)
    {
      PyObject * pargs = PyTuple_Pack(2, name, bases);
      if (unlikely(!pargs))
      {
        Py_DECREF(prep);
        return NULL;
      }
      ns = PyObject_Call(prep, pargs, mkw);
      Py_DECREF(prep);
      Py_DECREF(pargs);
    }
    else
    {
      if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
      PyErr_Clear();
      ns = PyDict_New();
    }
  }
  else
  {
    ns = PyDict_New();
  }
  if (unlikely(!ns))
    return NULL;
  if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0))
    goto bad;
  if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0))
    goto bad;
  if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0))
    goto bad;
  return ns;
bad:
  Py_DECREF(ns);
  return NULL;
}
static PyObject *
__Pyx_Py3ClassCreate(PyObject * metaclass,
                     PyObject * name,
                     PyObject * bases,
                     PyObject * dict,
                     PyObject * mkw,
                     int calculate_metaclass,
                     int allow_py2_metaclass)
{
  PyObject *result, *margs;
  PyObject * owned_metaclass = NULL;
  if (allow_py2_metaclass)
  {
    owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
    if (owned_metaclass)
    {
      metaclass = owned_metaclass;
    }
    else if (likely(PyErr_ExceptionMatches(PyExc_KeyError)))
    {
      PyErr_Clear();
    }
    else
    {
      return NULL;
    }
  }
  if (calculate_metaclass && (!metaclass || PyType_Check(metaclass)))
  {
    metaclass = __Pyx_CalculateMetaclass((PyTypeObject *)metaclass, bases);
    Py_XDECREF(owned_metaclass);
    if (unlikely(!metaclass))
      return NULL;
    owned_metaclass = metaclass;
  }
  margs = PyTuple_Pack(3, name, bases, dict);
  if (unlikely(!margs))
  {
    result = NULL;
  }
  else
  {
    result = PyObject_Call(metaclass, margs, mkw);
    Py_DECREF(margs);
  }
  Py_XDECREF(owned_metaclass);
  return result;
}

/* ClassMethod */
static PyObject *
__Pyx_Method_ClassMethod(PyObject * method)
{
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
  if (PyObject_TypeCheck(method, &PyWrapperDescr_Type))
  {
    return PyClassMethod_New(method);
  }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
  if (PyMethodDescr_Check(method))
#else
#if PY_MAJOR_VERSION == 2
  static PyTypeObject * methoddescr_type = NULL;
  if (methoddescr_type == NULL)
  {
    PyObject * meth = PyObject_GetAttrString((PyObject *)&PyList_Type, "append");
    if (!meth)
      return NULL;
    methoddescr_type = Py_TYPE(meth);
    Py_DECREF(meth);
  }
#else
  PyTypeObject * methoddescr_type = &PyMethodDescr_Type;
#endif
  if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
  {
    PyMethodDescrObject * descr = (PyMethodDescrObject *)method;
#if PY_VERSION_HEX < 0x03020000
    PyTypeObject * d_type = descr->d_type;
#else
    PyTypeObject * d_type = descr->d_common.d_type;
#endif
    return PyDescr_NewClassMethod(d_type, descr->d_method);
  }
#endif
  else if (PyMethod_Check(method)) { return PyClassMethod_New(PyMethod_GET_FUNCTION(method)); }
  else { return PyClassMethod_New(method); }
}

/* GetNameInClass */
static PyObject *
__Pyx_GetGlobalNameAfterAttributeLookup(PyObject * name)
{
  PyObject * result;
  __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign if (unlikely(!__Pyx_PyErr_ExceptionMatches(
                                         PyExc_AttributeError))) return NULL;
  __Pyx_PyErr_Clear();
  __Pyx_GetModuleGlobalNameUncached(result, name);
  return result;
}
static PyObject *
__Pyx__GetNameInClass(PyObject * nmspace, PyObject * name)
{
  PyObject * result;
  result = __Pyx_PyObject_GetAttrStr(nmspace, name);
  if (!result)
  {
    result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
  }
  return result;
}

/* FetchCommonType */
static PyTypeObject *
__Pyx_FetchCommonType(PyTypeObject * type)
{
  PyObject * fake_module;
  PyTypeObject * cached_type = NULL;
  fake_module = PyImport_AddModule((char *)"_cython_" CYTHON_ABI);
  if (!fake_module)
    return NULL;
  Py_INCREF(fake_module);
  cached_type = (PyTypeObject *)PyObject_GetAttrString(fake_module, type->tp_name);
  if (cached_type)
  {
    if (!PyType_Check((PyObject *)cached_type))
    {
      PyErr_Format(
          PyExc_TypeError, "Shared Cython type %.200s is not a type object", type->tp_name);
      goto bad;
    }
    if (cached_type->tp_basicsize != type->tp_basicsize)
    {
      PyErr_Format(PyExc_TypeError,
                   "Shared Cython type %.200s has the wrong size, try recompiling",
                   type->tp_name);
      goto bad;
    }
  }
  else
  {
    if (!PyErr_ExceptionMatches(PyExc_AttributeError))
      goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0)
      goto bad;
    if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject *)type) < 0)
      goto bad;
    Py_INCREF(type);
    cached_type = type;
  }
done:
  Py_DECREF(fake_module);
  return cached_type;
bad:
  Py_XDECREF(cached_type);
  cached_type = NULL;
  goto done;
}

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * closure)
{
  if (unlikely(op->func_doc == NULL))
  {
    if (op->func.m_ml->ml_doc)
    {
#if PY_MAJOR_VERSION >= 3
      op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
      op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
      if (unlikely(op->func_doc == NULL))
        return NULL;
    }
    else
    {
      Py_INCREF(Py_None);
      return Py_None;
    }
  }
  Py_INCREF(op->func_doc);
  return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject * op,
                         PyObject * value,
                         CYTHON_UNUSED void * context)
{
  PyObject * tmp = op->func_doc;
  if (value == NULL)
  {
    value = Py_None;
  }
  Py_INCREF(value);
  op->func_doc = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  if (unlikely(op->func_name == NULL))
  {
#if PY_MAJOR_VERSION >= 3
    op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
    op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
    if (unlikely(op->func_name == NULL))
      return NULL;
  }
  Py_INCREF(op->func_name);
  return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject * op,
                          PyObject * value,
                          CYTHON_UNUSED void * context)
{
  PyObject * tmp;
#if PY_MAJOR_VERSION >= 3
  if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
  if (unlikely(value == NULL || !PyString_Check(value)))
#endif
  {
    PyErr_SetString(PyExc_TypeError, "__name__ must be set to a string object");
    return -1;
  }
  tmp = op->func_name;
  Py_INCREF(value);
  op->func_name = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  Py_INCREF(op->func_qualname);
  return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject * op,
                              PyObject * value,
                              CYTHON_UNUSED void * context)
{
  PyObject * tmp;
#if PY_MAJOR_VERSION >= 3
  if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
  if (unlikely(value == NULL || !PyString_Check(value)))
#endif
  {
    PyErr_SetString(PyExc_TypeError, "__qualname__ must be set to a string object");
    return -1;
  }
  tmp = op->func_qualname;
  Py_INCREF(value);
  op->func_qualname = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject * m, CYTHON_UNUSED void * closure)
{
  PyObject * self;
  self = m->func_closure;
  if (self == NULL)
    self = Py_None;
  Py_INCREF(self);
  return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  if (unlikely(op->func_dict == NULL))
  {
    op->func_dict = PyDict_New();
    if (unlikely(op->func_dict == NULL))
      return NULL;
  }
  Py_INCREF(op->func_dict);
  return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject * op,
                          PyObject * value,
                          CYTHON_UNUSED void * context)
{
  PyObject * tmp;
  if (unlikely(value == NULL))
  {
    PyErr_SetString(PyExc_TypeError, "function's dictionary may not be deleted");
    return -1;
  }
  if (unlikely(!PyDict_Check(value)))
  {
    PyErr_SetString(PyExc_TypeError, "setting function's dictionary to a non-dict");
    return -1;
  }
  tmp = op->func_dict;
  Py_INCREF(value);
  op->func_dict = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  Py_INCREF(op->func_globals);
  return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject * op,
                             CYTHON_UNUSED void * context)
{
  Py_INCREF(Py_None);
  return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  PyObject * result = (op->func_code) ? op->func_code : Py_None;
  Py_INCREF(result);
  return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject * op)
{
  int result = 0;
  PyObject * res = op->defaults_getter((PyObject *)op);
  if (unlikely(!res))
    return -1;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
  op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
  Py_INCREF(op->defaults_tuple);
  op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
  Py_INCREF(op->defaults_kwdict);
#else
  op->defaults_tuple = PySequence_ITEM(res, 0);
  if (unlikely(!op->defaults_tuple))
    result = -1;
  else
  {
    op->defaults_kwdict = PySequence_ITEM(res, 1);
    if (unlikely(!op->defaults_kwdict))
      result = -1;
  }
#endif
  Py_DECREF(res);
  return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject * op,
                              PyObject * value,
                              CYTHON_UNUSED void * context)
{
  PyObject * tmp;
  if (!value)
  {
    value = Py_None;
  }
  else if (value != Py_None && !PyTuple_Check(value))
  {
    PyErr_SetString(PyExc_TypeError, "__defaults__ must be set to a tuple object");
    return -1;
  }
  Py_INCREF(value);
  tmp = op->defaults_tuple;
  op->defaults_tuple = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  PyObject * result = op->defaults_tuple;
  if (unlikely(!result))
  {
    if (op->defaults_getter)
    {
      if (__Pyx_CyFunction_init_defaults(op) < 0)
        return NULL;
      result = op->defaults_tuple;
    }
    else
    {
      result = Py_None;
    }
  }
  Py_INCREF(result);
  return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject * op,
                                PyObject * value,
                                CYTHON_UNUSED void * context)
{
  PyObject * tmp;
  if (!value)
  {
    value = Py_None;
  }
  else if (value != Py_None && !PyDict_Check(value))
  {
    PyErr_SetString(PyExc_TypeError, "__kwdefaults__ must be set to a dict object");
    return -1;
  }
  Py_INCREF(value);
  tmp = op->defaults_kwdict;
  op->defaults_kwdict = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  PyObject * result = op->defaults_kwdict;
  if (unlikely(!result))
  {
    if (op->defaults_getter)
    {
      if (__Pyx_CyFunction_init_defaults(op) < 0)
        return NULL;
      result = op->defaults_kwdict;
    }
    else
    {
      result = Py_None;
    }
  }
  Py_INCREF(result);
  return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject * op,
                                 PyObject * value,
                                 CYTHON_UNUSED void * context)
{
  PyObject * tmp;
  if (!value || value == Py_None)
  {
    value = NULL;
  }
  else if (!PyDict_Check(value))
  {
    PyErr_SetString(PyExc_TypeError, "__annotations__ must be set to a dict object");
    return -1;
  }
  Py_XINCREF(value);
  tmp = op->func_annotations;
  op->func_annotations = value;
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject * op, CYTHON_UNUSED void * context)
{
  PyObject * result = op->func_annotations;
  if (unlikely(!result))
  {
    result = PyDict_New();
    if (unlikely(!result))
      return NULL;
    op->func_annotations = result;
  }
  Py_INCREF(result);
  return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *)"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *)"__doc__", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *)"func_name",
     (getter)__Pyx_CyFunction_get_name,
     (setter)__Pyx_CyFunction_set_name,
     0,
     0},
    {(char *)"__name__",
     (getter)__Pyx_CyFunction_get_name,
     (setter)__Pyx_CyFunction_set_name,
     0,
     0},
    {(char *)"__qualname__",
     (getter)__Pyx_CyFunction_get_qualname,
     (setter)__Pyx_CyFunction_set_qualname,
     0,
     0},
    {(char *)"__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *)"func_dict",
     (getter)__Pyx_CyFunction_get_dict,
     (setter)__Pyx_CyFunction_set_dict,
     0,
     0},
    {(char *)"__dict__",
     (getter)__Pyx_CyFunction_get_dict,
     (setter)__Pyx_CyFunction_set_dict,
     0,
     0},
    {(char *)"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *)"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *)"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *)"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *)"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *)"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *)"func_defaults",
     (getter)__Pyx_CyFunction_get_defaults,
     (setter)__Pyx_CyFunction_set_defaults,
     0,
     0},
    {(char *)"__defaults__",
     (getter)__Pyx_CyFunction_get_defaults,
     (setter)__Pyx_CyFunction_set_defaults,
     0,
     0},
    {(char *)"__kwdefaults__",
     (getter)__Pyx_CyFunction_get_kwdefaults,
     (setter)__Pyx_CyFunction_set_kwdefaults,
     0,
     0},
    {(char *)"__annotations__",
     (getter)__Pyx_CyFunction_get_annotations,
     (setter)__Pyx_CyFunction_set_annotations,
     0,
     0},
    {0, 0, 0, 0, 0}};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *)"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0, 0, 0}};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject * m, CYTHON_UNUSED PyObject * args)
{
#if PY_MAJOR_VERSION >= 3
  return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
  return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0}, {0, 0, 0, 0}};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *
__Pyx_CyFunction_Init(__pyx_CyFunctionObject * op,
                      PyMethodDef * ml,
                      int flags,
                      PyObject * qualname,
                      PyObject * closure,
                      PyObject * module,
                      PyObject * globals,
                      PyObject * code)
{
  if (unlikely(op == NULL))
    return NULL;
  op->flags = flags;
  __Pyx_CyFunction_weakreflist(op) = NULL;
  op->func.m_ml = ml;
  op->func.m_self = (PyObject *)op;
  Py_XINCREF(closure);
  op->func_closure = closure;
  Py_XINCREF(module);
  op->func.m_module = module;
  op->func_dict = NULL;
  op->func_name = NULL;
  Py_INCREF(qualname);
  op->func_qualname = qualname;
  op->func_doc = NULL;
  op->func_classobj = NULL;
  op->func_globals = globals;
  Py_INCREF(op->func_globals);
  Py_XINCREF(code);
  op->func_code = code;
  op->defaults_pyobjects = 0;
  op->defaults_size = 0;
  op->defaults = NULL;
  op->defaults_tuple = NULL;
  op->defaults_kwdict = NULL;
  op->defaults_getter = NULL;
  op->func_annotations = NULL;
  return (PyObject *)op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject * m)
{
  Py_CLEAR(m->func_closure);
  Py_CLEAR(m->func.m_module);
  Py_CLEAR(m->func_dict);
  Py_CLEAR(m->func_name);
  Py_CLEAR(m->func_qualname);
  Py_CLEAR(m->func_doc);
  Py_CLEAR(m->func_globals);
  Py_CLEAR(m->func_code);
  Py_CLEAR(m->func_classobj);
  Py_CLEAR(m->defaults_tuple);
  Py_CLEAR(m->defaults_kwdict);
  Py_CLEAR(m->func_annotations);
  if (m->defaults)
  {
    PyObject ** pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
    int i;
    for (i = 0; i < m->defaults_pyobjects; i++)
      Py_XDECREF(pydefaults[i]);
    PyObject_Free(m->defaults);
    m->defaults = NULL;
  }
  return 0;
}
static void
__Pyx__CyFunction_dealloc(__pyx_CyFunctionObject * m)
{
  if (__Pyx_CyFunction_weakreflist(m) != NULL)
    PyObject_ClearWeakRefs((PyObject *)m);
  __Pyx_CyFunction_clear(m);
  PyObject_GC_Del(m);
}
static void
__Pyx_CyFunction_dealloc(__pyx_CyFunctionObject * m)
{
  PyObject_GC_UnTrack(m);
  __Pyx__CyFunction_dealloc(m);
}
static int
__Pyx_CyFunction_traverse(__pyx_CyFunctionObject * m, visitproc visit, void * arg)
{
  Py_VISIT(m->func_closure);
  Py_VISIT(m->func.m_module);
  Py_VISIT(m->func_dict);
  Py_VISIT(m->func_name);
  Py_VISIT(m->func_qualname);
  Py_VISIT(m->func_doc);
  Py_VISIT(m->func_globals);
  Py_VISIT(m->func_code);
  Py_VISIT(m->func_classobj);
  Py_VISIT(m->defaults_tuple);
  Py_VISIT(m->defaults_kwdict);
  if (m->defaults)
  {
    PyObject ** pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
    int i;
    for (i = 0; i < m->defaults_pyobjects; i++)
      Py_VISIT(pydefaults[i]);
  }
  return 0;
}
static PyObject *
__Pyx_CyFunction_descr_get(PyObject * func, PyObject * obj, PyObject * type)
{
#if PY_MAJOR_VERSION < 3
  __pyx_CyFunctionObject * m = (__pyx_CyFunctionObject *)func;
  if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD)
  {
    Py_INCREF(func);
    return func;
  }
  if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD)
  {
    if (type == NULL)
      type = (PyObject *)(Py_TYPE(obj));
    return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
  }
  if (obj == Py_None)
    obj = NULL;
#endif
  return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject *
__Pyx_CyFunction_repr(__pyx_CyFunctionObject * op)
{
#if PY_MAJOR_VERSION >= 3
  return PyUnicode_FromFormat("<cyfunction %U at %p>", op->func_qualname, (void *)op);
#else
  return PyString_FromFormat(
      "<cyfunction %s at %p>", PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject *
__Pyx_CyFunction_CallMethod(PyObject * func, PyObject * self, PyObject * arg, PyObject * kw)
{
  PyCFunctionObject * f = (PyCFunctionObject *)func;
  PyCFunction meth = f->m_ml->ml_meth;
  Py_ssize_t size;
  switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O))
  {
    case METH_VARARGS:
      if (likely(kw == NULL || PyDict_Size(kw) == 0))
        return (*meth)(self, arg);
      break;
    case METH_VARARGS | METH_KEYWORDS:
      return (*(PyCFunctionWithKeywords)(void *)meth)(self, arg, kw);
    case METH_NOARGS:
      if (likely(kw == NULL || PyDict_Size(kw) == 0))
      {
        size = PyTuple_GET_SIZE(arg);
        if (likely(size == 0))
          return (*meth)(self, NULL);
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                     f->m_ml->ml_name,
                     size);
        return NULL;
      }
      break;
    case METH_O:
      if (likely(kw == NULL || PyDict_Size(kw) == 0))
      {
        size = PyTuple_GET_SIZE(arg);
        if (likely(size == 1))
        {
          PyObject *result, *arg0;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          arg0 = PyTuple_GET_ITEM(arg, 0);
#else
          arg0 = PySequence_ITEM(arg, 0);
          if (unlikely(!arg0))
            return NULL;
#endif
          result = (*meth)(self, arg0);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
          Py_DECREF(arg0);
#endif
          return result;
        }
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                     f->m_ml->ml_name,
                     size);
        return NULL;
      }
      break;
    default:
      PyErr_SetString(PyExc_SystemError,
                      "Bad call flags in "
                      "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                      "longer supported!");
      return NULL;
  }
  PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments", f->m_ml->ml_name);
  return NULL;
}
static CYTHON_INLINE PyObject *
__Pyx_CyFunction_Call(PyObject * func, PyObject * arg, PyObject * kw)
{
  return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject *)func)->m_self, arg, kw);
}
static PyObject *
__Pyx_CyFunction_CallAsMethod(PyObject * func, PyObject * args, PyObject * kw)
{
  PyObject * result;
  __pyx_CyFunctionObject * cyfunc = (__pyx_CyFunctionObject *)func;
  if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD))
  {
    Py_ssize_t argc;
    PyObject * new_args;
    PyObject * self;
    argc = PyTuple_GET_SIZE(args);
    new_args = PyTuple_GetSlice(args, 1, argc);
    if (unlikely(!new_args))
      return NULL;
    self = PyTuple_GetItem(args, 0);
    if (unlikely(!self))
    {
      Py_DECREF(new_args);
      return NULL;
    }
    result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
    Py_DECREF(new_args);
  }
  else
  {
    result = __Pyx_CyFunction_Call(func, args, kw);
  }
  return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0) "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor)__Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc)__Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_CyFunction_traverse,
    (inquiry)__Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
};
static int
__pyx_CyFunction_init(void)
{
  __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
  if (unlikely(__pyx_CyFunctionType == NULL))
  {
    return -1;
  }
  return 0;
}
static CYTHON_INLINE void *
__Pyx_CyFunction_InitDefaults(PyObject * func, size_t size, int pyobjects)
{
  __pyx_CyFunctionObject * m = (__pyx_CyFunctionObject *)func;
  m->defaults = PyObject_Malloc(size);
  if (unlikely(!m->defaults))
    return PyErr_NoMemory();
  memset(m->defaults, 0, size);
  m->defaults_pyobjects = pyobjects;
  m->defaults_size = size;
  return m->defaults;
}
static CYTHON_INLINE void
__Pyx_CyFunction_SetDefaultsTuple(PyObject * func, PyObject * tuple)
{
  __pyx_CyFunctionObject * m = (__pyx_CyFunctionObject *)func;
  m->defaults_tuple = tuple;
  Py_INCREF(tuple);
}
static CYTHON_INLINE void
__Pyx_CyFunction_SetDefaultsKwDict(PyObject * func, PyObject * dict)
{
  __pyx_CyFunctionObject * m = (__pyx_CyFunctionObject *)func;
  m->defaults_kwdict = dict;
  Py_INCREF(dict);
}
static CYTHON_INLINE void
__Pyx_CyFunction_SetAnnotationsDict(PyObject * func, PyObject * dict)
{
  __pyx_CyFunctionObject * m = (__pyx_CyFunctionObject *)func;
  m->func_annotations = dict;
  Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *
__Pyx_CyFunction_New(PyMethodDef * ml,
                     int flags,
                     PyObject * qualname,
                     PyObject * closure,
                     PyObject * module,
                     PyObject * globals,
                     PyObject * code)
{
  PyObject * op =
      __Pyx_CyFunction_Init(PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
                            ml,
                            flags,
                            qualname,
                            closure,
                            module,
                            globals,
                            code);
  if (likely(op))
  {
    PyObject_GC_Track(op);
  }
  return op;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int
__Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState * tstate, int c_line)
{
  PyObject * use_cline;
  PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
  PyObject ** cython_runtime_dict;
#endif
  if (unlikely(!__pyx_cython_runtime))
  {
    return c_line;
  }
  __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
  cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
  if (likely(cython_runtime_dict))
  {
    __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
        use_cline,
        *cython_runtime_dict,
        __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
  }
  else
#endif
  {
    PyObject * use_cline_obj =
        __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
    if (use_cline_obj)
    {
      use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
      Py_DECREF(use_cline_obj);
    }
    else
    {
      PyErr_Clear();
      use_cline = NULL;
    }
  }
  if (!use_cline)
  {
    c_line = 0;
    PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
  }
  else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0))
  {
    c_line = 0;
  }
  __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
  return c_line;
}
#endif

/* CodeObjectCache */
static int
__pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry * entries, int count, int code_line)
{
  int start = 0, mid = 0, end = count - 1;
  if (end >= 0 && code_line > entries[end].code_line)
  {
    return count;
  }
  while (start < end)
  {
    mid = start + (end - start) / 2;
    if (code_line < entries[mid].code_line)
    {
      end = mid;
    }
    else if (code_line > entries[mid].code_line)
    {
      start = mid + 1;
    }
    else
    {
      return mid;
    }
  }
  if (code_line <= entries[mid].code_line)
  {
    return mid;
  }
  else
  {
    return mid + 1;
  }
}
static PyCodeObject *
__pyx_find_code_object(int code_line)
{
  PyCodeObject * code_object;
  int pos;
  if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries))
  {
    return NULL;
  }
  pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
  if (unlikely(pos >= __pyx_code_cache.count) ||
      unlikely(__pyx_code_cache.entries[pos].code_line != code_line))
  {
    return NULL;
  }
  code_object = __pyx_code_cache.entries[pos].code_object;
  Py_INCREF(code_object);
  return code_object;
}
static void
__pyx_insert_code_object(int code_line, PyCodeObject * code_object)
{
  int pos, i;
  __Pyx_CodeObjectCacheEntry * entries = __pyx_code_cache.entries;
  if (unlikely(!code_line))
  {
    return;
  }
  if (unlikely(!entries))
  {
    entries = (__Pyx_CodeObjectCacheEntry *)PyMem_Malloc(64 * sizeof(__Pyx_CodeObjectCacheEntry));
    if (likely(entries))
    {
      __pyx_code_cache.entries = entries;
      __pyx_code_cache.max_count = 64;
      __pyx_code_cache.count = 1;
      entries[0].code_line = code_line;
      entries[0].code_object = code_object;
      Py_INCREF(code_object);
    }
    return;
  }
  pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
  if ((pos < __pyx_code_cache.count) &&
      unlikely(__pyx_code_cache.entries[pos].code_line == code_line))
  {
    PyCodeObject * tmp = entries[pos].code_object;
    entries[pos].code_object = code_object;
    Py_DECREF(tmp);
    return;
  }
  if (__pyx_code_cache.count == __pyx_code_cache.max_count)
  {
    int new_max = __pyx_code_cache.max_count + 64;
    entries = (__Pyx_CodeObjectCacheEntry *)PyMem_Realloc(
        __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
    if (unlikely(!entries))
    {
      return;
    }
    __pyx_code_cache.entries = entries;
    __pyx_code_cache.max_count = new_max;
  }
  for (i = __pyx_code_cache.count; i > pos; i--)
  {
    entries[i] = entries[i - 1];
  }
  entries[pos].code_line = code_line;
  entries[pos].code_object = code_object;
  __pyx_code_cache.count++;
  Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject *
__Pyx_CreateCodeObjectForTraceback(const char * funcname,
                                   int c_line,
                                   int py_line,
                                   const char * filename)
{
  PyCodeObject * py_code = 0;
  PyObject * py_srcfile = 0;
  PyObject * py_funcname = 0;
#if PY_MAJOR_VERSION < 3
  py_srcfile = PyString_FromString(filename);
#else
  py_srcfile = PyUnicode_FromString(filename);
#endif
  if (!py_srcfile)
    goto bad;
  if (c_line)
  {
#if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromFormat("%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
#else
    py_funcname = PyUnicode_FromFormat("%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
#endif
  }
  else
  {
#if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
#else
    py_funcname = PyUnicode_FromString(funcname);
#endif
  }
  if (!py_funcname)
    goto bad;
  py_code = __Pyx_PyCode_New(0,
                             0,
                             0,
                             0,
                             0,
                             __pyx_empty_bytes, /*PyObject *code,*/
                             __pyx_empty_tuple, /*PyObject *consts,*/
                             __pyx_empty_tuple, /*PyObject *names,*/
                             __pyx_empty_tuple, /*PyObject *varnames,*/
                             __pyx_empty_tuple, /*PyObject *freevars,*/
                             __pyx_empty_tuple, /*PyObject *cellvars,*/
                             py_srcfile,        /*PyObject *filename,*/
                             py_funcname,       /*PyObject *name,*/
                             py_line,
                             __pyx_empty_bytes /*PyObject *lnotab*/
  );
  Py_DECREF(py_srcfile);
  Py_DECREF(py_funcname);
  return py_code;
bad:
  Py_XDECREF(py_srcfile);
  Py_XDECREF(py_funcname);
  return NULL;
}
static void
__Pyx_AddTraceback(const char * funcname, int c_line, int py_line, const char * filename)
{
  PyCodeObject * py_code = 0;
  PyFrameObject * py_frame = 0;
  PyThreadState * tstate = __Pyx_PyThreadState_Current;
  if (c_line)
  {
    c_line = __Pyx_CLineForTraceback(tstate, c_line);
  }
  py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
  if (!py_code)
  {
    py_code = __Pyx_CreateCodeObjectForTraceback(funcname, c_line, py_line, filename);
    if (!py_code)
      goto bad;
    __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
  }
  py_frame = PyFrame_New(tstate,  /*PyThreadState *tstate,*/
                         py_code, /*PyCodeObject *code,*/
                         __pyx_d, /*PyObject *globals,*/
                         0        /*PyObject *locals*/
  );
  if (!py_frame)
    goto bad;
  __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
  PyTraceBack_Here(py_frame);
bad:
  Py_XDECREF(py_code);
  Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)                                \
  __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)                            \
  __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)                          \
  {                                                                                                \
    func_type value = func_value;                                                                  \
    if (sizeof(target_type) < sizeof(func_type))                                                   \
    {                                                                                              \
      if (unlikely(value != (func_type)(target_type)value))                                        \
      {                                                                                            \
        func_type zero = 0;                                                                        \
        if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))                           \
          return (target_type)-1;                                                                  \
        if (is_unsigned && unlikely(value < zero))                                                 \
          goto raise_neg_overflow;                                                                 \
        else                                                                                       \
          goto raise_overflow;                                                                     \
      }                                                                                            \
    }                                                                                              \
    return (target_type)value;                                                                     \
  }

/* CIntToPy */
static CYTHON_INLINE PyObject *
__Pyx_PyInt_From_int(int value)
{
  const int neg_one = (int)((int)0 - (int)1), const_zero = (int)0;
  const int is_unsigned = neg_one > const_zero;
  if (is_unsigned)
  {
    if (sizeof(int) < sizeof(long))
    {
      return PyInt_FromLong((long)value);
    }
    else if (sizeof(int) <= sizeof(unsigned long))
    {
      return PyLong_FromUnsignedLong((unsigned long)value);
#ifdef HAVE_LONG_LONG
    }
    else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG))
    {
      return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)value);
#endif
    }
  }
  else
  {
    if (sizeof(int) <= sizeof(long))
    {
      return PyInt_FromLong((long)value);
#ifdef HAVE_LONG_LONG
    }
    else if (sizeof(int) <= sizeof(PY_LONG_LONG))
    {
      return PyLong_FromLongLong((PY_LONG_LONG)value);
#endif
    }
  }
  {
    int one = 1;
    int little = (int)*(unsigned char *)&one;
    unsigned char * bytes = (unsigned char *)&value;
    return _PyLong_FromByteArray(bytes, sizeof(int), little, !is_unsigned);
  }
}

/* CIntFromPy */
static CYTHON_INLINE int
__Pyx_PyInt_As_int(PyObject * x)
{
  const int neg_one = (int)((int)0 - (int)1), const_zero = (int)0;
  const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x)))
  {
    if (sizeof(int) < sizeof(long))
    {
      __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
    }
    else
    {
      long val = PyInt_AS_LONG(x);
      if (is_unsigned && unlikely(val < 0))
      {
        goto raise_neg_overflow;
      }
      return (int)val;
    }
  }
  else
#endif
      if (likely(PyLong_Check(x)))
  {
    if (is_unsigned)
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (int)0;
        case 1:
          __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
        case 2:
          if (8 * sizeof(int) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) >= 2 * PyLong_SHIFT)
            {
              return (int)(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
            }
          }
          break;
        case 3:
          if (8 * sizeof(int) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) >= 3 * PyLong_SHIFT)
            {
              return (
                  int)(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) |
                        (int)digits[0]));
            }
          }
          break;
        case 4:
          if (8 * sizeof(int) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) >= 4 * PyLong_SHIFT)
            {
              return (
                  int)(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) |
                          (int)digits[1])
                         << PyLong_SHIFT) |
                        (int)digits[0]));
            }
          }
          break;
      }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
      if (unlikely(Py_SIZE(x) < 0))
      {
        goto raise_neg_overflow;
      }
#else
      {
        int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
        if (unlikely(result < 0))
          return (int)-1;
        if (unlikely(result == 1))
          goto raise_neg_overflow;
      }
#endif
      if (sizeof(int) <= sizeof(unsigned long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
      }
    }
    else
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (int)0;
        case -1:
          __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit)(-(sdigit)digits[0]))
        case 1:
          __PYX_VERIFY_RETURN_INT(int, digit, +digits[0])
        case -2:
          if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(int,
                                      long,
                                      -(long)(((((unsigned long)digits[1]) << PyLong_SHIFT) |
                                               (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)
            {
              return (int)(((int)-1) * (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
            }
          }
          break;
        case 2:
          if (8 * sizeof(int) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)
            {
              return (int)((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
            }
          }
          break;
        case -3:
          if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  long,
                  -(long)((
                      (((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)
            {
              return (int)(((int)-1) * (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1])
                                          << PyLong_SHIFT) |
                                         (int)digits[0])));
            }
          }
          break;
        case 3:
          if (8 * sizeof(int) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)
            {
              return (
                  int)((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) |
                         (int)digits[0])));
            }
          }
          break;
        case -4:
          if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  long,
                  -(long)((
                      (((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                         << PyLong_SHIFT) |
                        (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)
            {
              return (
                  int)(((int)-1) *
                       (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) |
                           (int)digits[1])
                          << PyLong_SHIFT) |
                         (int)digits[0])));
            }
          }
          break;
        case 4:
          if (8 * sizeof(int) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  int,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)
            {
              return (
                  int)((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) |
                           (int)digits[1])
                          << PyLong_SHIFT) |
                         (int)digits[0])));
            }
          }
          break;
      }
#endif
      if (sizeof(int) <= sizeof(long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(int) <= sizeof(PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
      }
    }
    {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
      PyErr_SetString(PyExc_RuntimeError,
                      "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
      int val;
      PyObject * v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
      if (likely(v) && !PyLong_Check(v))
      {
        PyObject * tmp = v;
        v = PyNumber_Long(tmp);
        Py_DECREF(tmp);
      }
#endif
      if (likely(v))
      {
        int one = 1;
        int is_little = (int)*(unsigned char *)&one;
        unsigned char * bytes = (unsigned char *)&val;
        int ret =
            _PyLong_AsByteArray((PyLongObject *)v, bytes, sizeof(val), is_little, !is_unsigned);
        Py_DECREF(v);
        if (likely(!ret))
          return val;
      }
#endif
      return (int)-1;
    }
  }
  else
  {
    int val;
    PyObject * tmp = __Pyx_PyNumber_IntOrLong(x);
    if (!tmp)
      return (int)-1;
    val = __Pyx_PyInt_As_int(tmp);
    Py_DECREF(tmp);
    return val;
  }
raise_overflow:
  PyErr_SetString(PyExc_OverflowError, "value too large to convert to int");
  return (int)-1;
raise_neg_overflow:
  PyErr_SetString(PyExc_OverflowError, "can't convert negative value to int");
  return (int)-1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t
__Pyx_PyInt_As_size_t(PyObject * x)
{
  const size_t neg_one = (size_t)((size_t)0 - (size_t)1), const_zero = (size_t)0;
  const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x)))
  {
    if (sizeof(size_t) < sizeof(long))
    {
      __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
    }
    else
    {
      long val = PyInt_AS_LONG(x);
      if (is_unsigned && unlikely(val < 0))
      {
        goto raise_neg_overflow;
      }
      return (size_t)val;
    }
  }
  else
#endif
      if (likely(PyLong_Check(x)))
  {
    if (is_unsigned)
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (size_t)0;
        case 1:
          __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
        case 2:
          if (8 * sizeof(size_t) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT)
            {
              return (size_t)(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
            }
          }
          break;
        case 3:
          if (8 * sizeof(size_t) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT)
            {
              return (size_t)(
                  ((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) |
                   (size_t)digits[0]));
            }
          }
          break;
        case 4:
          if (8 * sizeof(size_t) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT)
            {
              return (size_t)(
                  ((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) |
                     (size_t)digits[1])
                    << PyLong_SHIFT) |
                   (size_t)digits[0]));
            }
          }
          break;
      }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
      if (unlikely(Py_SIZE(x) < 0))
      {
        goto raise_neg_overflow;
      }
#else
      {
        int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
        if (unlikely(result < 0))
          return (size_t)-1;
        if (unlikely(result == 1))
          goto raise_neg_overflow;
      }
#endif
      if (sizeof(size_t) <= sizeof(unsigned long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
      }
    }
    else
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (size_t)0;
        case -1:
          __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit)(-(sdigit)digits[0]))
        case 1:
          __PYX_VERIFY_RETURN_INT(size_t, digit, +digits[0])
        case -2:
          if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(size_t,
                                      long,
                                      -(long)(((((unsigned long)digits[1]) << PyLong_SHIFT) |
                                               (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)
            {
              return (size_t)(((size_t)-1) *
                              (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
            }
          }
          break;
        case 2:
          if (8 * sizeof(size_t) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)
            {
              return (size_t)((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
            }
          }
          break;
        case -3:
          if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  long,
                  -(long)((
                      (((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)
            {
              return (size_t)(
                  ((size_t)-1) *
                  (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) |
                    (size_t)digits[0])));
            }
          }
          break;
        case 3:
          if (8 * sizeof(size_t) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)
            {
              return (size_t)(
                  (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) |
                    (size_t)digits[0])));
            }
          }
          break;
        case -4:
          if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  long,
                  -(long)((
                      (((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                         << PyLong_SHIFT) |
                        (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)
            {
              return (size_t)(((size_t)-1) *
                              (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2])
                                   << PyLong_SHIFT) |
                                  (size_t)digits[1])
                                 << PyLong_SHIFT) |
                                (size_t)digits[0])));
            }
          }
          break;
        case 4:
          if (8 * sizeof(size_t) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  size_t,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)
            {
              return (size_t)((
                  ((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) |
                     (size_t)digits[1])
                    << PyLong_SHIFT) |
                   (size_t)digits[0])));
            }
          }
          break;
      }
#endif
      if (sizeof(size_t) <= sizeof(long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(size_t) <= sizeof(PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
      }
    }
    {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
      PyErr_SetString(PyExc_RuntimeError,
                      "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
      size_t val;
      PyObject * v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
      if (likely(v) && !PyLong_Check(v))
      {
        PyObject * tmp = v;
        v = PyNumber_Long(tmp);
        Py_DECREF(tmp);
      }
#endif
      if (likely(v))
      {
        int one = 1;
        int is_little = (int)*(unsigned char *)&one;
        unsigned char * bytes = (unsigned char *)&val;
        int ret =
            _PyLong_AsByteArray((PyLongObject *)v, bytes, sizeof(val), is_little, !is_unsigned);
        Py_DECREF(v);
        if (likely(!ret))
          return val;
      }
#endif
      return (size_t)-1;
    }
  }
  else
  {
    size_t val;
    PyObject * tmp = __Pyx_PyNumber_IntOrLong(x);
    if (!tmp)
      return (size_t)-1;
    val = __Pyx_PyInt_As_size_t(tmp);
    Py_DECREF(tmp);
    return val;
  }
raise_overflow:
  PyErr_SetString(PyExc_OverflowError, "value too large to convert to size_t");
  return (size_t)-1;
raise_neg_overflow:
  PyErr_SetString(PyExc_OverflowError, "can't convert negative value to size_t");
  return (size_t)-1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject *
__Pyx_PyInt_From_long(long value)
{
  const long neg_one = (long)((long)0 - (long)1), const_zero = (long)0;
  const int is_unsigned = neg_one > const_zero;
  if (is_unsigned)
  {
    if (sizeof(long) < sizeof(long))
    {
      return PyInt_FromLong((long)value);
    }
    else if (sizeof(long) <= sizeof(unsigned long))
    {
      return PyLong_FromUnsignedLong((unsigned long)value);
#ifdef HAVE_LONG_LONG
    }
    else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG))
    {
      return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)value);
#endif
    }
  }
  else
  {
    if (sizeof(long) <= sizeof(long))
    {
      return PyInt_FromLong((long)value);
#ifdef HAVE_LONG_LONG
    }
    else if (sizeof(long) <= sizeof(PY_LONG_LONG))
    {
      return PyLong_FromLongLong((PY_LONG_LONG)value);
#endif
    }
  }
  {
    int one = 1;
    int little = (int)*(unsigned char *)&one;
    unsigned char * bytes = (unsigned char *)&value;
    return _PyLong_FromByteArray(bytes, sizeof(long), little, !is_unsigned);
  }
}

/* CIntFromPy */
static CYTHON_INLINE long
__Pyx_PyInt_As_long(PyObject * x)
{
  const long neg_one = (long)((long)0 - (long)1), const_zero = (long)0;
  const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x)))
  {
    if (sizeof(long) < sizeof(long))
    {
      __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
    }
    else
    {
      long val = PyInt_AS_LONG(x);
      if (is_unsigned && unlikely(val < 0))
      {
        goto raise_neg_overflow;
      }
      return (long)val;
    }
  }
  else
#endif
      if (likely(PyLong_Check(x)))
  {
    if (is_unsigned)
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (long)0;
        case 1:
          __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
        case 2:
          if (8 * sizeof(long) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) >= 2 * PyLong_SHIFT)
            {
              return (long)(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
            }
          }
          break;
        case 3:
          if (8 * sizeof(long) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) >= 3 * PyLong_SHIFT)
            {
              return (
                  long)(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) |
                         (long)digits[0]));
            }
          }
          break;
        case 4:
          if (8 * sizeof(long) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) >= 4 * PyLong_SHIFT)
            {
              return (long)((
                  (((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) |
                    (long)digits[1])
                   << PyLong_SHIFT) |
                  (long)digits[0]));
            }
          }
          break;
      }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
      if (unlikely(Py_SIZE(x) < 0))
      {
        goto raise_neg_overflow;
      }
#else
      {
        int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
        if (unlikely(result < 0))
          return (long)-1;
        if (unlikely(result == 1))
          goto raise_neg_overflow;
      }
#endif
      if (sizeof(long) <= sizeof(unsigned long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
      }
    }
    else
    {
#if CYTHON_USE_PYLONG_INTERNALS
      const digit * digits = ((PyLongObject *)x)->ob_digit;
      switch (Py_SIZE(x))
      {
        case 0:
          return (long)0;
        case -1:
          __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit)(-(sdigit)digits[0]))
        case 1:
          __PYX_VERIFY_RETURN_INT(long, digit, +digits[0])
        case -2:
          if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(long,
                                      long,
                                      -(long)(((((unsigned long)digits[1]) << PyLong_SHIFT) |
                                               (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)
            {
              return (long)(((long)-1) * (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
            }
          }
          break;
        case 2:
          if (8 * sizeof(long) > 1 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)
            {
              return (long)((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
            }
          }
          break;
        case -3:
          if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  long,
                  -(long)((
                      (((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)
            {
              return (long)(((long)-1) * (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1])
                                            << PyLong_SHIFT) |
                                           (long)digits[0])));
            }
          }
          break;
        case 3:
          if (8 * sizeof(long) > 2 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)
            {
              return (long)((
                  ((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) |
                   (long)digits[0])));
            }
          }
          break;
        case -4:
          if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  long,
                  -(long)((
                      (((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                         << PyLong_SHIFT) |
                        (unsigned long)digits[1])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)
            {
              return (long)(((long)-1) *
                            (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2])
                                 << PyLong_SHIFT) |
                                (long)digits[1])
                               << PyLong_SHIFT) |
                              (long)digits[0])));
            }
          }
          break;
        case 4:
          if (8 * sizeof(long) > 3 * PyLong_SHIFT)
          {
            if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)
            {
              __PYX_VERIFY_RETURN_INT(
                  long,
                  unsigned long,
                  (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2])
                       << PyLong_SHIFT) |
                      (unsigned long)digits[1])
                     << PyLong_SHIFT) |
                    (unsigned long)digits[0])))
            }
            else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)
            {
              return (long)((
                  ((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) |
                     (long)digits[1])
                    << PyLong_SHIFT) |
                   (long)digits[0])));
            }
          }
          break;
      }
#endif
      if (sizeof(long) <= sizeof(long))
      {
        __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
      }
      else if (sizeof(long) <= sizeof(PY_LONG_LONG))
      {
        __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
      }
    }
    {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
      PyErr_SetString(PyExc_RuntimeError,
                      "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
      long val;
      PyObject * v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
      if (likely(v) && !PyLong_Check(v))
      {
        PyObject * tmp = v;
        v = PyNumber_Long(tmp);
        Py_DECREF(tmp);
      }
#endif
      if (likely(v))
      {
        int one = 1;
        int is_little = (int)*(unsigned char *)&one;
        unsigned char * bytes = (unsigned char *)&val;
        int ret =
            _PyLong_AsByteArray((PyLongObject *)v, bytes, sizeof(val), is_little, !is_unsigned);
        Py_DECREF(v);
        if (likely(!ret))
          return val;
      }
#endif
      return (long)-1;
    }
  }
  else
  {
    long val;
    PyObject * tmp = __Pyx_PyNumber_IntOrLong(x);
    if (!tmp)
      return (long)-1;
    val = __Pyx_PyInt_As_long(tmp);
    Py_DECREF(tmp);
    return val;
  }
raise_overflow:
  PyErr_SetString(PyExc_OverflowError, "value too large to convert to long");
  return (long)-1;
raise_neg_overflow:
  PyErr_SetString(PyExc_OverflowError, "can't convert negative value to long");
  return (long)-1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int
__Pyx_InBases(PyTypeObject * a, PyTypeObject * b)
{
  while (a)
  {
    a = a->tp_base;
    if (a == b)
      return 1;
  }
  return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int
__Pyx_IsSubtype(PyTypeObject * a, PyTypeObject * b)
{
  PyObject * mro;
  if (a == b)
    return 1;
  mro = a->tp_mro;
  if (likely(mro))
  {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(mro);
    for (i = 0; i < n; i++)
    {
      if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
        return 1;
    }
    return 0;
  }
  return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int
__Pyx_inner_PyErr_GivenExceptionMatches2(PyObject * err, PyObject * exc_type1, PyObject * exc_type2)
{
  PyObject *exception, *value, *tb;
  int res;
  __Pyx_PyThreadState_declare __Pyx_PyThreadState_assign __Pyx_ErrFetch(&exception, &value, &tb);
  res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
  if (unlikely(res == -1))
  {
    PyErr_WriteUnraisable(err);
    res = 0;
  }
  if (!res)
  {
    res = PyObject_IsSubclass(err, exc_type2);
    if (unlikely(res == -1))
    {
      PyErr_WriteUnraisable(err);
      res = 0;
    }
  }
  __Pyx_ErrRestore(exception, value, tb);
  return res;
}
#else
static CYTHON_INLINE int
__Pyx_inner_PyErr_GivenExceptionMatches2(PyObject * err, PyObject * exc_type1, PyObject * exc_type2)
{
  int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject *)err, (PyTypeObject *)exc_type1) : 0;
  if (!res)
  {
    res = __Pyx_IsSubtype((PyTypeObject *)err, (PyTypeObject *)exc_type2);
  }
  return res;
}
#endif
static int
__Pyx_PyErr_GivenExceptionMatchesTuple(PyObject * exc_type, PyObject * tuple)
{
  Py_ssize_t i, n;
  assert(PyExceptionClass_Check(exc_type));
  n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
  for (i = 0; i < n; i++)
  {
    if (exc_type == PyTuple_GET_ITEM(tuple, i))
      return 1;
  }
#endif
  for (i = 0; i < n; i++)
  {
    PyObject * t = PyTuple_GET_ITEM(tuple, i);
#if PY_MAJOR_VERSION < 3
    if (likely(exc_type == t))
      return 1;
#endif
    if (likely(PyExceptionClass_Check(t)))
    {
      if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t))
        return 1;
    }
    else
    {
    }
  }
  return 0;
}
static CYTHON_INLINE int
__Pyx_PyErr_GivenExceptionMatches(PyObject * err, PyObject * exc_type)
{
  if (likely(err == exc_type))
    return 1;
  if (likely(PyExceptionClass_Check(err)))
  {
    if (likely(PyExceptionClass_Check(exc_type)))
    {
      return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    else if (likely(PyTuple_Check(exc_type)))
    {
      return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
    }
    else
    {
    }
  }
  return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int
__Pyx_PyErr_GivenExceptionMatches2(PyObject * err, PyObject * exc_type1, PyObject * exc_type2)
{
  assert(PyExceptionClass_Check(exc_type1));
  assert(PyExceptionClass_Check(exc_type2));
  if (likely(err == exc_type1 || err == exc_type2))
    return 1;
  if (likely(PyExceptionClass_Check(err)))
  {
    return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
  }
  return (PyErr_GivenExceptionMatches(err, exc_type1) ||
          PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int
__Pyx_check_binary_version(void)
{
  char ctversion[4], rtversion[4];
  PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
  PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
  if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2])
  {
    char message[200];
    PyOS_snprintf(message,
                  sizeof(message),
                  "compiletime version %s of module '%.100s' "
                  "does not match runtime version %s",
                  ctversion,
                  __Pyx_MODULE_NAME,
                  rtversion);
    return PyErr_WarnEx(NULL, message, 1);
  }
  return 0;
}

/* InitStrings */
static int
__Pyx_InitStrings(__Pyx_StringTabEntry * t)
{
  while (t->p)
  {
#if PY_MAJOR_VERSION < 3
    if (t->is_unicode)
    {
      *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
    }
    else if (t->intern)
    {
      *t->p = PyString_InternFromString(t->s);
    }
    else
    {
      *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
    }
#else
    if (t->is_unicode | t->is_str)
    {
      if (t->intern)
      {
        *t->p = PyUnicode_InternFromString(t->s);
      }
      else if (t->encoding)
      {
        *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
      }
      else
      {
        *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
      }
    }
    else
    {
      *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
    }
#endif
    if (!*t->p)
      return -1;
    if (PyObject_Hash(*t->p) == -1)
      return -1;
    ++t;
  }
  return 0;
}

static CYTHON_INLINE PyObject *
__Pyx_PyUnicode_FromString(const char * c_str)
{
  return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char *
__Pyx_PyObject_AsString(PyObject * o)
{
  Py_ssize_t ignore;
  return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char *
__Pyx_PyUnicode_AsStringAndSize(PyObject * o, Py_ssize_t * length)
{
  char * defenc_c;
  PyObject * defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
  if (!defenc)
    return NULL;
  defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  {
    char * end = defenc_c + PyBytes_GET_SIZE(defenc);
    char * c;
    for (c = defenc_c; c < end; c++)
    {
      if ((unsigned char)(*c) >= 128)
      {
        PyUnicode_AsASCIIString(o);
        return NULL;
      }
    }
  }
#endif
  *length = PyBytes_GET_SIZE(defenc);
  return defenc_c;
}
#else
static CYTHON_INLINE const char *
__Pyx_PyUnicode_AsStringAndSize(PyObject * o, Py_ssize_t * length)
{
  if (unlikely(__Pyx_PyUnicode_READY(o) == -1))
    return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  if (likely(PyUnicode_IS_ASCII(o)))
  {
    *length = PyUnicode_GET_LENGTH(o);
    return PyUnicode_AsUTF8(o);
  }
  else
  {
    PyUnicode_AsASCIIString(o);
    return NULL;
  }
#else
  return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char *
__Pyx_PyObject_AsStringAndSize(PyObject * o, Py_ssize_t * length)
{
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
  if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
      __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
      PyUnicode_Check(o))
  {
    return __Pyx_PyUnicode_AsStringAndSize(o, length);
  }
  else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
      if (PyByteArray_Check(o))
  {
    *length = PyByteArray_GET_SIZE(o);
    return PyByteArray_AS_STRING(o);
  }
  else
#endif
  {
    char * result;
    int r = PyBytes_AsStringAndSize(o, &result, length);
    if (unlikely(r < 0))
    {
      return NULL;
    }
    else
    {
      return result;
    }
  }
}
static CYTHON_INLINE int
__Pyx_PyObject_IsTrue(PyObject * x)
{
  int is_true = x == Py_True;
  if (is_true | (x == Py_False) | (x == Py_None))
    return is_true;
  else
    return PyObject_IsTrue(x);
}
static CYTHON_INLINE int
__Pyx_PyObject_IsTrueAndDecref(PyObject * x)
{
  int retval;
  if (unlikely(!x))
    return -1;
  retval = __Pyx_PyObject_IsTrue(x);
  Py_DECREF(x);
  return retval;
}
static PyObject *
__Pyx_PyNumber_IntOrLongWrongResultType(PyObject * result, const char * type_name)
{
#if PY_MAJOR_VERSION >= 3
  if (PyLong_Check(result))
  {
    if (PyErr_WarnFormat(PyExc_DeprecationWarning,
                         1,
                         "__int__ returned non-int (type %.200s).  "
                         "The ability to return an instance of a strict subclass of int "
                         "is deprecated, and may be removed in a future version of Python.",
                         Py_TYPE(result)->tp_name))
    {
      Py_DECREF(result);
      return NULL;
    }
    return result;
  }
#endif
  PyErr_Format(PyExc_TypeError,
               "__%.4s__ returned non-%.4s (type %.200s)",
               type_name,
               type_name,
               Py_TYPE(result)->tp_name);
  Py_DECREF(result);
  return NULL;
}
static CYTHON_INLINE PyObject *
__Pyx_PyNumber_IntOrLong(PyObject * x)
{
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods * m;
#endif
  const char * name = NULL;
  PyObject * res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int)
  {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long)
  {
    name = "long";
    res = m->nb_long(x);
  }
#else
  if (likely(m && m->nb_int))
  {
    name = "int";
    res = m->nb_int(x);
  }
#endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x))
  {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res))
  {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res)))
    {
#else
    if (unlikely(!PyLong_CheckExact(res)))
    {
#endif
      return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) { PyErr_SetString(PyExc_TypeError, "an integer is required"); }
  return res;
}
static CYTHON_INLINE Py_ssize_t
__Pyx_PyIndex_AsSsize_t(PyObject * b)
{
  Py_ssize_t ival;
  PyObject * x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
  {
    if (sizeof(Py_ssize_t) >= sizeof(long))
      return PyInt_AS_LONG(b);
    else
      return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b)))
  {
#if CYTHON_USE_PYLONG_INTERNALS
    const digit * digits = ((PyLongObject *)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1))
    {
      ival = likely(size) ? digits[0] : 0;
      if (size == -1)
        ival = -ival;
      return ival;
    }
    else
    {
      switch (size)
      {
        case 2:
          if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT)
          {
            return (Py_ssize_t)(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
          }
          break;
        case -2:
          if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT)
          {
            return -(Py_ssize_t)(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
          }
          break;
        case 3:
          if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT)
          {
            return (Py_ssize_t)(
                ((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) |
                 (size_t)digits[0]));
          }
          break;
        case -3:
          if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT)
          {
            return -(Py_ssize_t)(
                ((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) |
                 (size_t)digits[0]));
          }
          break;
        case 4:
          if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT)
          {
            return (Py_ssize_t)(
                ((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) |
                   (size_t)digits[1])
                  << PyLong_SHIFT) |
                 (size_t)digits[0]));
          }
          break;
        case -4:
          if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT)
          {
            return -(Py_ssize_t)(
                ((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) |
                   (size_t)digits[1])
                  << PyLong_SHIFT) |
                 (size_t)digits[0]));
          }
          break;
      }
    }
#endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x)
    return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject *
__Pyx_PyBool_FromLong(long b)
{
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject *
__Pyx_PyInt_FromSize_t(size_t ival)
{
  return PyInt_FromSize_t(ival);
}

#endif /* Py_PYTHON_H */
